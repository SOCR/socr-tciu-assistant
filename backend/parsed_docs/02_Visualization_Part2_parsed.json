{
  "metadata": {
    "created_at": "2024-11-30T13:46:16.118077",
    "total_sections": 3,
    "total_code_chunks": 65,
    "total_tables": 1,
    "r_libraries": [
      "DT",
      "GGally",
      "RODBC",
      "brainR",
      "corrplot",
      "d3heatmap",
      "dendextend",
      "devtools",
      "dplyr",
      "fitdistrplus",
      "ggdendro",
      "ggplot2",
      "gplots",
      "grDevices",
      "graphics",
      "jpeg",
      "mixtools",
      "oro.nifti",
      "plotly",
      "plyr",
      "reshape",
      "reshape2",
      "rvest",
      "scales",
      "spatstat",
      "tidyr",
      "tidyverse",
      "xml2"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"DSPA2: Data Science and Predictive Analytics (UMich HS650)\"\nsubtitle: \"<h2><u>Basic Visualization and Exploratory Data Analytics (Part 2)</u></h2>\"\nauthor: \"<h3>SOCR/MIDAS (Ivo Dinov)</h3>\"\ndate: \"`r format(Sys.time(), '%B %Y')`\"\ntags: [DSPA, SOCR, MIDAS, Big Data, Predictive Analytics] \noutput:\n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: SOCR_header.html\n    toc: true\n    number_sections: true\n    toc_depth: 2\n    toc_float:\n      collapsed: false\n      smooth_scroll: true\n    code_folding: show\n*This is [Part 2](https://socr.umich.edu/DSPA2/DSPA2_notes/02_Visualization_Part2.html) of the larger [DSPA Visualization Chapter](https://socr.umich.edu/DSPA2/DSPA2_notes/02_Visualization.html), which is difficult to render in a single browser window due to extreme memory demands. [Visualization Chapter Part 1](https://socr.umich.edu/DSPA2/DSPA2_notes/02_Visualization_Part1.html) includes data handling, statistical measures of centrality and dispersion, understanding categorical and numeric data, uniform and normal distributions, missing data imputation, web page parsing, visualization of tabular HTML data, and cohort-rebalancing (for imbalanced groups).*\n\nIn this chapter, we will present a number of complementary strategies for data wrangling, harmonization, manipulation, aggregation, visualization, and graphical exploration.  Specifically, we will discuss alternative methods for loading and saving computable data objects, importing and exporting different data structures, measuring sample statistics for quantitative variables, plotting sample histograms and model distribution functions, and scraping data from websites. In addition, we will cover exploratory data analytical (EDA) techniques, handling of incomplete (missing) data, and cohort-rebalancing of imbalanced groups.",
      "word_count": 199
    },
    {
      "title": "Exploratory Data Analytics (EDA)",
      "content": "In this section, we will see a broad range of simulations and hands-on activities to highlight some of the basic data visualization techniques using R. A brief discussion of alternative visualization methods is followed by demonstrations of histograms, density, pie, jitter, bar, line and scatter plots, as well as strategies for displaying trees and graphs and 3D surface plots. Many of these are also used throughout the textbook in the context of addressing the graphical needs of specific case-studies.     \n\nIt is practically impossible to cover all options of every different visualization routine. Readers are encouraged to experiment with each visualization type, change input data and parameters, explore the function documentation using R-help (e.g., `?plot`), and search for new R visualization packages and new functionality, which are continuously being developed.\n\n## General Questions Driving Visualization \n\n - What exploratory visualization techniques are available to visually interrogate my specific data? \n - How to examine paired associations and correlations in a multivariate dataset?\n\n## Classification of visualization methods\n\nScientific data-driven or simulation-driven visualization methods are hard to classify. The following list of criteria can be used for classification:\n\n - **Data Type**: structured/unstructured, small/large, complete/incomplete, time/space, ASCII/binary, Euclidean/non-Euclidean, etc.\n - **Task type**: Task  type  is  one  of  the  aspects  considered  in classification  of  visualization  techniques,  which provides means of interaction between the researcher, the data and the display software/platform\n - **Scalability**:  Visualization techniques are subject to some limitations, such as the amount of data that a particular technique can exhibit  \n - **Dimensionality**: Visualization techniques can also be classified according to the number of attributes\n - **Positioning and Attributes**: the distribution of attributes on the chart may affect the interpretation of the display representation, e.g., correlation analysis, where the relative distance among the plotted attributes is relevant for observation\n - **Investigative Need**: the specific scientific question or exploratory interest may also determine the type of visualization:\n  + Examining the composition of the data\n  + Exploring the distribution of the data\n  + Contrasting or comparing several data elements, relations, association\n  + Unsupervised exploratory data mining.\n\nAlso, we have the following table for common data visualization methods according to task types:\n\n![Task Type Visualization Methods](https://wiki.socr.umich.edu/images/7/79/DSPA_Chap03_VizTypes_Fig1.png)\n\nWe chose to introduce common data visualization methods according to this classification criterion, albeit this is not a unique or even broadly agreed upon ontological characterization of exploratory data visualization. \n\n## Composition\n\nIn this section, we will see composition plots for different types of variables and data structures.\n\n### Histograms and density plots\n\nOne of the first few graphs we learned in high school would be Histogram. In R, the functions `hist()` or `plot_ly()` represent two methods that can be applied to a vector of values for plotting histograms. The famous 19-th century statistician [Karl Pearson](https://en.wikipedia.org/wiki/Karl_Pearson) introduced histograms as graphical representations of the distribution of a sample of numeric data. The histogram plot uses the data to infer and display the probability distribution of the underlying population that the data is sampled from. Histograms are constructed by selecting a certain number of bins covering the range of values of the observed process. Typically, the number of bins for a data array of size $N$ should be equal to $\\sqrt{N}$. These bins form a partition (disjoint and covering sets) of the range. Finally, we compute the relative frequency representing the number of observations that fall within each bin interval. The histogram just plots a piecewise step-function defined over the union of the bin interfaces whose height equals the observed relative frequencies.\n\n\nThe shape of the last histogram we draw is very close to a Normal distribution (because we sampled from this distribution by `rnorm`). Note the superposition of the corresponding Normal density curve.\n\n\n### Pie Chart\t\n\nWe are all very familiar with pie charts that show us the components of a big \"cake\". Although pie charts provide effective simple visualization in certain situations, it may also be difficult to compare segments within a pie chart or across different pie charts. Other plots like bar chart, box or dot plots may be attractive alternatives.\n\nWe will use the Letter Frequency Data on [SOCR website](https://wiki.socr.umich.edu/index.php/SOCR_LetterFrequencyData) to illustrate the use of pie charts.\n\n\nWe can try to plot the frequency proportion of the 26 English letters using pie and donut charts.\n\n\n\nThe input type for `pie()` is a vector of non-negative numerical quantities. In the `pie` function we list the data that we are going to use (positive and numeric), the labels for each of them, and the colors we want to use for each sector. In the `legend` function, we put the location in the first slot and `legend` are the labels for colors. `cex`, `bty`, `pch`, and `pt.cex` are all graphic parameters that we have talked about in [Chapter 1](https://www.socr.umich.edu/people/dinov/courses/DSPA_notes/01_Foundation.html).\n\nMore elaborate pie charts, using the Latin letter data, will be demonstrated using `ggplot` later, ([Section 7.2](https://www.socr.umich.edu/people/dinov/courses/DSPA_notes/03_DataVisualization.html#72_some_additional_ggplot_examples).\n\n### Heat map\n\nAnother common data visualization method is the `heat map`. Heat maps can help us visualize the individual values in a matrix intuitively. It is widely used in genetics research and financial applications.\n\nWe will illustrate the use of heat maps, based on a [neuroimaging genetics case-study data](https://dx.doi.org/10.4306/pi.2015.12.1.125) about the association (p-values) of different brain regions of interest (ROIs) and genetic traits (SNPs) for Alzheimer's disease (AD) patients, subjects with mild cognitive impairment (MCI), and normal controls (NC). First, let's import the data into R. The data are 2D arrays where the rows represent different genetic SNPs, columns represent brain ROIs, and the cell values represent the strength of the SNP-ROI association as probability values (smaller p-values indicate stronger neuroimaging-genetic associations).\n\n\nThen we load the R packages we need for heat maps (use `install.packages(\"package name\")` first if you did not install them into your computer). \n\n\nThen we convert the datasets into matrices.\n\n\nWe may also want to set up the row (rc) and column (cc) colors for each cohort.\n\n\nFinally, we got to the point where we can plot heat maps. As we can see, the input type of `heatmap()` is a numeric matrix.\n\n\nIn the `heatmap()` function the first argument is for matrices we want to use. `col` is the color scheme; `scale` is a character indicating if the values should be centered and scaled in either the row direction or the column direction, or none (\"row\", \"column\", and \"none\"); `RowSideColors` and `ColSideColors` creates the color names for horizontal side bars.\n\nThe differences between the AD, MCI and NC heat maps are suggestive of variations of genetic traits or alternative brain regions that may be affected in the three clinically different cohorts.\n\n## Comparison\n\nPlots used for comparing different individuals, groups of subjects, or multiple units represent another set of popular exploratory visualization tools.\n\n### Paired Scatter Plots\n\nScatter plots use the 2D Cartesian plane to display a graph indexed by a pair of variables. 2D points in the graph represent values associated with the two variables corresponding to the two coordinate axes. The position of each 2D point is determined by the values of the first and second variables, tracked on the horizontal and vertical axes. If no clear dependent variable exists, either variable can be plotted on the X axis and the corresponding scatter plot will illustrate the degree of correlation (not necessarily causation) between two variables. Although we will mostly demonstrate the use of `plot_ly()`, which provides dynamic and interactive charts, many basic graphs, including scatter plots, can be rendered using the R function `plot(x, y)`.\n\n\nNow let's draw a paired scatter plot with 5 variables. \n\n\nThis is an interactive scatter plot where you can select/subset some observations in any of the plots and see their associations with other variables across all pairs plots.\n\nLet's see a real word data example. First, we can import the Mental Health Services Survey Data into R, which is on the [class website](https://umich.instructure.com/courses/38100/files/folder/Case_Studies). This survey data covers $10,374$ mental health facilities across the US, the District of Columbia, and US Territories with 237 variables about various facility characteristics. A subset of 10 variables is included in this dataset with all 10,374 cases. Two of the facilitate characteristics involve (1) *supp*, representing the number of specialty and support services available at the mental health facility; and (2) *qual*, which is the number of quality indicators present at the mental health facility. \n\n\nWe can see from `head()` that there are a lot of *NA*'s in the dataset and the pairs plot (`splom`) automatically ignores these (and posts a warning message).\n\n\nThe first plot shows the relation between *supp* (support services) and *qual* (quality indicators). The more elaborate pairs plot illustrates multiple bivariate relations that can be interactively explored by selecting points in any of the plots, where points are color-coded by the *quality indicator* variable.\n\nTo see this trend model (`loess(supp ~ qual`) exposing the trajectory of the support-services to quality relationship. This *locally estimated scatterplot smoothing* (LOESS) model represents a nonlinear smoothing regression.\n\n\nYou can also use the [human height and weight dataset](http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_Dinov_020108_HeightsWeights) or the [knee pain dataset](https://wiki.socr.umich.edu/index.php/SOCR_Data_KneePainData_041409) to illustrate some interesting scatter plots. \n\n### Jitter plot\n\nJitter plot can help us deal with the overplot issue when we have many points in the data. The function we will be using is still in the package `ggplot2` called `position_jitter()`.\n\nStill we use the earthquake data for example. We will compare the differences with and without the `position_jitter()` function.\n\n\n### Bar Plots\n\nBar plots, or bar charts, represent group data with rectangular bars. There are many variants of bar charts for comparison among categories. Typically, either horizontal or vertical bars are used where one of the axes shows the compared categories and the other axis represents a discrete value. It's possible, and sometimes desirable, to plot bar graphs including bars clustered by groups.\n\nIn R we can use `plotly` or `barplot()` for barplots with inputs either vectors or matrices.\nThe `ggplot2::diamonds` dataset is comprised of $53,940$ diamond records (rows) with 10 observed characteristics: price (\\$326–\\$18,823); carat (diamond weight); cut (quality of the cut); color (D (best) to J (worst)); clarity \n(I1 (worst), ..., IF (best)); x, and z length in mm; depth (total depth percentage = z/mean(x, y) = 2*z/(x + y)); and table (diamond width of top).\n\n\nWe can add error-bars to each bar to indicate a statistical variability. T\n\n\nLet's look at a more complex example. We utilize the dataset [Case_04_ChildTrauma](https://umich.instructure.com/courses/38100/files/folder/Case_Studies) for illustration. This case study examines associations between post-traumatic psychopathology and service utilization by trauma-exposed children.  \n\n\nWe have two character variables. Our goal is to draw a bar plot comparing the means of `age` and `service` among different races in this study and we want to add standard deviation for each bar. The first thing to do is delete the two character columns. Remember the input for `barplot()` is numerical vector or matrix. However, we will need race information for classification. Thus, we store it in a different dataset.\n\n\nThen, we are ready to separate groups and get group means.\n\n\nUntil now, we had a numerical matrix for the means available for plotting. Now, we can compute a second order statistics - standard deviation, and plot it along with the means, to illustrate the amount of dispersion for each variable.\n\n\nAnother way to plot bar plots is to use `ggplot()` in the ggplot package. This kind of bar plots are quite different from the one we introduced previously. It plots the counts of character variables rather than the means of numerical variables. It takes the values from a `data.frame`. Unlike `barplot()`, drawing bar plots using `ggplot2` requires remaining character variables in the original data frame.\n\n\nThis plot helps us to compare the occurrence of different types of child-trauma among different races.\n\n### Trees and Graphs\n\nIn general, a [graph](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)) is an ordered pair $G = (V, E)$ of vertices ($V$). i.e., nodes or points, and a set edges ($E$), arcs or lines connecting pairs of nodes in $V$. A [tree](https://en.wikipedia.org/wiki/Tree_(graph_theory)) is a special type of acyclic graph that does not include looping paths. Visualization of graphs is critical in many biosocial and health studies and we will see examples throughout this textbook.\n\nIn [Chapter 3](https://socr.umich.edu/DSPA2/DSPA2_notes/03_LinearAlgebraMatrixComputingRegression.html) and [Chapter 8](https://socr.umich.edu/DSPA2/DSPA2_notes/08_Unsupervised_Clustering.html) we will learn more about how to build tree models and other clustering methods, and in [Chapter 22](https://www.socr.umich.edu/people/dinov/courses/DSPA_notes/22_DeepLearning.html), we will discuss deep learning and neural networks, which intrinsically represent AI decision graphs.\n\nThis section will be focused on displaying tree graphs. We will use [02_Nof1_Data.csv](https://umich.instructure.com/courses/38100/files/folder/data) for this demonstration.\n\n\nWe use `hclust` to build the hierarchical cluster model. `hclust` takes only inputs that have dissimilarity structure as produced by `dist()`. Also, we use the `ave()` method for agglomeration and plot our first tree graph.\n\n\nWhen we have no limit for maximum cluster groups, we will get the above graph, which is miserable to look at. Luckily, `cutree` will help us to set limitations to the number of clusters. `cutree()` takes a `hclust` object and returns a vector of group indicators for all observations.  \n\n\nThen, we can get the mean of each variable within groups by the following for loop.\n\n\nNow we can plot the new tree graph with 10 groups. With `members=table(mem)` option, the matrix is taken to be a dissimilarity matrix between clusters instead of dissimilarities between singletons and members giving the number of observations per cluster.\n\n\n### Correlation Plots\n\nThe `corrplot` package enables the graphical display of a correlation matrix, and confidence intervals, along with some tools for matrix reordering. There are seven visualization methods (parameter method) in the `corrplot` package, named \"circle\", \"square\", \"ellipse\", \"number\", \"shade\", \"color\", \"pie\".\n\nLet's use [03_NC_SNP_ROI_Assoc_P_values.csv](https://umich.instructure.com/courses/38100/files/folder/data?) again to investigate the associations among SNPs using correlation plots.\n\nThe `corrplot()` function we will be using takes correlation matrix only. So we need to get the correlation matrix of our data first via the `cor()` function.\n\n\nWe will discover the difference among different methods under `corrplot`.\n\n\nThe shades are different and darker dots represent high correlation of the two variables corresponding to the x and y axes.\n\n## Relationships\n\n### Line plots using `ggplot`\n\n[Line charts](https://en.wikipedia.org/wiki/Line_chart) display a series of data points, e.g., observed intensities ($Y$) over time ($X$), by connecting them with straight-line segments. These can be used to either track temporal changes of a process or compare the trajectories of multiple cases, time series or subjects over time, space, or state.\n\nIn this section, we will utilize the Earthquakes dataset on [SOCR website](https://wiki.socr.umich.edu/index.php/SOCR_Data_Dinov_021708_Earthquakes). It records information about earthquakes that occurred between 1969 and 2007 with magnitudes larger than 5 on the [Richter scale](https://simple.wikipedia.org/wiki/Richter_scale).\n\n\nIn this dataset, we set `Magt`(magnitude type) as groups. We will draw a \"Depth vs Latitude\" line plot from this dataset. The function we are using is called `ggplot()` under `ggplot2`. The input type for this function is mostly data frame and `aes()` specifies aesthetic mappings of how variables in the data are mapped to visual properties (aesthetics) of the `geom` objects, e.g., lines.\n\n\nThe first part `ggplot(earthquake, aes(Depth, Latitude, group=Magt, color=Magt))` in the code specifies the setting of the plot: dataset, group and color. The second part specifies we are going to draw (points or) lines between data points. In later chapters, we will frequently use the package `ggplot2` and the structure under this great package is always `function1+function2`.\n\n### Density Plots\n\nWe can visualize the distribution for different variables using density plots. \n\nThe following segment of R code plots the distribution for latitude among different [earthquake magnitude types](https://wiki.socr.umich.edu/index.php/SOCR_Data_Dinov_021708_Earthquakes#Data_Description). Also, it is using the `ggplot()` function but combined with `geom_density()`.\n\n\nNote how the green `magt` type (Local (ML) earthquakes) has a peak at latitude $37.5$, which represents [37-38 degrees North](https://en.wikipedia.org/wiki/37th_parallel_north).\n\n## Distributions\n\nRecall that there is a duality between *theoretical* and *empirical* mass, density, and distribution functions. Earlier, we saw the relations between these using the (continuous) Normal distribution, let's now look at the (discrete) Poisson distribution. The graph below plots (1) the histogram of a sample of 1,000 Poisson(1) random observations (light blue color), (2) the theoretical density/mass function (magenta color), and (3) a smooth continuous (Gaussian) kernel density estimation based on the random sample (blue color). More interactive plots of [univariate distributions](http://www.distributome.org/V3/calc/index.html) and [multivariate distributions](https://socr.umich.edu/HTML5/BivariateNormal/BVN2/) are available online.\n\n\n### Data Modeler\n\nA common task in data-driven inference involves the *fitting* of appropriate distribution models to specific observed data elements (features). In general, as there are uncountably many possible distributions that can be used as models for various types of processes, this is a difficult task. The [Probability Distributome Project (see Distributome Navigator)](http://distributome.org/) provides a deeper understanding of the notion of a probability distribution and the relations between various distributions.\n\nWe will demonstrate the concept of a **data modeler** by using [crystallographic data](https://doi.org/10.1038/nature15368) from the [Ivanova Lab at the University of Michigan](https://www.umich.edu/~mivanova), which includes the crystal spectra of [9 length samples](https://umich.instructure.com/files/11653615/download?download_frd=1) and [9 width samples](https://umich.instructure.com/files/11653614/download?download_frd=1). For both, the length and width spectra, the 9 features include \"AC1338\", \"AC1432\", \"AC1593\", \"AC1679\", \"AC1860\", \"AC1874\", \"AC1881\", \"AC1903\", and \"Rec\" (these represent different samples). Notice that the nine spectra are not congruent, different features have different sampling rates. We will employ the [`fitdistrplus` R-package](https://cran.r-project.org/web/packages/fitdistrplus) to estimate the parameters of 3 complementary distributions, however, there are many alternative packages that can also be used.\n\n#### Loading the spectral crystallography data\n\nThe data include two separate signals capturing the spectral *length* and the *width* of the crystallographic sample.\n\n - [Dec 2019 crystallography spectral data](https://umich.instructure.com/files/13375767/download?download_frd=1)\n - [crystallography Length data are here](https://umich.instructure.com/files/11653615/download?download_frd=1)\n - [crystallography Width data are here](https://umich.instructure.com/files/11653614/download?download_frd=1)\n                         \n\n#### Feature distributions\n\nLet's plot the histograms of each of the nine features.\n\n\n#### Fitting single-feature univariate distribution models\n\nWe will fit [Weibull](https://en.wikipedia.org/wiki/Weibull_distribution), [Gamma](https://en.wikipedia.org/wiki/Gamma_distribution), and [Log-Normal](https://en.wikipedia.org/wiki/Log-normal_distribution) distribution models to each feature in the data.\n\n\n####  Visual inspection \n\nLet's examine graphically the quality of the fitted distribution models. We'll plot the histograms of the features, the fitted probability densities, and the corresponding cumulative distribution functions (CDF) and compare them to their sample counterparts.\n\n\nBelow is the `plot_ly()` version of the model fit for one case.\n\n\n\n#### Quantitative summaries\n\nOften, it's useful to export the numerical results of the models. This may include various distribution characteristics like measure of centrality (e.g., mean, median, mode), measures of dispersion, and metrics of the model performance (e.g., [Kolmogorov-Smirnov test](https://wiki.socr.umich.edu/index.php/SMHS_ModelFitting)).\n\n\n#### Mixture distribution data modeling\n\nEarlier, we discussed the *expectations maximization* (EM) algorithm for parameter estimation. Now, we will illustrate the use of EM to estimate the mixture weights and the distribution parameters needed to obtain mixture-distribution data models.\n\nFor each sample, we fit a mixture distribution of $k=3$ (different number of distribution models, which is predefined). The specific types of mixtures for each of the 9 samples are indicated below.\n\n\n#### Mixture-distribution model fitting and parameter estimation\n\nWe will use the [R package mixtools](https://cran.r-project.org/web/packages/mixtools/index.html) to obtain the EM estimates of the mixture distribution weights and the corresponding distribution parameters.\n\n\n#### Plotting the mixture distribution models\n\nWe will define custom plots for the mixtures of *Gamma*, *Weibull*, and *Normal* distributions. Alternatively, we can also use some of the `mixtools::plot()` function to display mixture distribution models.\n\n\nNext, we will display the three alternative mixture distribution models overlaid on the sample histograms of each of the nine samples.\n\n\n#### Reporting model parameter estimates\n\nFor each of the [9 samples in this dataset](https://umich.instructure.com/files/13375767/download?download_frd=1)) and each of the 3 types of mixture distribution models ([Weibull](https://en.wikipedia.org/wiki/Weibull_distribution), [Gamma](https://en.wikipedia.org/wiki/Gamma_distribution), and [Normal](https://en.wikipedia.org/wiki/Normal_distribution)) we will summarize:\n\n - **lambda**: The weights (impacts) of each of the 3 mixture components to the overall mixture model,\n - **parameters**: of each mixture distribution component, *mean* and *sd*,\n - **loglik**: the overall mixture distribution [log-likelihood value](https://en.wikipedia.org/wiki/Likelihood_function).\n\n\nBelow we summarize the mixture-distribution models just for the first two crystallographic features.\n\n##### *AC1338* Report (Case 1)\n\n\n##### *AC1432* Report (Case 2)\n\n\n\n### 2D Kernel Density and 3D Surface Plots\n\n[Density estimation](https://en.wikipedia.org/wiki/Density_estimation) is the process of using observed data to compute an estimate of the underlying process' probability density function. There are several approaches to obtain density estimation, but the most basic technique is to use a rescaled histogram.\n\nPlotting 2D Kernel Density and 3D Surface plots is very important and useful in multivariate exploratory data analytics. \n\nWe will use the `plot_ly()` function in the `plotly` package, which works with data frame objects.\n\nTo create a surface plot, we use two vectors: *x* and *y* with length *m* and *n* respectively. We also need a matrix: *z* of size $m\\times n$. This *z* matrix is created from matrix multiplication between *x* and *y*. \n\nTo plot the 2D Kernel Density estimation plot we will use the eruptions data from the \"Old Faithful\" geyser in Yellowstone National Park, Wyoming stored under `geyser`. Also, `kde2d()` function is needed for 2D kernel density estimation.\n\n\nHere `z=t(x)%*%y`. Then we apply `plot_ly` to the list `kd` using the `with()` function.\n\n\n![](https://wiki.socr.umich.edu/images/1/18/DSPA_Figs_2d_kernel_visual.png)\n\nNote we used the option `\"surface\"`.\n\nFor 3D surfaces, we have a built-in dataset in R called `volcano`. It records the volcano height at location x, y (longitude, latitude). Because *z* is always made from *x* and *y*, we can simply specify *z* to get the complete surface plot.\n\n![](https://wiki.socr.umich.edu/images/c/c4/DSPA_Figs_3dsurface_visual.png)\n\n### Multiple 2D image surface plots\n\n\n![](http://wiki.stat.ucla.edu/socr/uploads/f/f6/DSPA_Figs_2d_kernel_ImageVisual.png.png)\n\n### 3D and 4D Visualizations\n\nMany datasets have intrinsic multi-dimensional characteristics. For instance, the human body is a 3D solid of matter (3 spatial dimensions can be used to describe the position of every component, e.g., [sMRI volume](https://en.wikipedia.org/wiki/Magnetic_resonance_imaging)) that changes over time (the fourth dimension, e.g., [fMRI hypervolumes](https://en.wikipedia.org/wiki/Functional_magnetic_resonance_imaging)).\n\nThe [SOCR BrainViewer](https://socr.umich.edu/HTML5/BrainViewer/) shows how to use a web-browser to visualize 2D cross-sections of 3D volumes, display volume-rendering, and show 1D (e.g., 1-manifold curves embedded in 3D) and 2D (e.g., surfaces, shapes) models jointly into the same 3D scene.\n\nWe will now illustrate an example of 3D/4D visualization in `R` using the packages [brainR](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4911196/) and [rgl](https://cran.r-project.org/web/packages/rgl). This code is included as it runs well in interactive `R` sessions. However, it is suppressed during HTML knitting (`eval=FALSE`), as `rgl` causes some browser-OS combinations to fail while loading the resulting HTML file.\n\n\nBelow we provide some additional 3D/4D PET, sMRI, and fMRI volumes in [*.nii.gz format](https://nifti.nimh.nih.gov/nifti-1/data):\n\n - [sMRI](https://socr.umich.edu/HTML5/BrainViewer/data/ABIDE_MRI_MPRAGE_peds_defaced.nii.gz) (3D real-valued structural MRI volume)\n - [fMRI](https://socr.umich.edu/HTML5/BrainViewer/data/fMRI_FilteredData_4D.nii.gz) (4D real-valued functional MRI hyper-volume)\n - [PET](https://socr.umich.edu/HTML5/BrainViewer/data/PET_FDG_3D_vol.nii.gz) (3D perfusion Positron Emission Tomography volume).\n\nFor 4D fMRI time-series, we can load the hypervolumes similarly and then display some lower dimensional projections.\n\n\n[Chapter 12](https://socr.umich.edu/DSPA2/DSPA2_notes/12_LongitudinalDataAnalysis.html) provides more details about longitudinal and time-series data analysis.\n\nFinally, [DSPA Appendix 3](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03_Geometric_Parametric_Surface_Viz.html) includes details about classification, representation, modeling, and visualization of parametric and implicit, open and closed manifolds.",
      "word_count": 3705
    },
    {
      "title": "Appendix",
      "content": "## Importing Data from SQL Databases\n\nReview [DSPA Appendix 5 for more details on DB access](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_5_SQL_DB_Queries.html). We can also import SQL databases into `R`. First, we need to install and load the RODBC (R Open Database Connectivity) package.  \n\n\nThen, we could open a connection to the SQL server database with Data Source Name (DSN), via Microsoft Access. More details are provided [here](https://technet.microsoft.com/en-us/library/cc879308%28v=sql.105%29.aspx) and [here](https://cran.r-project.org/web/packages/RODBC/vignettes/RODBC.pdf).\n\n## Additional `R` scripts\n\nThe code below was used to generate some of the graphs shown in this chapter.\n\n\n## Case-Study 11 - Traumatic Brain Injury (TBI)\n\nThe data is available in the [Canvas case-studies folder](https://umich.instructure.com/courses/38100/files/folder/Case_Studies).\n\n\nPreprocess the data and plot the clustering dendrogram.\n\n\nTo identify the number of cases for varying number of clusters\n\n\nInspect which *SubjectIDs* are in which clusters:\n\n\nLet's see which *Age* and which *Surgery* cohorts fall within each of the derived cluster labels. Remember that all variables are scaled, so they represent standardized variable values!\n\n\nTo characterize the clusters, we can look at cluster summary statistics, like the median, of the variables that were used to perform the cluster analysis. These can be broken down by the groups identified by the cluster analysis. The aggregate function will compute stats (e.g., median) on many variables simultaneously. To look at the median values for the variables we've used in the cluster analysis, broken up by the cluster groups:\n\n\n## Some additional `ggplot` examples\n\n###  Housing Price Data\nThis example uses the [SOCR Home Price Index data of 19 major city in US from 1991-2009](https://wiki.socr.umich.edu/index.php/SOCR_Data_Dinov_091609_SnP_HomePriceIndex).\n\n\n### Modeling the home price index data\n\n\nLet's examine some popular `ggplot` graphs.\n\n\n### Map of the neighborhoods of Los Angeles (LA)\n\nThis example interrogates data of [110 LA neighborhoods](https://wiki.socr.umich.edu/index.php/SOCR_Data_LA_Neighborhoods_Data), which includes measures of education, income and population demographics.\n\nHere, we select the **Longitude** and *Latitude* as the axes, mark these 110 Neighborhoods according to their population, fill out those points according to the income of each area, and label each neighborhood.\n\n\nObserve that some areas (e.g., Beverly Hills) have disproportionately higher incomes and notice that the resulting plot resembles this plot\n\n![SOCR plot of the same data](https://wiki.socr.umich.edu/images/4/49/SOCR_Data_LA_County_Neighborhoods_Dinov_100109_Fig1.png). \n\n### Latin letter frequency in different languages\n\nThis example uses `ggplot` to interrogate the [SOCR Latin letter frequency data](https://wiki.socr.umich.edu/index.php/SOCR_LetterFrequencyData).\n\n\nYou can see [some additional Latin Letters plots here](http://wiki.stat.ucla.edu/socr/index.php/SOCR_LetterFrequencyData#Graphs).\n\nAlso review [Visualization Chapter Part 1](https://socr.umich.edu/DSPA2/DSPA2_notes/02_Visualization_Part1.html), which includes data handling, statistical measures of centrality and dispersion, understanding categorical and numeric data, uniform and normal distributions, missing data imputation, web page parsing, visualization of tabular HTML data, and cohort-rebalancing (for imbalanced groups).\n\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"https://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number \n\t\t\t\t<img class=\"statcounter\"\n\t\t\t\t\t\t\t\tsrc=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" \n\t\t\t\t\t\t\t\talt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"https://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"https://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 510
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "    self_contained: yes\n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# Here `freq=T` shows the frequency for each *x* value and `breaks` controls for the number of bars in our histogram.\n# mu <- 15; sd <- 3.7\n# set.seed(1234)\n# x<-rnorm(100, mean = mu, sd=sd)\n# hist(x, freq=F, breaks = 10)\n# lines(density(x), lwd=2, col=\"blue\") \n# t <- seq(mu-3*sd, mu+3*sd, by=0.01)\n# lines(t, dnorm(t,mu,sd), col=\"magenta\") # add the theoretical density line\n\nlibrary(plotly)\n\nN <- 10000\nmu <- 15; sd <- 3.7\nset.seed(1234)\nx <- rnorm(N, mean = mu, sd=sd)\nfit <- density(x)\nz<-seq(mu-4*sd, mu+4*sd, 0.1)  # points from -4 to 4 in 0.1 steps\nq<-seq(0.001, 0.999, 0.001)  # probability quantile values from 0.1% to 99.9% in 0.1% steps\n\nnormDensity <- dnorm(z, mean=15, sd= 3.7)\n\nplot_ly(x = x, type = \"histogram\", name = \"Data Histogram\", histnorm = \"probability\") %>% \n    add_trace(x = fit$x, y = fit$y, type = \"scatter\", mode = \"lines\", opacity=0.1,\n              fill = \"tozeroy\", yaxis = \"y2\", name = \"Density (rnorm(100, 15, 3.7))\") %>% \n    add_trace(x = z, y = normDensity, type = \"scatter\", mode = \"lines\", opacity=0.1,\n              fill = \"tozeroy\", yaxis = \"y2\", name = \"Normal(15, 3.7)\") %>% \n    layout(title='Data Histogram, Density Estimate & Theoretical Model Distribution', \n           yaxis2 = list(overlaying = \"y\", side = \"right\"),\n           legend = list(orientation = 'h'))",
      "line_count": 29
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# hist(x, freq=F, breaks = 10)\n# lines(density(x), lwd=2, col=\"blue\")\n# Here we used the option `freq=F` to make the *y* axis represent the \"relative frequency\", or \"density\". We can also use `plot(density(x))` to draw the density plot by itself.\n# plot(density(x))",
      "line_count": 4
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "library(rvest)\nwiki_url <- read_html(\"https://wiki.socr.umich.edu/index.php/SOCR_LetterFrequencyData\")\nhtml_nodes(wiki_url, \"#content\")\nletter<- html_table(html_nodes(wiki_url, \"table\")[[1]])\nsummary(letter)",
      "line_count": 5
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# The left hand side plot is the one without reference table and the right one has the table made by function `legend`.\n# par(mfrow=c(1, 2))\n# pie(letter$English[1:10], labels=letter$Letter[1:10], col=rainbow(10, start=0.1, end=0.8), clockwise=TRUE, main=\"First 10 Letters Pie Chart\")\n# pie(letter$English[1:10], labels=letter$Letter[1:10], col=rainbow(10, start=0.1, end=0.8), clockwise=TRUE, main=\"First 10 Letters Pie Chart\")\n# legend(\"topleft\", legend=letter$Letter[1:10], cex=1.3, bty=\"n\", pch=15, pt.cex=1.8, col=rainbow(10, start=0.1, end=0.8), ncol=1)\n\nplot_ly(letter, labels = ~Letter, values = ~English, type = 'pie', name=\"English\",\n        textposition = 'inside', textinfo = 'label+percent', showlegend = FALSE,\n        domain = list(row = 0, column = 0)) %>% \n  add_pie(labels = ~Letter, values = ~Spanish,  name = \"Spanish\", \n        textposition = 'inside', textinfo = 'label+percent', showlegend = FALSE,\n        domain = list(row = 0, column = 1)) %>% \n  add_pie(labels = ~Letter, values = ~Swedish,  name = \"Swedish\", \n        textposition = 'inside', textinfo = 'label+percent', showlegend = FALSE,\n        domain = list(row = 1, column = 0)) %>% \n  add_pie(labels = ~Letter, values = ~Polish,  name = \"Polish\", \n        textposition = 'inside', textinfo = 'label+percent', showlegend = FALSE,\n        domain = list(row = 1, column = 1)) %>% \n  add_annotations(x=0.01,  y=0.99,text = \"English\",showarrow = F, ax = 20, ay = -40) %>% \n  add_annotations(x=0.58,  y=0.99,text = \"Spanish\",showarrow = F, ax = 20, ay = -40) %>% \n  add_annotations(x=0.01,  y=0.01,text = \"Swedish\",showarrow = F, ax = 20, ay = -40) %>% \n  add_annotations(x=0.58,  y=0.01,text = \"Polish\",showarrow = F, ax = 20, ay = -40) %>%\n  layout(title = 'Pie Charts of English, Spanish, Swedish & Polish Letters',\n         grid=list(rows=2, columns=2),\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n\nplot_ly(letter, labels = ~Letter, values = ~German, type = 'pie', name=\"German\",\n        textposition = 'inside', textinfo = 'label+percent', showlegend = FALSE,\n        domain = list(row = 0, column = 0), hole = 0.5) %>% \n  add_pie(labels = ~Letter, values = ~Italian,  name = \"Italian\", \n        textposition = 'inside', textinfo = 'label+percent', showlegend = FALSE,\n        domain = list(row = 0, column = 1)) %>% \n  add_pie(labels = ~Letter, values = ~Dutch,  name = \"Dutch\", \n        textposition = 'inside', textinfo = 'label+percent', showlegend = FALSE,\n        domain = list(row = 1, column = 0)) %>% \n  add_pie(labels = ~Letter, values = ~Esperanto,  name = \"Esperanto\", \n        textposition = 'inside', textinfo = 'label+percent', showlegend = FALSE,\n        domain = list(row = 1, column = 1)) %>% \n  add_annotations(x=0.2,  y=0.78,text = \"German\",showarrow = F, ax = 20, ay = -40) %>% \n  add_annotations(x=0.8,  y=0.78,text = \"Italian\",showarrow = F, ax = 20, ay = -40) %>% \n  add_annotations(x=0.2,  y=0.21,text = \"Dutch\",showarrow = F, ax = 20, ay = -40) %>% \n  add_annotations(x=0.82,  y=0.21,text = \"Esperanto\",showarrow = F, ax = 20, ay = -40) %>%\n  layout(title = 'Pie Charts of German, Italian, Dutch & Esperanto Letters',\n         grid=list(rows=2, columns=2),\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))",
      "line_count": 47
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "AD_Data <- read.table(\"https://umich.instructure.com/files/330387/download?download_frd=1\", header=TRUE, row.names=1,  sep=\",\", dec=\".\")\t \nMCI_Data <- read.table(\"https://umich.instructure.com/files/330390/download?download_frd=1\", header=TRUE, row.names=1,  sep=\",\", dec=\".\")\t \t \nNC_Data <- read.table(\"https://umich.instructure.com/files/330391/download?download_frd=1\", header=TRUE, row.names=1,  sep=\",\", dec=\".\")\t \t ",
      "line_count": 3
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "library(graphics)\nlibrary(grDevices)\nlibrary(gplots)",
      "line_count": 3
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "AD_mat  <- as.matrix(AD_Data); class(AD_mat) <- \"numeric\"\nMCI_mat  <- as.matrix(MCI_Data); class(MCI_mat) <- \"numeric\"\nNC_mat  <- as.matrix(NC_Data); class(NC_mat) <- \"numeric\"",
      "line_count": 3
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "rcAD <- rainbow(nrow(AD_mat), start = 0, end = 1.0); ccAD<-rainbow(ncol(AD_mat), start = 0, end = 1.0)\nrcMCI <- rainbow(nrow(MCI_mat), start = 0, end=1.0); ccMCI<-rainbow(ncol(MCI_mat), start=0, end=1.0)\nrcNC <- rainbow(nrow(NC_mat), start = 0, end = 1.0); ccNC<-rainbow(ncol(NC_mat), start = 0, end = 1.0)",
      "line_count": 3
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# hvAD <- heatmap(AD_mat, col = cm.colors(256), scale = \"column\", RowSideColors = rcAD, ColSideColors = ccAD, margins = c(2, 2), main=\"AD Cohort\")\n# hvMCI <- heatmap(MCI_mat, col = cm.colors(256), scale = \"column\", RowSideColors = rcMCI, ColSideColors = ccMCI, margins = c(2, 2), main=\"MCI Cohort\")\n# hvNC <- heatmap(NC_mat, col = cm.colors(256), scale = \"column\", RowSideColors = rcNC, ColSideColors = ccNC, margins = c(2, 2), main=\"NC Cohort\")\n\n# if (!require(\"devtools\")) install.packages(\"devtools\")\n# devtools::install_github(\"talgalili/d3heatmap\")\n\n# library(d3heatmap)\n# d3heatmap(AD_mat, dendrogram = 'both', key = TRUE, col = 'Blues', scale = 'column', key.title = \"Legend\",\n#           print.values = T, notecol = 'white') %>% \n#     hmAxis(\"x\", title = \"Imaging Phenotype\", location = 'bottom') %>% \n#     hmAxis(\"y\", title = \"Genotype\", location = 'left') %>% \n#     hmCells(font.size = 9, color = 'blue') %>% \n#     hmLegend(show = T, title = \"AD Cohort\", location = \"tl\")\n\nplot_ly(x =~colnames(AD_mat), y = ~rownames(AD_mat), z = ~AD_mat, type = \"heatmap\") %>%\n  layout(title=\"AD Neuroimaging-Genomic Associations (p-values)\", \n         xaxis=list(title=\"ROI Imaging Biomarkers\"), yaxis=list(title=\"SNPs\"))\n\n# d3heatmap(MCI_mat, dendrogram = 'both', key = TRUE, col = 'Blues', scale = 'column', key.title = \"Legend\",\n#           print.values = T, notecol = 'white') %>% \n#     hmAxis(\"x\", title = \"Imaging Phenotype\", location = 'bottom') %>% \n#     hmAxis(\"y\", title = \"Genotype\", location = 'left') %>% \n#     hmCells(font.size = 9, color = 'blue') %>% \n#     hmLegend(show = T, title = \"MCI Cohort\", location = \"tl\")\n\nplot_ly(x =~colnames(MCI_mat), y = ~rownames(MCI_mat), z = ~MCI_mat, type = \"heatmap\") %>%\n  layout(title=\"MCI Neuroimaging-Genomic Associations (p-values)\", \n         xaxis=list(title=\"ROI Imaging Biomarkers\"), yaxis=list(title=\"SNPs\"))\n\n# d3heatmap(NC_mat, dendrogram = 'both', key = TRUE, col = 'Blues', scale = 'column', key.title = \"Legend\",\n#           print.values = T, notecol = 'white') %>% \n#     hmAxis(\"x\", title = \"Imaging Phenotype\", location = 'bottom') %>% \n#     hmAxis(\"y\", title = \"Genotype\", location = 'left') %>% \n#     hmCells(font.size = 9, color = 'blue') %>% \n#     hmLegend(show = T, title = \"Normal Cohort\", location = \"tl\")\n\nplot_ly(x =~colnames(NC_mat), y = ~rownames(NC_mat), z = ~NC_mat, type = \"heatmap\") %>%\n  layout(title=\"(Normal) HC Neuroimaging-Genomic Associations (p-values)\", \n         xaxis=list(title=\"ROI Imaging Biomarkers\"), yaxis=list(title=\"SNPs\"))",
      "line_count": 40
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "N <- 50\nind <- c(1:N)\nx<-runif(N)\ny<-runif(N)\nz<-runif(N)\nhoverText <- paste0(\"Point \", ind, \": (\", round(x, 3), \",\", round(y, 3), \")\")\n# plot(x, y, main=\"Scatter Plot\")\nplot_ly(x=~x[1:20], y=~y[1:20], type=\"scatter\",  size=2, name=ind[1:20], \n        color=~z[1:20],  mode=\"markers\", text = hoverText[1:20]) %>% \n    layout(title=\"Random Scatterplot\", xaxis=list(title=\"X\"), yaxis=list(title=\"Y\")) %>%\n    hide_colorbar()\n\n# `qplot()` is another way to plot fancy scatter plots. We can manage the colors and sizes of dots. The input type for `qplot()` is a data frame. In the following example, larger *x* will have larger dot sizes. We also grouped the data as 10 points per group. \n# \n# library(ggplot2)\n# cat <- rep(c(\"A\", \"B\", \"C\", \"D\", \"E\"), 10)  \n# plot.1 <- qplot(x, y, geom=\"point\", size=5*x, color=cat, main=\"GGplot with Relative Dot Size and Color\")\n# print(plot.1)",
      "line_count": 18
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# The input type for `pairs()` function is a matrix or data frame.\n# pairs(data.frame(x, y, z))\n\nN=1000\nw<-rnorm(N)\nu<-rpois(N, lambda = 1.7)\n# generate some random categorical labels for all N observations\nclass <- sample( LETTERS[1:3], N, replace=TRUE, prob=c(0.2, 0.5, 0.3))\ndf <- as.data.frame(cbind(x=x,y=y,z=z,w=w,u=u, class=class))\n\npl_colorscale=list(c(0.0, '#19d3f3'), c(0.333, '#19d3f3'), c(0.333, '#e763fa'), c(0.666, '#e763fa'),\n                   c(0.666, '#636efa'), c(1, '#636efa'))\n\naxis = list(showline=FALSE, zeroline=FALSE, gridcolor='#ffff', ticklen=4)\n\nplot_ly(df) %>%\n    add_trace(type = 'splom', dimensions = list( list(label='X', values=~x), list(label='Y', values=~y),\n            list(label='Z', values=~z), list(label='w', values=~w), list(label='U', values=~u)),\n        text=~class,\n        marker = list(color = as.integer(df$class), colorscale = pl_colorscale,\n            size = 7, line = list(width = 1, color = 'rgb(230,230,230)')\n        )\n    ) %>%\n    layout(\n        title= 'Random Data Pairs Plot', hovermode='closest', dragmode= 'select',\n        plot_bgcolor='rgba(240,240,240, 0.95)',\n        xaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor='#ffff', ticklen=4),\n        yaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor='#ffff', ticklen=4),\n        xaxis2=axis, xaxis3=axis, xaxis4=axis,yaxis2=axis, yaxis3=axis, yaxis4=axis)",
      "line_count": 29
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "data1 <- read.table('https://umich.instructure.com/files/399128/download?download_frd=1', header=T)\t\nhead(data1)\nattach(data1)",
      "line_count": 3
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# plot(data1[, 9], data1[, 10], pch=20, col=\"red\", main=\"qual vs supp\")\n# pairs(data1[, 5:10])\n\nplot_ly(data1, x=~qual, y=~supp, type=\"scatter\",  size=2, name=STFIPS, \n        color=~num,  mode=\"markers\", text = STFIPS) %>% \n    layout(title=\"2010 National Mental Health Services Survey: Support Services vs. Quality Indicators Scatterplot\",\n           xaxis=list(title=\"Support Services\"), yaxis=list(title=\"Quality Indicators\")) %>%\n    hide_colorbar()\n\nplot_ly(data1) %>%\n    add_trace(type = 'splom', dimensions = list( list(label='FacilityType', values=~FacilityType ), \n            list(label='Ownership', values=~Ownership), list(label='Focus', values=~Focus), \n            list(label='PostTraum', values=~PostTraum), list(label='num', values=~num)),\n        text=~STFIPS,\n        marker = list(color = as.integer(qual), colorscale = pl_colorscale,\n            size = 7, line = list(width = 1, color = qual)\n        )\n    ) %>%\n    layout(\n        title= '2010 National Mental Health Services Survey Pairs Plot (color=qual)', hovermode='closest', dragmode= 'select',\n        plot_bgcolor='rgba(240,240,240, 0.95)',\n        xaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor='#ffff', ticklen=4),\n        yaxis=list(domain=NULL, showline=F, zeroline=F, gridcolor='#ffff', ticklen=4),\n        xaxis2=axis, xaxis3=axis, xaxis4=axis,yaxis2=axis, yaxis3=axis, yaxis4=axis)",
      "line_count": 24
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# plot.2 <- qplot(qual, supp, data = data1, geom = c(\"point\", \"smooth\"))\n# print(plot.2)\n\n# extract only the complete cases\nlibrary(dplyr)\ndf1 <- data1 %>% filter_at(vars(qual,supp), all_vars(!is.na(.)))\n\nll.smooth = loess(df1$supp ~ df1$qual, span=0.7)\nll.pred = predict(ll.smooth, se = TRUE)\nll.df = data.frame(x=ll.smooth$x, fit=ll.pred$fit, lb=ll.pred$fit-(1.96*ll.pred$se),\n                   ub=ll.pred$fit+(1.96*ll.pred$se))\nll.df = ll.df[order(ll.df$df1.qual),]\n\nplot_ly(x=df1$qual, y=df1$supp, type=\"scatter\", mode=\"markers\", name=\"Data\") %>%\n  add_lines(x=df1$qual, y=ll.pred$fit, name=\"Mean\", line=list(color=\"gray\", width=4)) %>%\n  add_ribbons(x=ll.df$df1.qual, ymin=ll.df$lb, ymax=ll.df$ub, name=\"95% CI\", \n              line=list(opacity=0.4, width=1, color=\"lightgray\")) %>%\n  layout(title = \"LOESS Model (Supp ~ Qual) with Confidence Band\",\n         xaxis=list(title=\"Quality Indicator\"), yaxis=list(title=\"Supporting Services\"))",
      "line_count": 19
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# library(\"xml2\"); library(\"rvest\") \nwiki_url <- read_html(\"https://wiki.socr.umich.edu/index.php/SOCR_Data_Dinov_021708_Earthquakes\")\nhtml_nodes(wiki_url, \"#content\")\nearthquake <- html_table(html_nodes(wiki_url, \"table\")[[2]])\n# plot6.1<-ggplot(earthquake, aes(Depth, Latitude, group=Magt, color=Magt))+geom_point()\n# plot6.2<-ggplot(earthquake, aes(Depth, Latitude, group=Magt, color=Magt))+geom_point(position = position_jitter(w = 0.3, h = 0.3), alpha=0.5)\n# print(plot6.1)\n# print(plot6.2)\n# Note that with option `alpha=0.5` the \"crowded\" places are darker than the places with only one data point. \n# Sometimes, we need to add text to these points, i.e., add label in `aes` or add `geom_text`. It looks messy. \n# ggplot(earthquake, aes(Depth, Latitude, group=Magt, color=Magt,label=rownames(earthquake)))+\n#  geom_point(position = position_jitter(w = 0.3, h = 0.3), alpha=0.5)+geom_text()\n# Let's try to fix the overlap of points and labels. We need to add `check_overlap` in `geom_text` and adjust the positions of the text labels with respect to the points.\n# \n# ```{r warning=FALSE, message=FALSE, error=FALSE}\n# ggplot(earthquake, aes(Depth, Latitude, group=Magt, color=Magt,label=rownames(earthquake)))+\n#   geom_point(position = position_jitter(w = 0.3, h = 0.3), alpha=0.5)+\n#   geom_text(check_overlap = T,vjust = 0, nudge_y = 0.5, size = 2,angle = 45)\n# \n# # Or you can simply use the text to denote the positions of points.\n# ggplot(earthquake, aes(Depth, Latitude, group=Magt, color=Magt,label=rownames(earthquake)))+\n#   geom_text(check_overlap = T,vjust = 0, nudge_y = 0, size = 3,angle = 45)\n# # Warning: check_overlap will not show those overlapped points. Thus, if you need an analysis at the level of every instance, do not use it.\n\nglyphication <- function (name) {\n  glyph= vector()\n  for (i in 1:length(name)){\n    glyph[i]=\"triangle-up\"\n    if (name[i]==\"Md\") { glyph[i]=\"diamond-open\" }\n    else if (name[i]==\"ML\") { glyph[i]=\"circle-open\" }\n    else if (name[i]==\"Mw\") { glyph[i]=\"square-open\" }\n    else if (name[i]==\"Mx\") { glyph[i]=\"x-open\" }\n  }\n  return(glyph)\n}\nearthquake$glyph <- glyphication(earthquake$Magt)\n  \nplot_ly(earthquake) %>%\n  add_markers(x = ~Longitude, y = ~Latitude, type = \"scatter\",  color = ~Magt,\n        mode = \"markers\", marker = list(size = ~Depth, color = ~Magt, symbol = ~glyph,\n                                        line = list(color = ~Magt, width = 3))) %>% \n    layout(title=\"California Earthquakes (1969 - 2007)\")",
      "line_count": 42
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "plot_ly(ggplot2::diamonds, x = ~cut, y = ~price, type = 'bar', color = ~clarity, text= ~clarity)",
      "line_count": 1
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# bar <- barplot(m <- rowMeans(x) * 10, ylim=c(0, 10))\n# stdev <- sd(t(x[1:4, ]))\n# arrows(bar, m, bar, m + stdev, length=0.15, angle = 90)\n\nplot_ly(ggplot2::diamonds, y = ~log(price), color=~cut, type = \"box\") %>%\n  layout(title = \"Boxplot of Diamond (log) Price by Cut\",\n         xaxis=list(title=\"Diamond Cut\"))\n\nplot_ly(ggplot2::diamonds, x= ~clarity, y = ~log(price), color=~color, type = \"box\") %>%\n  layout(boxmode = \"group\", title = \"Grouped Boxplot of Diamond (log) Price by Clarity and Color\",\n         legend=list(title=list(text='<b> Diamond Color </b>')),\n         xaxis=list(title=\"Diamond Clarity\"))\n\n# for jitter plots, use    boxpoints = \"all\", jitter = 0.3, pointpos = -1.8, color=~cut)",
      "line_count": 14
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "data2 <- read.table('https://umich.instructure.com/files/399129/download?download_frd=1', header=T)\t\nattach(data2)\nhead(data2)",
      "line_count": 3
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "data2.sub <- data2[, c(-5, -6)] \ndata2<-data2[, -6]",
      "line_count": 2
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "data2.df <- as.data.frame(data2)\nBlacks <- data2[which(data2$race==\"black\"), ]\nOther <- data2[which(data2$race==\"other\"), ]\nHispanic <- data2[which(data2$race==\"hispanic\"), ]\nWhite <- data2[which(data2$race==\"white\"), ]\n\nB <- c(mean(Blacks$age), mean(Blacks$service))\nO <- c(mean(Other$age), mean(Other$service))\nH <- c(mean(Hispanic$age), mean(Hispanic$service))\nW <- c(mean(White$age), mean(White$service))\n\nx <- cbind(B, O, H, W)\nx",
      "line_count": 13
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# bar <- barplot(x, ylim=c(0, max(x)+2.0), beside=TRUE, \n# legend.text = c(\"age\", \"service\") ,  args.legend = list(x = \"right\"))\n# text(labels=round(as.vector(as.matrix(x)), 2), x=seq(1.4, 21, by=1.5), #y=as.vector(as.matrix(x[1:2, ]))+0.3)\n# \ty=11.5)\n# \n# m <- x; stdev <- sd(t(x))\n# arrows(bar, m, bar, m + stdev, length=0.15, angle = 90)\n# Here, we want the y margin to be little higher than the greatest value (`ylim=c(0, max(x)+2.0)`) because we need to leave space for value labels. Now we can easily notice that Hispanic trauma-exposed children are the youngest in terms of average age and they are less likely to utilize services like primary care, emergency room, outpatient therapy, outpatient psychiatrist, etc.\n\n# Diamonds Dataset example\n# data_mean <- ddply(diamonds, c(\"clarity\", \"cut\"), summarize, price = mean(price))\n# data_sd <- ddply(diamonds, c(\"clarity\", \"cut\"), summarize, price = sd(price))\n# data2 <- data.frame(data_mean, sd=data_sd$price)\n# \n# plot_ly(data = data2[which(data2$cut == 'Ideal'), ], x = ~clarity, y = ~price, type = 'bar',\n#                name = 'Cut=Ideal', error_y = ~list(array = sd, color = '#000000')) %>% \n#   add_trace(data = data2[which(data2$cut == 'Premium'), ], name = 'Cut=Premium')  %>% \n#   add_trace(data = data2[which(data2$cut == 'Very Good'), ], name = 'Cut=Very Good') %>% \n#   add_trace(data = data2[which(data2$cut == 'Good'), ], name = 'Cut=Good') %>% \n#   add_trace(data = data2[which(data2$cut == 'Fair'), ], name = 'Cut=Fair') %>%\n#   layout(title=\"Statistical Barplots (Diamonds Dataset)\",\n#          legend=list(title=list(text='<b> Diamond Cuts </b>')))\n \nlibrary(plyr)                        \ndata_mean <- ddply(data2, c(\"traumatype\", \"race\"), summarise, service = mean(service))\ndata_sd <- ddply(diamonds, c(\"traumatype\", \"race\"), summarise, service = sd(service))\ndata2 <- data.frame(data_mean, sd=data_sd$service)\n\nplot_ly(data = data2[which(data2$race == 'black'), ], x = ~traumatype, y = ~service, type = 'bar',\n               name = 'Black', error_y = ~list(array = sd, color = '#000000')) %>% \n  add_trace(data = data2[which(data2$race == 'hispanic'), ], name = 'Hispanic')  %>% \n  add_trace(data = data2[which(data2$race == 'other'), ], name = 'Other') %>% \n  add_trace(data = data2[which(data2$race == 'white'), ], name = 'White') %>%\n  layout(title=\"Statistical Barplots (Child Trauma Dataset)\",\n         legend=list(title=list(text='<b> Race </b>')))",
      "line_count": 35
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "library(ggplot2)\n#data2 <- read.table('https://umich.instructure.com/files/399129/download?download_frd=1', header=T)\t\nggplot(data2, aes(race, fill=race)) + geom_bar()+facet_grid(. ~ traumatype) ",
      "line_count": 3
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "data3<- read.table(\"https://umich.instructure.com/files/330385/download?download_frd=1\", sep=\",\", header = TRUE)\nhead(data3)",
      "line_count": 2
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "hc<-hclust(dist(data3), method='ave') \npar (mfrow=c(1, 1))\nplot(hc)",
      "line_count": 3
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "require(graphics)\nmem <- cutree(hc, k = 10)\n\n# mem; # to print the hierarchical tree labels for each case\n# which(mem==5)  # to identify which cases belong to class/cluster 5\n# To see the number of Subjects in which cluster:\n# table(cutree(hc, k=5))",
      "line_count": 7
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "cent <- NULL\nfor(k in 1:10){\n  \t\tcent <- rbind(cent, colMeans(data3[mem == k, , drop = FALSE]))\n}",
      "line_count": 4
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "hc1 <- hclust(dist(cent), method = \"ave\", members = table(mem))\nplot(hc1, hang = -1, main = \"Re-start from 10 clusters\")\n# via plot_ly()\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(ggdendro)\np <- ggdendrogram(hc, rotate = FALSE, size = 2)\nggplotly(p)",
      "line_count": 8
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# install.packages(\"corrplot\")\nlibrary(corrplot)\nNC_Associations_Data <- read.table(\"https://umich.instructure.com/files/330391/download?download_frd=1\", header=TRUE, row.names=1,  sep=\",\", dec=\".\")\t \nM <- cor(NC_Associations_Data)\nM[1:10, 1:10]",
      "line_count": 5
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "corrplot(M, method = \"circle\", title = \"circle\", tl.cex = 0.5, tl.col = 'black', mar=c(1, 1, 1, 1))\n# par specs c(bottom, left, top, right) which gives the margin size specified in inches\ncorrplot(M, method = \"square\", title = \"square\", tl.cex = 0.5, tl.col = 'black', mar=c(1, 1, 1, 1))\ncorrplot(M, method = \"ellipse\", title = \"ellipse\", tl.cex = 0.5, tl.col = 'black', mar=c(1, 1, 1, 1))\ncorrplot(M, method = \"pie\", title = \"pie\", tl.cex = 0.5, tl.col = 'black', mar=c(1, 1, 1, 1))\ncorrplot(M, type = \"upper\", tl.pos = \"td\",\n         method = \"circle\", tl.cex = 0.5, tl.col = 'black',\n         order = \"hclust\", diag = FALSE, mar=c(1, 1, 0, 1))\ncorrplot.mixed(M, number.cex = 0.4, tl.cex = 0.4)",
      "line_count": 9
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# library(\"xml2\"); library(\"rvest\") \nwiki_url <- read_html(\"https://wiki.socr.umich.edu/index.php/SOCR_Data_Dinov_021708_Earthquakes\")\nhtml_nodes(wiki_url, \"#content\")\nearthquake<- html_table(html_nodes(wiki_url, \"table\")[[2]])",
      "line_count": 4
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "library(ggplot2)\nplot4 <- ggplot(earthquake, aes(Longitude, Latitude, group=Magt, color=Magt))+\n  # Either draw lines\n  # geom_line()\n  # or, alternatively, we can draw glyphs/points\n  geom_point(data=earthquake, size=4, mapping=aes(x=Longitude, y=Latitude, shape=Magt))\nplot4  # or print(plot4)",
      "line_count": 7
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# library(\"ggplot2\")\nggplot(earthquake, aes(Latitude, group=Magt, newsize=2))+geom_density(aes(color=Magt), size = 2) +\n  theme(legend.position = 'right', \n      legend.text = element_text(color= 'black', size = 12, face = 'bold'),\n      legend.key = element_rect(size = 0.5, linetype='solid'),\n      legend.key.size = unit(1.5, 'lines'))\n# table(earthquake$Magt) # to see the distribution of magnitude types",
      "line_count": 7
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "set.seed(1234)\npoisson_sample <- rpois(1000, 1)\n# slightly offset the histogram bins to align with mass function\nhist_breakes <- c(-0.5, 0.5, 1.5, 2.5, 3.5, 6.5)\n# hist(poisson_sample, freq=F, breaks = hist_breakes, col=\"light blue\", lwd=2, ylim = c(0, 0.45))\n# lines(density(poisson_sample, kernel = \"gaussian\"), lwd=2, col=\"blue\") \n# t <- seq(0, 6, by=0.01)\n# lines(t, dpois(t,1), type=\"h\", col=\"magenta\", lwd=6) # add the theoretical density line\n# legend(3,0.3, legend=c(\"Sample histogram (n=1,000)\", \"Theoretical mass function\", \n#                             \"Gaussian kernel density estimate\"), \n#        bty = \"n\", box.lty=0, col=c(\"light blue\", \"magenta\", \"blue\"), lty=1, lwd=3)\n\nh <-hist(poisson_sample, breaks = hist_breakes, plot = F)\nt <- seq(0, 6, by=0.01)\nPois <- density(poisson_sample, kernel = \"gaussian\")\n\nplot_ly(x = h$mids, y = h$density, type = \"bar\", name=\"Sample Histogram\") %>%\n  add_lines(x=t, y=dpois(t,1), type=\"scatter\", mode=\"lines\", \n            name=\"(Theoretical) Poisson Mass Function\") %>%\n  add_lines(x=Pois$x, y=Pois$y, \n        type=\"scatter\", mode=\"lines\", \n        name=\"Gaussian kernel density estimate (sample)\") %>%\n  layout(bargap=0.1, title=\"Histogram (Simulated Poisson Data)\",\n         legend = list(orientation = 'h'))\n",
      "line_count": 25
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# You may choose which of the 2 CSV files (width or length) to work with\ncrystallography_Length_data <- read.csv(file = \"https://umich.instructure.com/files/11653615/download?download_frd=1\",\n                         header=TRUE)\n\ncrystallography_Width_data <- read.csv(file = \"https://umich.instructure.com/files/11653614/download?download_frd=1\",\n                         header=TRUE)\n\ncrystallography_data <- crystallography_Length_data\n# crystallography_data <- crystallography_Width_data\n\n# Get the feature names (IDs)\ncolNames <- colnames(crystallography_data); colNames",
      "line_count": 12
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# plot all histograms\nlibrary(tidyr)\n# library(ggplot2)\n# # or `library(tidyverse)`\n# \n# crystallography_data %>% gather() %>% head()\n# #     key   value\n# #1 AC1338  70.547\n# #2 AC1338  40.448\n# #3 AC1338  47.212\n# #4 AC1338  91.468\n# #5 AC1338  79.088\n# #6 AC1338 132.319\n# #...\n# crystallography_data %>% gather() %>% tail()\n# #      key  value\n# #5872 Rec 68.479\n# #5873 Rec 41.047\n# #5874 Rec 47.546\n# #5875 Rec 98.558\n# #5876 Rec 52.956\n# #5877 Rec 82.470\n# \n# ggplot(gather(crystallography_data), aes(value)) + \n#     geom_histogram(bins = 20) + \n#     facet_wrap(~key, scales = 'free_x')\n\n\ncrystalCompleteData <- crystallography_data[complete.cases(crystallography_data), ]\n\ndf_crystal <- apply(crystalCompleteData,  2,  density, kernel=\"gaussian\", bw=15)\n\ndf <- data.frame(x = unlist(lapply(df_crystal, \"[[\", \"x\")),\n                 y = unlist(lapply(df_crystal, \"[[\", \"y\")),\n                 sample = rep(names(df_crystal), each = length(df_crystal[[1]]$x)))\n\nplot_ly(df, x = ~x, y = ~y, color = ~sample, type = \"scatter\", mode = \"lines\") %>% \n    layout(title='Crystallography Sample Densities', \n           legend=list(title=list(text='<b> Samples </b>')), \n           xaxis=list(title='X'), yaxis=list(title='Density'))",
      "line_count": 40
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# install.packages(\"fitdistrplus\")\nlibrary(fitdistrplus)\ncol_num <- dim(crystallography_data)[2]; col_num\n\n# Store the Weibull, Gamma, and Log-Normal Distribution models for the 9 features\nfit_W <- vector(mode = \"list\", length = col_num)\nfit_G <- vector(mode = \"list\", length = col_num)\nfit_LN <- vector(mode = \"list\", length = col_num)\n  \nfor(i in 1:col_num) {\n  data_no_NA <- crystallography_data[complete.cases(crystallography_data[, i]), i]\n  length(data_no_NA)\n  fit_W[[i]]  <- fitdist(data_no_NA, \"weibull\"); summary(fit_W[i])\n  fit_G[[i]]  <- fitdist(data_no_NA, \"gamma\"); summary(fit_G[i])\n  fit_LN[[i]] <- fitdist(data_no_NA, \"lnorm\"); summary(fit_LN[i])\n}\n\n# extract the model parameters\nW_mod_p1_name = array(dim=c(col_num,2)); dim(W_mod_p1_name)  # param name\nW_mod_p1_val = array(dim=c(col_num,2)); dim(W_mod_p1_val)    # parameter-estimate value\nG_mod_p1_name = array(dim=c(col_num,2)); dim(G_mod_p1_name)  # param name\nG_mod_p1_val = array(dim=c(col_num,2)); dim(G_mod_p1_val)    # parameter-estimate value\nLN_mod_p1_name = array(dim=c(col_num,2)); dim(LN_mod_p1_name)  # param name\nLN_mod_p1_val = array(dim=c(col_num,2)); dim(LN_mod_p1_val)    # parameter-estimate value\n\n# Compute the mean (m) and standard deviation (sd) for each model distribution\nW_mod_mean = array(dim=c(col_num,1)); length(W_mod_mean)  # Weibull mean or mode\nW_mod_sd = array(dim=c(col_num,1)); length(W_mod_sd)      # Weibull SD\nG_mod_mean = array(dim=c(col_num,1)); length(G_mod_mean)  # Gamma mean or mode\nG_mod_sd = array(dim=c(col_num,1)); length(G_mod_sd)      # Gamma SD\nLN_mod_mean = array(dim=c(col_num,1)); length(LN_mod_mean)  # Log-normal mean or mode\nLN_mod_sd = array(dim=c(col_num,1)); length(LN_mod_sd)      # Log-normal SD\n\nfor(i in 1:col_num) {\n  W_mod_p1_name[i, 1] <- names(fit_W[[i]]$estimate[1])  # Weibull \"shape\"\n  W_mod_p1_val[i, 1] <- fit_W[[i]]$estimate[[1]]\n  W_mod_p1_name[i, 2] <- names(fit_W[[i]]$estimate[2])  # Weibull \"scale\"\n  W_mod_p1_val[i, 2] <- fit_W[[i]]$estimate[[2]]\n  W_mod_mean[i] = W_mod_p1_val[i, 2] * gamma(1+1/W_mod_p1_val[i, 1])  # Weibull mean\n  W_mod_mean[i] = W_mod_p1_val[i, 2] * \n          ((W_mod_p1_val[i, 1]-1)/W_mod_p1_val[i, 1])^(1/W_mod_p1_val[i, 1])  # Weibull mode\n  W_mod_sd[i] = W_mod_p1_val[i, 2]*sqrt(gamma(1+2/W_mod_p1_val[i, 1])-\n                                        (gamma(1+1/W_mod_p1_val[i, 1]))^2)  # Weibull SD\n\n  G_mod_p1_name[i, 1] <- names(fit_G[[i]]$estimate[1])  # Gamma \"shape\"\n  G_mod_p1_val[i, 1] <- fit_G[[i]]$estimate[[1]]\n  G_mod_p1_name[i, 2] <- names(fit_G[[i]]$estimate[2])  # Gamma \"scale\"\n  G_mod_p1_val[i, 2] <- fit_G[[i]]$estimate[[2]]\n  G_mod_mean[i] = G_mod_p1_val[i, 1] / G_mod_p1_val[i, 2]  # Gamma mean\n  G_mod_mean[i] = (G_mod_p1_val[i, 1]-1) / G_mod_p1_val[i, 2]  # Gamma mode\n  G_mod_sd[i] = sqrt(G_mod_p1_val[i, 1]) / G_mod_p1_val[i, 2]  # Gamma SD\n  \n  LN_mod_p1_name[i, 1] <- names(fit_LN[[i]]$estimate[1])  # Log-normal \"shape\"\n  LN_mod_p1_val[i, 1] <- fit_LN[[i]]$estimate[[1]]\n  LN_mod_p1_name[i, 2] <- names(fit_LN[[i]]$estimate[2])  # Log-normal \"scale\"\n  LN_mod_p1_val[i, 2] <- fit_LN[[i]]$estimate[[2]]\n  LN_mod_mean[i] = exp(LN_mod_p1_val[i, 1]+ (LN_mod_p1_val[i, 2])^2/2)  # Log-normal mean\n  LN_mod_mean[i] = exp(LN_mod_p1_val[i, 1] - LN_mod_p1_val[i, 2]^2)  # Log-normal mean\n  LN_mod_sd[i] = sqrt((exp(LN_mod_p1_val[i, 2]^2)-1)*\n                  exp(2*LN_mod_p1_val[i, 1]+LN_mod_p1_val[i, 2]^2))  # Log-normal SD\n}\n\n# Check results, just for one model\nstr(fit_W[[1]])",
      "line_count": 64
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "windows(width=20, height=8)\npar(mfrow=c(3,3))\n\nfor(i in 1:col_num) {\n  # W_mod_p1_name[i] <- names(fit_W[[i]]$estimate[1])\n  # W_mod_p1_val[i] <- fit_W[[1]]$estimate[[1]]\n  plot.legend <- c(sprintf(\"Weibull(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           W_mod_p1_name[i, 1], format(W_mod_p1_val[i, 1], digits=2),\n                           W_mod_p1_name[i, 2], format(W_mod_p1_val[i, 2], digits=2),\n                           format(W_mod_mean[i], digits=2),\n                           format(W_mod_sd[i], digits=2)), \n                   sprintf(\"Gamma(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           G_mod_p1_name[i, 1], format(G_mod_p1_val[i, 1], digits=2),\n                           G_mod_p1_name[i, 2], format(G_mod_p1_val[i, 2], digits=2),\n                           format(G_mod_mean[i], digits=2),\n                           format(G_mod_sd[i], digits=2)), \n                   sprintf(\"Log-normal(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           LN_mod_p1_name[i, 1], format(LN_mod_p1_val[i, 1], digits=2),\n                           LN_mod_p1_name[i, 2], format(LN_mod_p1_val[i, 2], digits=2),\n                           format(LN_mod_mean[i], digits=2),\n                           format(LN_mod_sd[i], digits=2)))\n  denscomp(list(fit_W[[i]], fit_G[[i]], fit_LN[[i]]), legendtext = plot.legend, \n           xlegend = \"topright\", ylegend =\"right\",\n           main=sprintf(\"Width: Feature: %s: Histogram & Model Densities\", colnames(crystallography_data)[i]))\n  abline(v = format(W_mod_mean[i], digits=2), col = \"red\", lty=1)\n  abline(v = format(G_mod_mean[i], digits=2), col = \"green\", lty=2)\n  abline(v = format(LN_mod_mean[i], digits=2), col = \"blue\", lty=3)\n  # cdfcomp (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)\n  # qqcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)\n  # ppcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)\n}\n\n# Plot histograms and CDF (cumulative distribution function) models\nwindows(width=20, height=12)\npar(mfrow=c(3,3))\nfor(i in 1:col_num) {\n  plot.legend <- c(sprintf(\"Weibull(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           W_mod_p1_name[i, 1], format(W_mod_p1_val[i, 1], digits=2),\n                           W_mod_p1_name[i, 2], format(W_mod_p1_val[i, 2], digits=2),\n                           format(W_mod_mean[i], digits=2),\n                           format(W_mod_sd[i], digits=2)), \n                   sprintf(\"Gamma(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           G_mod_p1_name[i, 1], format(G_mod_p1_val[i, 1], digits=2),\n                           G_mod_p1_name[i, 2], format(G_mod_p1_val[i, 2], digits=2),\n                           format(G_mod_mean[i], digits=2),\n                           format(G_mod_sd[i], digits=2)), \n                   sprintf(\"Log-normal(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           LN_mod_p1_name[i, 1], format(LN_mod_p1_val[i, 1], digits=2),\n                           LN_mod_p1_name[i, 2], format(LN_mod_p1_val[i, 2], digits=2),\n                           format(LN_mod_mean[i], digits=2),\n                           format(LN_mod_sd[i], digits=2)))\n  cdfcomp(list(fit_W[[i]], fit_G[[i]], fit_LN[[i]]), legendtext = plot.legend, \n           xlegend = \"bottomright\", ylegend =\"right\",\n           main=sprintf(\"Width: Feature: %s: Aggregate Hist & Model CDFs\", colnames(crystallography_data)[i]))\n}",
      "line_count": 55
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "pl_list <- list()\n\nfor(i in 1:col_num) {\n  # W_mod_p1_name[i] <- names(fit_W[[i]]$estimate[1])\n  # W_mod_p1_val[i] <- fit_W[[1]]$estimate[[1]]\n  plot.legend <- c(sprintf(\"Weibull(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           W_mod_p1_name[i, 1], format(W_mod_p1_val[i, 1], digits=2),\n                           W_mod_p1_name[i, 2], format(W_mod_p1_val[i, 2], digits=2),\n                           format(W_mod_mean[i], digits=2),\n                           format(W_mod_sd[i], digits=2)), \n                   sprintf(\"Gamma(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           G_mod_p1_name[i, 1], format(G_mod_p1_val[i, 1], digits=2),\n                           G_mod_p1_name[i, 2], format(G_mod_p1_val[i, 2], digits=2),\n                           format(G_mod_mean[i], digits=2),\n                           format(G_mod_sd[i], digits=2)), \n                   sprintf(\"Log-normal(%s=%s,%s=%s) (m=%s,sd=%s)\", \n                           LN_mod_p1_name[i, 1], format(LN_mod_p1_val[i, 1], digits=2),\n                           LN_mod_p1_name[i, 2], format(LN_mod_p1_val[i, 2], digits=2),\n                           format(LN_mod_mean[i], digits=2),\n                           format(LN_mod_sd[i], digits=2)))\n  # x <- dweibull(10000, shape=fit_W[[i]]$estimate[1], scale =fit_W[[i]]$estimate[2])\n  # fit <- density(x)\n  z <- seq(from=min(fit_W[[i]]$data), max(fit_W[[i]]$data), 0.1)  # points from -4 to 4 in 0.1 steps\n  weibullDens   <- dweibull(z, shape=fit_W[[i]]$estimate[1], scale =fit_W[[i]]$estimate[2])\n  gammaDens     <- dgamma(z, shape=fit_G[[i]]$estimate[1], rate =fit_G[[i]]$estimate[2])\n  logNormalDens <- dlnorm(z, meanlog=fit_LN[[i]]$estimate[1], sdlog =fit_LN[[i]]$estimate[2])\n  \n  # z<-seq(from=min(fit_W[[i]]$data), to=max(fit_W[[i]]$data), 0.1)  # Range points in 0.1 steps\n\n  pl_list[[i]] <- \n    plot_ly(x=~fit_W[[i]]$data, name=~colnames(crystallography_data)[i], showlegend = FALSE,\n            marker = list(color = \"transparent\", line = list(color = \"darkgray\", width = 2)),\n            type=\"histogram\", mode=\"markers\", opacity=0.9, nbinsx=20, histnorm=\"probability\") %>%\n      # add models\n      add_trace(x=z, y=15*weibullDens, type=\"scatter\", mode=\"lines\", opacity=0.5, name=plot.legend[1],\n                line = list(color = \"red\", width = 2)) %>%  \n      add_trace(x=z, y=15*gammaDens, type=\"scatter\", mode=\"lines\", opacity=0.5, name=plot.legend[2],\n                line = list(color = \"green\", width = 2)) %>%  \n      add_trace(x=z, y=15*logNormalDens, type=\"scatter\", mode=\"lines\", opacity=0.5, name=plot.legend[3],\n                line = list(color = \"blue\", width = 2)) %>%\n      # add vertical mean lines\n      add_segments(x=W_mod_mean[i], y=0, xend=W_mod_mean[i], yend=0.2, name=\"Weibull mean\", color=\"red\") %>%\n      add_segments(x=G_mod_mean[i], y=0, xend=G_mod_mean[i], yend=0.2, name=\"Gamma mean\", color=\"green\") %>%\n      add_segments(x=LN_mod_mean[i], y=0, xend=LN_mod_mean[i], yend=0.2, name=\"LogNormal mean\", color=\"blue\") %>%\n      layout(title = sprintf(\"Width: Feature: %s: Histogram & Model Densities\", colnames(crystallography_data)[i]),\n              xaxis = list(title = colnames(crystallography_data)[i]), yaxis = list(title = \"Density\"),\n             bargap=0.1) %>% hide_colorbar()\n}\n\npl_list %>% plotly::subplot(nrows = 3) %>% layout(title=\"Mixture Modeling of Crystallography Data (Interactive Plot)\")  ",
      "line_count": 50
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# Save the summary outputs (mode & SD) across 9 samples, 3 models and 2 measures into a dataframe\n\ndf_matrix = array(dim=c(col_num,3*2*2)); dim(df_matrix) \n\nfor(i in 1:col_num) {\n  data1 <- crystallography_data[complete.cases(crystallography_data[, i]), i]\n  \n  df_matrix[i, 1] = format(W_mod_mean[i], digits=2)  # Weibull mode\n  df_matrix[i, 2] = format(W_mod_sd[i], digits=2)    # Weibull SD\n  ks_W <- ks.test(data1, \"pweibull\", scale=W_mod_p1_val[i, 2], shape=W_mod_p1_val[i, 1])\n  df_matrix[i, 3] = format(ks_W$statistic[[1]], digits=4)  # KS-test-stat Weibull\n  df_matrix[i, 4] = format(ks_W$p.value, digits=5)    # KS-test-p-value Weibull\n  \n  df_matrix[i, 5] = format(G_mod_mean[i], digits=2)  # Gamma mode\n  df_matrix[i, 6] = format(G_mod_sd[i], digits=2)    # Gamma SD\n  ks_G <- ks.test(data1, \"pgamma\", rate=G_mod_p1_val[i, 2], shape=G_mod_p1_val[i, 1])\n  df_matrix[i, 7] = format(ks_G$statistic[[1]], digits=4)  # KS-test-stat Gamma\n  df_matrix[i, 8] = format(ks_G$p.value, digits=5)    # KS-test-p-value Gamma\n  \n  df_matrix[i, 9] = format(LN_mod_mean[i], digits=2)  # Log-normal mode\n  df_matrix[i, 10] = format(LN_mod_sd[i], digits=2)    # Log-normal SD\n  ks_LN <- ks.test(data1, \"plnorm\", sdlog=LN_mod_p1_val[i, 2], meanlog=LN_mod_p1_val[i, 1])\n  df_matrix[i, 11] = format(ks_LN$statistic[[1]], digits=4)  # KS-test-stat Log-normal\n  df_matrix[i, 12] = format(ks_G$p.value, digits=5)    # KS-test-p-value Log-normal\n}\n\ndf_summary <- as.data.frame(df_matrix, row.names=colNames)\ncolnames(df_summary) <- c(\"Weibull_mode\", \"Weibull_sd\",\"Weibull_KS.test.stat\", \"Weibull_KS.p.val\",\n                  \"Gamma_mode\", \"Gamma_sd\",\"Gamma_KS.test.stat\", \"Gamma_KS.p.val\",\n                  \"Lognormal_mode\", \"Lognormal_sd\",\"Lognormal_KS.test.stat\", \"Lognormal_KS.p.val\")\ndf_summary\n\nlibrary(\"DT\")\ndatatable(t(df_summary))\n#write.csv(df_summary, file = \"/Desktop/SummaryResults_Width_Models.csv\", \n#          row.names=T, col.names=T)",
      "line_count": 36
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "sampleColNames <- c(\"AC1338\",\"AC1432\",\"AC1593\", \"AC1679\", \"AC1860\", \"AC1874\", \"AC1881\", \"AC1903\", \"Rec\")\nsampleMixtureParam <- c(3, 3, 3, 3, 3, 3, 3, 3, 3)\ndf_sampleMixtureParam <- data.frame(t(sampleMixtureParam))\ncolnames(df_sampleMixtureParam) <- sampleColNames; # df_sampleMixtureParam",
      "line_count": 4
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# crystallography_data <- read.csv(file = \"https://umich.instructure.com/files/13375767/download?download_frd=1\",\n#                          header=TRUE)\n# crystallography_data <- read.csv(file = \"https://umich.instructure.com/files/11653615/download?download_frd=1\",\n#                          header=TRUE)\n\n# install.packages(\"mixtools\")\nlibrary(mixtools)\n\ncol_num <- dim(crystallography_data)[2]; col_num\n\n# Fit mixture models\ncapture.output(\n  for(i in 1:col_num) {   # remove all non-numeric elements (if any)\n    # data_no_NA <- unlist(Filter(is.numeric, crystallography_data[complete.cases(crystallography_data[, i]), i]))\n    data_no_NA <- crystallography_data[complete.cases(crystallography_data[, i]), i]\n    length(data_no_NA)\n    fit_W[[i]]  <- weibullRMM_SEM(data_no_NA, k=df_sampleMixtureParam[1,i], verb=F)\n    # summary(fit_W[i])\n    fit_G[[i]]  <- gammamixEM(data_no_NA, k=df_sampleMixtureParam[1,i], verb=F)\n    # summary(fit_G[i])\n    fit_LN[[i]] <- normalmixEM(data_no_NA, k=df_sampleMixtureParam[1,i], verb=F)\n    # summary(fit_LN[i])\n  }, \n  file='NUL'\n)\n\n# plot(fit_LN[[1]], which=2)\n# lines(density(crystallography_data[complete.cases(crystallography_data[, 1]), 1]), lty=2, lwd=2)",
      "line_count": 28
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# Custom design of Gamma-Mixture Model plot\ngammaMM.plot <- function(mix.object, k = 2, main = \"\") {  # mix.object <- fit_G[[i]]\n  data_no_NA <- crystallography_data[complete.cases(crystallography_data[, i]), i]\n  d3 <- function(x) { # construct the mixture using the estimated parameters\n    mix.object$lambda[1]*dgamma(x, shape=mix.object$gamma.pars[1,1], 1/mix.object$gamma.pars[2,1]) + \n      mix.object$lambda[2]*dgamma(x, shape=mix.object$gamma.pars[1,2], 1/mix.object$gamma.pars[2,2]) + \n      mix.object$lambda[3]*dgamma(x, shape=mix.object$gamma.pars[1,3], 1/mix.object$gamma.pars[2,3])\n  }\n\n  x <- seq(min(data_no_NA), max(data_no_NA), 0.001)\n  hist(data_no_NA, col=\"pink\", freq=F, breaks=10, main = main, xlab=\"Intensities\")\n  lines(x, d3(x), lwd=3, col=\"black\", xlim=c(4,23), ylim=c(0, 0.25))\n  mixColors <- colorRampPalette(c(\"blue\", \"red\"))(k)\n  \n  for (i in 1:k) {\n    d = function(x) { # construct each of the Gamma components using the estimated parameters\n      mix.object$lambda[i]*dgamma(x, shape=mix.object$gamma.pars[1, i], 1/mix.object$gamma.pars[2,i])\n    }\n    lines(x, d(x), lwd=3, col=mixColors[i])\n  }\n}\n\n# Custom design of Weibull-Mixture Model plot\nweibullMM.plot <- function(mix.object, k = 2, main = \"\") {  # mix.object <- fit_W[[i]]\n  data_no_NA <- crystallography_data[complete.cases(crystallography_data[, i]), i]\n  d3 <- function(x) { # construct the mixture using the estimated parameters\n    mix.object$lambda[1]*dweibull(x, shape=mix.object$shape[1], scale=mix.object$scale[1]) + \n      mix.object$lambda[2]*dweibull(x, shape=mix.object$shape[2], scale=mix.object$scale[2]) +\n      mix.object$lambda[3]*dweibull(x, shape=mix.object$shape[3], scale=mix.object$scale[3])\n  }\n\n  x <- seq(min(data_no_NA), max(data_no_NA), 0.001)\n  hist(data_no_NA, col=\"pink\", freq=F, breaks=15, main = main, xlab=\"Intensities\")\n  lines(x, d3(x), lwd=3, col=\"black\", xlim=c(4,23), ylim=c(0, 0.25))\n  mixColors <- colorRampPalette(c(\"blue\", \"red\"))(k)\n  \n  for (i in 1:k) {\n    d = function(x) { # construct each of the Weibull components using the estimated parameters\n      mix.object$lambda[i]*dweibull(x, shape=mix.object$shape[i], scale=mix.object$scale[i])\n    }\n    lines(x, d(x), lwd=3, col=mixColors[i])\n  }\n}\n\n# Custom design of Normal-Mixture Model plot\nnormalMM.plot <- function(mix.object, k = 2, main = \"\") {  # mix.object <- fit_LN[[i]]\n  data_no_NA <- crystallography_data[complete.cases(crystallography_data[, i]), i]\n  d3 <- function(x) { # construct the mixture using the estimated parameters\n    mix.object$lambda[1]*dnorm(x, mean=mix.object$mu[1], sd=mix.object$sigma[1]) + \n      mix.object$lambda[2]*dnorm(x, mean=mix.object$mu[2], sd=mix.object$sigma[2]) +\n      mix.object$lambda[3]*dnorm(x, mean=mix.object$mu[3], sd=mix.object$sigma[3])\n  }\n\n  x <- seq(min(data_no_NA), max(data_no_NA), 0.001)\n  hist(data_no_NA, col=\"pink\", freq=F, breaks=20, main = main, xlab=\"Intensities\", xlim = c(4,180), ylim = c(0.0, 0.02))\n  lines(x, d3(x), lwd=3, col=\"black\")\n  mixColors <- colorRampPalette(c(\"blue\", \"red\"))(k)\n  \n  for (i in 1:k) {\n    d = function(x) { # construct each of the Normal components using the estimated parameters\n      mix.object$lambda[i]*dnorm(x, mean=mix.object$mu[i], sd=mix.object$sigma[i])\n    }\n    lines(x, d(x), lwd=3, col=mixColors[i])\n  }\n}",
      "line_count": 65
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# Plot Mixture Models and Report model parameter estimates\n# for(i in 1:col_num) {  # uncomment this to plot all 9 samples\nfor(i in 1:2) {    # this only plots the first 2 samples to save space\n  weibullMM.plot(fit_W[[i]], df_sampleMixtureParam[1,i], \n               paste0(\"Mixture of \", df_sampleMixtureParam[1, sampleColNames[i]], \n                  \" Weibull Models of \", sampleColNames[i]))\n  #plot(fit_W[[i]], density=TRUE, whichplots = 2,\n  #   main2=paste0(\"Mixture of \", df_sampleMixtureParam[1, sampleColNames[i]], \n  #                \" Weibull Models of \", sampleColNames[i]), xlab2=\"Intensities\")\n  gammaMM.plot(fit_G[[i]], df_sampleMixtureParam[1,i], \n               paste0(\"Mixture of \", df_sampleMixtureParam[1, sampleColNames[i]], \n                  \" Gamma Models of \", sampleColNames[i]))\n  normalMM.plot(fit_LN[[i]], df_sampleMixtureParam[1,i], \n               paste0(\"Mixture of \", df_sampleMixtureParam[1, sampleColNames[i]], \n                  \" Normal Models of \", sampleColNames[i]))\n}",
      "line_count": 16
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# Generate the summary DF\ngetSummaryTable <- function (crystalSampleIndex) {\n  mat <- matrix(0, nrow = 3, ncol = 10)\n  \n  # Weibull estimates for all 3 model components \n  # For Weibull Dist mean and SD see: https://en.wikipedia.org/wiki/Weibull_distribution\n  mat[1,1] <- round(fit_W[[crystalSampleIndex]]$lambda[1],3) # lambda\n  mat[1,2] <- round(fit_W[[crystalSampleIndex]]$scale[1] * \n                      gamma(1+1/fit_W[[crystalSampleIndex]]$shape[1]),3)  # mean\n  mat[1,3] <- round(fit_W[[crystalSampleIndex]]$scale[1] *\n                      sqrt(gamma(1+2/fit_W[[crystalSampleIndex]]$shape[1])-\n                          (gamma(1+1/fit_W[[crystalSampleIndex]]$shape[1]))^2),3)  #  sd\n  \n  mat[1,4] <- round(fit_W[[crystalSampleIndex]]$lambda[2],3) # lambda\n  mat[1,5] <- round(fit_W[[crystalSampleIndex]]$scale[2] * \n                      gamma(1+1/fit_W[[crystalSampleIndex]]$shape[2]),3)  # mean\n  mat[1,6] <- round(fit_W[[crystalSampleIndex]]$scale[2] *\n                      sqrt(gamma(1+2/fit_W[[crystalSampleIndex]]$shape[2])-\n                          (gamma(1+1/fit_W[[crystalSampleIndex]]$shape[2]))^2),3)  #  sd\n  \n  mat[1,7]  <- round(fit_W[[crystalSampleIndex]]$lambda[3],3) # lambda\n  mat[1,8] <- round(fit_W[[crystalSampleIndex]]$scale[3] * \n                      gamma(1+1/fit_W[[crystalSampleIndex]]$shape[3]),3)  # mean\n  mat[1,9] <- round(fit_W[[crystalSampleIndex]]$scale[3] *\n                      sqrt(gamma(1+2/fit_W[[crystalSampleIndex]]$shape[3])-\n                          (gamma(1+1/fit_W[[crystalSampleIndex]]$shape[3]))^2),3)  #  sd\n  mat[1,10] <- round(fit_W[[crystalSampleIndex]]$loglik,3)    # Log-lik\n  \n  # Gamma estimates for all 3 model components \n  # For Gamma dist mean & SD see: https://en.wikipedia.org/wiki/Gamma_distribution\n  mat[2,1] <- round(fit_G[[crystalSampleIndex]]$lambda[1],3)        # lambda\n  mat[2,2] <- round(fit_G[[crystalSampleIndex]]$gamma.pars[1,1]*\n                      fit_G[[crystalSampleIndex]]$gamma.pars[2,1],3)  # mean\n  mat[2,3] <- round(sqrt(fit_G[[crystalSampleIndex]]$gamma.pars[1,1])*\n                      fit_G[[crystalSampleIndex]]$gamma.pars[2,1],3)  # SD\n  \n  mat[2,4] <- round(fit_G[[crystalSampleIndex]]$lambda[2],3)        # lambda\n  mat[2,5] <- round(fit_G[[crystalSampleIndex]]$gamma.pars[1,2]*\n                      fit_G[[crystalSampleIndex]]$gamma.pars[2,2],3)  # mean\n  mat[2,6] <- round(sqrt(fit_G[[crystalSampleIndex]]$gamma.pars[1,2])*\n                      fit_G[[crystalSampleIndex]]$gamma.pars[2,2],3)  # sd\n  \n  mat[2,7]  <- round(fit_G[[crystalSampleIndex]]$lambda[3],3)        # lambda\n  mat[2,8] <- round(fit_G[[crystalSampleIndex]]$gamma.pars[1,3]*\n                       fit_G[[crystalSampleIndex]]$gamma.pars[2,3],3)  # mean\n  mat[2,9] <- round(sqrt(fit_G[[crystalSampleIndex]]$gamma.pars[1,3])*\n                       fit_G[[crystalSampleIndex]]$gamma.pars[2,3],3)  # sd\n  mat[2,10] <- round(fit_G[[crystalSampleIndex]]$loglik,3)    # Log-lik\n  \n  # Normal estimates for all 3 model components \n  mat[3,1] <- round(fit_LN[[crystalSampleIndex]]$lambda[1],3)        # lambda\n  mat[3,2] <- round(fit_LN[[crystalSampleIndex]]$mu[1],3)  # shape\n  mat[3,3] <- round(fit_LN[[crystalSampleIndex]]$sigma[1],3)  # scale\n  \n  mat[3,4] <- round(fit_LN[[crystalSampleIndex]]$lambda[2],3)        # lambda\n  mat[3,5] <- round(fit_LN[[crystalSampleIndex]]$mu[2],3)  # shape\n  mat[3,6] <- round(fit_LN[[crystalSampleIndex]]$sigma[2],3)  # scale\n  \n  mat[3,7]  <- round(fit_LN[[crystalSampleIndex]]$lambda[3],3)        # lambda\n  mat[3,8] <- round(fit_LN[[crystalSampleIndex]]$mu[3],3)  # shape\n  mat[3,9] <- round(fit_LN[[crystalSampleIndex]]$sigma[3],3)  # scale\n  mat[3,10] <- round(fit_LN[[crystalSampleIndex]]$loglik,3)    # Log-lik\n  \n  return(as.data.frame(mat))\n}\n\n# render the summary DT tables\nlibrary(\"DT\")",
      "line_count": 68
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "df_summary <- getSummaryTable(1)\nrownames(df_summary) <- c(\"Weibull\", \"Gamma\", \"Normal\")\ncolnames(df_summary) <- c(\"MC 1 Weight\", \"MC 1 Mean\", \"MC 1 SD\", \n                            \"MC 2 Weight\", \"MC 2 Mean\", \"MC 2 SD\", \n                            \"MC 3 Weight\", \"MC 3 Mean\", \"MC 3 SD\", \"MixMod LogLik\")\ndatatable(df_summary, rownames = TRUE)",
      "line_count": 6
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "ddf_summary <- getSummaryTable(2)\nrownames(df_summary) <- c(\"Weibull\", \"Gamma\", \"Normal\")\ncolnames(df_summary) <- c(\"MC 1 Weight\", \"MC 1 Mean\", \"MC 1 SD\", \n                            \"MC 2 Weight\", \"MC 2 Mean\", \"MC 2 SD\", \n                            \"MC 3 Weight\", \"MC 3 Mean\", \"MC 3 SD\", \"MixMod LogLik\")\ndatatable(df_summary, rownames = TRUE)",
      "line_count": 6
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "kd <- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))\nkd$x[1:5]\nkd$y[1:5]\nkd$z[1:5, 1:5]",
      "line_count": 4
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "library(plotly)\nwith(kd, plot_ly(x=x, y=y, z=z, type=\"surface\"))",
      "line_count": 2
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "volcano[1:10, 1:10]\nplot_ly(z=volcano, type=\"surface\")",
      "line_count": 2
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "#install.packages(\"jpeg\") ## if necessary\nlibrary(jpeg)\n\n# Get an image file downloaded (default: MRI_ImageHematoma.jpg)\nimg_url <- \"https://umich.instructure.com/files/1627149/download?download_frd=1\"\nimg_file <- tempfile(); download.file(img_url, img_file, mode=\"wb\")\nimg <- readJPEG(img_file)\nfile.info(img_file)\nfile.remove(img_file) # cleanup\nimg <- img[, , 1] # extract the first channel (from RGB intensity spectrum) as a univariate 2D array\n\n# install.packages(\"spatstat\")\n# package spatstat has a function blur() that applies a Gaussian blur\nlibrary(spatstat) \nimg_s <- as.matrix(blur(as.im(img), sigma=10)) # the smoothed version of the image\n\nz2 <- img_s + 1   # abs(rnorm(1, 1, 1)) # Upper confidence surface\nz3 <- img_s - 1   # abs(rnorm(1, 1, 1)) # Lower confidence limit\n\n# Plot the image surfaces\np <- plot_ly(z=img, type=\"surface\", showscale=FALSE) %>%\n add_trace(z=z2, type=\"surface\", showscale=FALSE, opacity=0.98) %>%\n add_trace(z=z3, type=\"surface\", showscale=FALSE, opacity=0.98)\np # Plot the mean-surface along with lower and upper confidence services.",
      "line_count": 24
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# install.packages(\"brainR\") ## if necessary\nlibrary(brainR)\n# Test data: https://socr.umich.edu/HTML5/BrainViewer/data/TestBrain.nii.gz\n\nbrainURL <- \"https://socr.umich.edu/HTML5/BrainViewer/data/TestBrain.nii.gz\"\nbrainFile <- file.path(tempdir(), \"TestBrain.nii.gz\")\ndownload.file(brainURL, dest=brainFile, quiet=TRUE)\nbrainVolume <- readNIfTI(brainFile, reorient=FALSE)\n\nbrainVolDims <- dim(brainVolume); brainVolDims\n# try different levels at which to construct contour surfaces (10 fast)\n# lower values yield smoother surfaces # see ?contour3d\ncontour3d(brainVolume, level = 20, alpha = 0.1, draw = TRUE)\n\n# multiple levels may be used to show multiple shells\n# \"activations\" or surfaces like hyper-intense white matter\n# This will take 1-2 minutes to rend!\ncontour3d(brainVolume, level = c(10, 120), alpha = c(0.3, 0.5),\n        add = TRUE, color=c(\"yellow\", \"red\"))\n\n# create text for orientation of right/left\ntext3d(x=brainVolDims[1]/2, y=brainVolDims[2]/2, z = brainVolDims[3]*0.98, text=\"Top\")\ntext3d(x=brainVolDims[1]*0.98, y=brainVolDims[2]/2, z = brainVolDims[3]/2, text=\"Right\")\n\n### render this on a webpage and view it!\n#browseURL(paste(\"file://\",\n#        writeWebGL_split(dir= file.path(tempdir(),\"webGL\"),\n#        template = system.file(\"my_template.html\", package=\"brainR\"),\n#        width=500), sep=\"\"))",
      "line_count": 29
    },
    {
      "section": "Exploratory Data Analytics (EDA)",
      "code": "# See examples here: https://cran.r-project.org/web/packages/oro.nifti/vignettes/nifti.pdf\n# and here: http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0089470\nlibrary(oro.nifti)\nfMRIURL <- \"https://socr.umich.edu/HTML5/BrainViewer/data/fMRI_FilteredData_4D.nii.gz\"\nfMRIFile <- file.path(tempdir(), \"fMRI_FilteredData_4D.nii.gz\")\ndownload.file(fMRIURL, dest=fMRIFile, quiet=TRUE)\n(fMRIVolume <- readNIfTI(fMRIFile, reorient=FALSE))\n# dimensions: 64 x 64 x 21 x 180 ; 4mm x 4mm x 6mm x 3 sec \n\nfMRIVolDims <- dim(fMRIVolume); fMRIVolDims\ntime_dim <- fMRIVolDims[4]; time_dim\n\n# Plot the 4D array of imaging data in a 5x5 grid of images \n# The first three dimensions are spatial locations of the voxel (volume element) and the fourth dimension is time for this functional MRI (fMRI) acquisition. \nimage(fMRIVolume, zlim=range(fMRIVolume)*0.95)\nh <- hist(fMRIVolume, plot = F)\n\nplot_ly(x = h$mids, y = h$density, type = \"bar\") %>%\n   layout(bargap=0.1, title=\"fMRI Histogram\")\n\n# Plot an orthographic display of the fMRI data using the axial plane containing the left-and-right thalamus to approximately center the crosshair vertically\n\northographic(fMRIVolume, xyz=c(34,29,10), zlim=range(fMRIVolume)*0.9)\n\nstat_fmri_test <- ifelse(fMRIVolume > 15000, fMRIVolume, NA)\n\nh <- hist(stat_fmri_test, plot = F)\n\nplot_ly(x = h$mids, y = h$density, type = \"bar\") %>%\n   layout(bargap=0.1, title=\"fMRI Histogram (high intensities)\")\n\ndim(stat_fmri_test)\n\noverlay(fMRIVolume, fMRIVolume[,,,5], zlim.x=range(fMRIVolume)*0.95)\n\n# overlay(fMRIVolume, stat_fmri_test[,,,5], zlim.x=range(fMRIVolume)*0.95)\n\n# To examine the time course of a specific 3D voxel (say the one at x=30, y=30, z=10):\n# plot(fMRIVolume[30, 30, 10,], type='l', main=\"Time Series of 3D Voxel \\n (x=30, y=30, z=10)\", col=\"blue\")\nx1 <- c(1:180)\ny1 <- loess(fMRIVolume[30, 30, 10,]~ x1, family = \"gaussian\")\n# lines(x1, smooth(fMRIVolume[30, 30, 10,]), col = \"red\", lwd = 2)\n# lines(ksmooth(x1, fMRIVolume[30, 30, 10,], kernel = \"normal\", bandwidth = 5), col = \"green\", lwd = 3)\n# legend(\"bottomright\", legend=c(\"(raw) fMRI\", \"smooth(fMRI)\", \"ksmooth(fMRI\"),\n#        col=c(\"blue\", \"red\", \"green\"), lty=1, cex=0.8,\n#        y.intersp=0.8)\n\nplot_ly(x = x1, y = fMRIVolume[30, 30, 10,], \n        name=\"Raw fMRI\", type = 'scatter', mode = 'lines') %>%\n  add_trace(y = smooth(fMRIVolume[30, 30, 10,]), name = 'loess fMRI')  %>%\n  add_trace(y = ksmooth(x1, fMRIVolume[30, 30, 10,], kernel=\"normal\", bandwidth = 5)$y, name='kSmooth fMRI')  %>%\n  layout(title=\"Time Series of 3D Voxel (x=30, y=30, z=10)\", legend = list(orientation = 'h'))\n",
      "line_count": 53
    },
    {
      "section": "Appendix",
      "code": "# install.packages(\"RODBC\", repos = \"http://cran.us.r-project.org\")\nlibrary(RODBC)",
      "line_count": 2
    },
    {
      "section": "Appendix",
      "code": "# Right Skewed\nN <- 10000\n x <- rnbinom(N, 10, .5)\n hist(x, \n xlim=c(min(x), max(x)), probability=T, nclass=max(x)-min(x)+1, \n   col='lightblue', xlab=' ', ylab=' ', axes=F, \n   main='Right Skewed')\nlines(density(x, bw=1), col='red', lwd=3)\n\n#No Skew\nN <- 10000\n x <- rnorm(N, 0, 1)\n hist(x, probability=T, \n   col='lightblue', xlab=' ', ylab=' ', axes=F, \n   main='No Skew')\nlines(density(x, bw=0.4), col='red', lwd=3)\n\n#Uniform density\nx<-runif(1000, 1, 50)\nhist(x, col='lightblue', main=\"Uniform Distribution\", probability = T, xlab=\"\", ylab=\"Density\", axes=F)\nabline(h=0.02, col='red', lwd=3)\n\n#68-95-99.7 rule\nx <- rnorm(N, 0, 1)\n hist(x, probability=T, \n   col='lightblue', xlab=' ', ylab=' ', axes = F, \n   main='68-95-99.7 Rule')\nlines(density(x, bw=0.4), col='red', lwd=3)\naxis(1, at=c(-3, -2, -1, 0, 1, 2, 3), labels = expression(mu-3*sigma, mu-2*sigma, mu-sigma, mu, mu+sigma, mu+2*sigma, mu+3*sigma))\nabline(v=-1, lwd=3, lty=2)\nabline(v=1, lwd=3, lty=2)\nabline(v=-2, lwd=3, lty=2)\nabline(v=2, lwd=3, lty=2)\nabline(v=-3, lwd=3, lty=2)\nabline(v=3, lwd=3, lty=2)\ntext(0, 0.2, \"68%\")\nsegments(-1, 0.2, -0.3, 0.2, col = 'red', lwd=2)\nsegments(1, 0.2, 0.3, 0.2, col = 'red', lwd=2)\ntext(0, 0.15, \"95%\")\nsegments(-2, 0.15, -0.3, 0.15, col = 'red', lwd=2)\nsegments(2, 0.15, 0.3, 0.15, col = 'red', lwd=2)\ntext(0, 0.1, \"99.7%\")\nsegments(-3, 0.1, -0.3, 0.1, col = 'red', lwd=2)\nsegments(3, 0.1, 0.3, 0.1, col = 'red', lwd=2)",
      "line_count": 44
    },
    {
      "section": "Appendix",
      "code": "# load data CaseStudy11_TBI.xlsx\ntmp = tempfile(fileext = \".xlsx\")\ndownload.file(url = \"https://umich.instructure.com/files/416270/download?download_frd=1\", destfile = tmp, mode=\"wb\")\ndf_TBI <- openxlsx::read.xlsx(xlsxFile = tmp, sheet = \"Sheet1\", skipEmptyRows = TRUE)\ndim(df_TBI)",
      "line_count": 5
    },
    {
      "section": "Appendix",
      "code": "# install.packages(\"dendextend\")\nlibrary(dendextend)\n\n# Clean the data first (missing values, characters, etc.)\nna_strings <- c(\"NA\", \".\")\ndf_TBI_clean <- df_TBI %>% naniar::replace_with_na_all(condition = ~.x %in% na_strings)\n\ndf_TBI_clean <- as.data.frame(df_TBI_clean[, -c(3:4)])\ndf_TBI_clean <- df_TBI_clean %>% tidyr::drop_na\t()   \ndim(df_TBI_clean)  # [1] 23 17\n\nrownames(df_TBI_clean) <- as.character(df_TBI_clean[ ,1])\ndf_TBI_clean <- df_TBI_clean[, -1]\ndf_TBI_clean <- as.data.frame(sapply(df_TBI_clean, as.numeric))\ndf_TBI_clean <- df_TBI_clean[, c(\"age\", \"2013.gose\", \"skull.fx\", \"temp.injury\", \"surgery\", \"acute.sz\")]\ndf_TBI_clean <- as.data.frame(scale(df_TBI_clean))\n\nhc <- hclust(dist(df_TBI_clean), \"ave\")\ndend <- as.dendrogram(hc)\nplot_dendro(dend, height = 600) %>% \n  layout(xaxis = list(range = c(-1, 5))) %>% \n  hide_legend() %>% \n  highlight(persistent = TRUE, dynamic = TRUE)\n\n# cutree(hc, k = 2)\n# alternatively specify the height, which is, the value of the criterion associated with the \n# clustering method for the particular agglomeration -- cutree(hc, h= 10)\n\ntable(cutree(hc, h= 3)) # cluster distribution",
      "line_count": 29
    },
    {
      "section": "Appendix",
      "code": "# To identify the number of cases for varying number of clusters we can combine calls to cutree and table \n# in a call to sapply -- to see the sizes of the clusters for $2\\ge k \\ge 10$ cluster-solutions:\n# numbClusters=4; \nmyClusters = sapply(2:5, function(numbClusters)table(cutree(hc, numbClusters)))\nnames(myClusters) <- paste(\"Number of Clusters=\", 2:5, sep = \"\")\nmyClusters",
      "line_count": 6
    },
    {
      "section": "Appendix",
      "code": "#To see which SubjectIDs are in which clusters:\ntable(cutree(hc, k=2)) \ngroups.k.2 <- cutree(hc, k = 2)\nsapply(unique(groups.k.2), function(g) rownames(df_TBI_clean)[groups.k.2 == g])",
      "line_count": 4
    },
    {
      "section": "Appendix",
      "code": "groups.k.3 <- cutree(hc, k = 3)\nsapply(unique(groups.k.3), function(g) df_TBI_clean$age[groups.k.3 == g])\nsapply(unique(groups.k.3), function(g)df_TBI_clean$surgery[groups.k.3 == g])\n\n# Note that there may be dependencies between some variables\nfit <- lm(`2013.gose` ~ age, data = df_TBI_clean)\nplot_ly(df_TBI_clean, x = ~age, y = ~`2013.gose`, type = 'scatter', mode = \"markers\", name=\"Data\") %>% \n    add_lines(x = ~age, y = fit$fitted.values, mode = \"lines\", name=\"Linear Model\") %>%\n    layout(title=paste0(\"Correlation(2013.gose,age) = \", round(cor(df_TBI_clean$`2013.gose`, df_TBI_clean$age),3)))\n\n# drill down deeper\ntable(groups.k.3, df_TBI_clean$surgery)",
      "line_count": 12
    },
    {
      "section": "Appendix",
      "code": "aggregate(df_TBI_clean, list(groups.k.3), median) ",
      "line_count": 1
    },
    {
      "section": "Appendix",
      "code": "library(rvest)\n# draw data\nwiki_url <- read_html(\"https://wiki.socr.umich.edu/index.php/SOCR_Data_Dinov_091609_SnP_HomePriceIndex\")\nhm_price_index<- html_table(html_nodes(wiki_url, \"table\")[[1]])\nhead(hm_price_index)\n\nperiod <- lubridate::parse_date_time(paste(hm_price_index$Year, hm_price_index$Month), \"ym\")\n\nhm_price_index <- hm_price_index[, c(-1,-2, -3)]\nhm_price_index$Date <- period\n\nlibrary(reshape2)\nhm_index_melted = melt(hm_price_index, id.vars='Date') #a common trick for plot, wide -> long format\n# ggplot(data=hm_index_melted, aes(x=Date, y=value, color=variable)) +\n#   geom_line(size=1.5) + ggtitle(\"HomePriceIndex:1991-2009\")\n\nplot_ly(hm_index_melted, x=~Date, y=~value, color=~variable,\n        type=\"scatter\", mode=\"lines+markers\") %>%\n  layout(title=\"US Housing Price Index (1991-2009)\", yaxis=list(title=\"HPI\"), legend=list(orientation = 'h'))\n",
      "line_count": 20
    },
    {
      "section": "Appendix",
      "code": "#Linear regression and predict\nhm_price_index$pred = predict(lm(`CA-SanFrancisco` ~ `CA-LosAngeles`, data=hm_price_index))\n# ggplot(data=hm_price_index, aes(x = `CA-LosAngeles`)) +\n#   geom_point(aes(y = `CA-SanFrancisco`)) +\n#   geom_line(aes(y = pred), color='Magenta', size=2) + ggtitle(\"PredictHomeIndex SF - LA\")\n\nplot_ly(hm_price_index, x=~`CA-LosAngeles`, y=~`CA-SanFrancisco`, color=~`Composite-10`,\n        type=\"scatter\", mode=\"lines+markers\", name=\"HPI Data\") %>%\n  add_lines(x = ~`CA-LosAngeles`, y = hm_price_index$pred, mode = \"lines\", name=\"Linear Model\") %>%\n  layout(title=\"LA (SoCal) vs. FS (NoCal)\", yaxis=list(title=\"Los Angeles\"), \n         yaxis=list(title=\"San Francisco\"), legend=list(orientation = 'h'))",
      "line_count": 11
    },
    {
      "section": "Appendix",
      "code": "# install.packages(\"GGally\")\nrequire(GGally)\npairs <- hm_price_index[, 10:15] \nhead(pairs)\ncolnames(pairs) <- c(\"Atlanta\", \"Chicago\", \"Boston\", \"Detroit\", \"Minneapolis\",  \"Charlotte\")\nggpairs(pairs) # you can define the plot design by specifying \"upper\", \"lower\", \"diag\", etc. ",
      "line_count": 6
    },
    {
      "section": "Appendix",
      "code": "library(rvest)\nlibrary(ggplot2)\n#draw data\nwiki_url <- read_html(\"https://wiki.socr.umich.edu/index.php/SOCR_Data_LA_Neighborhoods_Data\")\nhtml_nodes(wiki_url, \"#content\")\nLA_Nbhd_data <- html_table(html_nodes(wiki_url, \"table\")[[2]])\n#display several lines of data\nhead(LA_Nbhd_data); \ntheme_set(theme_grey())\n#treat ggplot as a variable\n#When claim \"data\", we can access its column directly e.g., \"x = Longitude\"\nplot1 = ggplot(data=LA_Nbhd_data, aes(x=LA_Nbhd_data$Longitude, y=LA_Nbhd_data$Latitude)) \n#you can easily add attribute, points, label(e.g., :text) \nplot1 + geom_point(aes(size=Population, fill=LA_Nbhd_data$Income), pch=21, stroke=0.2, alpha=0.7, color=2)+\n  geom_text(aes(label=LA_Nbhd_data$LA_Nbhd), size=1.5, hjust=0.5, vjust=2, check_overlap = T)+\n  scale_size_area() + scale_fill_distiller(limits=c(range(LA_Nbhd_data$Income)), palette='RdBu', na.value='white', name='Income') + \n  scale_y_continuous(limits=c(min(LA_Nbhd_data$Latitude), max(LA_Nbhd_data$Latitude))) +\n  coord_fixed(ratio=1) + ggtitle('LA Neighborhoods Scatter Plot (Location, Population, Income)') ",
      "line_count": 18
    },
    {
      "section": "Appendix",
      "code": "library(rvest)\nwiki_url <- read_html(\"https://wiki.socr.umich.edu/index.php/SOCR_LetterFrequencyData\")\nletter<- html_table(html_nodes(wiki_url, \"table\")[[1]])\nsummary(letter)\nhead(letter)\nsum(letter[, -1]) #reasonable\n# require(reshape)\n# library(scales)\n# dtm = melt(letter[, -14], id.vars = c('Letter'))\n# p = ggplot(dtm, aes(x = Letter, y = value, fill = variable)) + \n#   geom_bar(position = \"fill\", stat = \"identity\") + \n#   scale_y_continuous(labels = percent_format())+ggtitle('Pie Chart')\n# #or exchange \n# #p = ggplot(dtm, aes(x = variable, y = value, fill = Letter)) + geom_bar(position = \"fill\", stat = \"identity\") + scale_y_continuous(labels = percent_format())\n# p\n# #gg pie plot actually is stack plot + polar coordinate\n# p + coord_polar()\n\nreshape2::melt(letter, id.vars='Letter') %>%\nplot_ly(x = ~Letter, y = ~value, type = 'bar', \n                name = ~variable, color = ~variable) %>%\n      layout(yaxis = list(title = 'Count'), barmode = 'stack')\n",
      "line_count": 23
    }
  ]
}