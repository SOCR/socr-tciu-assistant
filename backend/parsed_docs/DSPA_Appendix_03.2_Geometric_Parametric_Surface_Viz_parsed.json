{
  "metadata": {
    "created_at": "2024-11-30T13:46:16.968446",
    "total_sections": 3,
    "total_code_chunks": 5,
    "total_tables": 1,
    "r_libraries": [
      "geometry",
      "jsonlite",
      "plotly",
      "scales"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"DSPA2: Data Science and Predictive Analytics (UMich HS650)\"\nsubtitle: \"<h2><u>Geometric and Parametric Surface Visualization</u></h2>\"\nauthor: \"<h3>SOCR/MIDAS (Ivo Dinov)</h3>\"\ndate: \"`r format(Sys.time(), '%B %Y')`\"\ntags: [DSPA, SOCR, MIDAS, Big Data, Predictive Analytics] \noutput:\n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: ../SOCR_header.html\n    toc: true\n    number_sections: true\n    toc_depth: 2\n    toc_float:\n      collapsed: false\n\n\nThis DSPA section Appendix.3.2 (Non-Orientable Surfaces) is part of the [DSPA Appendix on visualization of geometric and parametric surfaces](https://socr.umich.edu/DSPA2/DSPA_Appendix_03_Geometric_Parametric_Surface_Viz.html). This DSPA Appendix (3) covers the following 3 topics:\n\n - [3.1. Geometric Primitive Surfaces with and without Boundaries](https://socr.umich.edu/DSPA2/DSPA_Appendix_03.1_Geometric_Parametric_Surface_Viz.html)\n    + 1.1 Saddle Point Surface\n    + 1.2 Geometric Shapes: 3D Spherical Parameterization\n - 3.2. Non-Orientable Surfaces (this section)\n    + 2.1 Mobius Band Triangulation\n    + 2.2 Klein Bottle\n - [3.3. Brain Surfaces](https://socr.umich.edu/DSPA2/DSPA_Appendix_03.3_Geometric_Parametric_Surface_Viz.html)\n    + 3.1 Human Brain\n    + 3.2 Rodent Brain\n - 3.4 [Time-varying surface embedding of 4D manifolds in 3D](https://socr.umich.edu/DSPA2/DSPA_Appendix_03.4_Geometric_Parametric_Surface_Viz.html)",
      "word_count": 137
    },
    {
      "title": "Non-Orientable Surfaces",
      "content": "## Mobius Band Triangulation\n\nThe [Mobius band (or Moebius strip](https://en.wikipedia.org/wiki/Mobius_strip) is a non-orientable 2D surface with a single (curve) boundary. The example below shows the parameterization, triangulation and rendering of the Mobius band. The example also demonstrates how to add additional traces (curves or surfaces) to the same 3D scene.\n\n\nAn alternative visualization of the Mobius band is illustrated below\n\n\n## Klein Bottle\n\nA more interesting example of a non-orientable 2-manifold that is closed and has no boundary. It is natively embedded in $R^4$, but can be rendered in $R^3$ with some imagination. The Klein bottle surface does not intersect itself when it's natively embedded in $R^4$, however, its projection in $R^3$ appears to be self-intersecting. See the [Klein Bottle parametrization details online](https://en.wikipedia.org/wiki/Klein_bottle).\n\n\nWe can also try to render the Klein Bottle using a precomputed JSON object including the geometric, topological and meta-data attributes needed for the 3D rendering of the surface.",
      "word_count": 152
    },
    {
      "title": "References",
      "content": "* [Back to the DSPA visualization of geometric and parametric surfaces Appendix](https://socr.umich.edu/DSPA2/DSPA_Appendix_03_Geometric_Parametric_Surface_Viz.html)\n* Additional [brain surface data are available online](http://www.freesurfer.net/pub/data/tutorial_data/long-tutorial/).\n* [R plot_ly documentation and details are available here](https://plot.ly/r/).\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"https://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number \n\t\t\t\t<img class=\"statcounter\" src=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" alt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"https://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"https://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"https://www.statcounter.com/counter/counter.js\"></script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 124
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "      smooth_scroll: true\n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Main",
      "code": "knitr::opts_chunk$set(echo = TRUE)",
      "line_count": 1
    },
    {
      "section": "Non-Orientable Surfaces",
      "code": "library(plotly)\nlibrary(geometry)\n \n# Create a data.frame of all (u,v) coordinates\ngrid.df <- expand.grid(\n  u = seq(0, 2*pi, length.out = 100),\n  v = seq(-1, 1, length.out = 50)\n)\n\n# Define the Mobius Band parametric value\ntp <- 1 + (grid.df$v * cos(grid.df$u / 2))/2\nmat <- matrix(\n  c(tp * cos(grid.df$u), tp * sin(grid.df$u), \n    0.5 * grid.df$v * sin(grid.df$u / 2)), \n  ncol = 3, dimnames = list(NULL, c(\"x\", \"y\", \"z\"))\n)\n \n# Delaunay triangulation on grid.df (not on the matrix of values mat)\n# The Delaunay matrix has m rows and dim+1 columns. For each row, the matrix contains a set of indices to the points (zero-cells), which describes a simplex of dimension dim. The 3D simplex is a tetrahedron.\n# grid.df is an n-by-dim matrix. The rows of grid.df represent \n# n points in dim-dimensional space\nDelaunay.mat <- delaunayn(grid.df)\nDelaunay.mat.t <- t(Delaunay.mat)\n#  Use mat to plot (not the 2D grid grid.df\n \n# Plotly layout \naxs <- list(\n  backgroundcolor=\"rgb(200,200,200)\", # gray\n  gridcolor=\"rgb(255,255,255)\",       # white\n  showbackground=TRUE,\n  zerolinecolor=\"rgb(255,255,255)\"     # white\n)\n \n#  Apply the colormap\n#  Compute the mean of z for each row of the Delaunay vertices\nzmean <- apply(Delaunay.mat, MARGIN=1, function(row){mean(mat[row,3])})\n \nlibrary(scales)\n# Determine the 2-cell face's colors\n# plotted color result will be slightly different\n#  since colour_ramp uses CIELAB instead of RGB\n#  could use colorRamp for exact replication\nfacecolor = colour_ramp(\n  # brewer_pal(palette=\"RdBu\")(10); # brewer_pal(\"div\")(10)\n  colorRampPalette(c(\"gold\", \"navy blue\"))(4)\n)(rescale(x=zmean))\n \n \nplot_ly(\n  # x = x, y = y, z = z,  # vertex (0-cell) coordinates\n  # i = i, j = j, k = k,  # indices to the vertices, which describe a 2-cell (face or a simplex) of dimension dim\n  # see docs: https://plot.ly/r/3d-mesh-plots/\n  x = mat[, 1], y = mat[, 2], z = mat[, 3],\n  # JavaScript is 0 based index so subtract 1\n  i=Delaunay.mat[, 1]-1, j=Delaunay.mat[, 2]-1, k=Delaunay.mat[, 3]-1,\n  facecolor = facecolor,\n  type = \"mesh3d\",\n  contour=list(show=TRUE, color=\"#000\", width=15)\n) %>%\n  # add two planes as curve traces\n  add_trace(x=mat[, 1], y=mat[, 2], z=0, type=\"scatter3d\", mode=\"lines\", line = list(color=\"rgb(0, 255, 0)\")) %>%\n  add_trace(x=mat[, 1], y=0, z=mat[, 3], type=\"scatter3d\", mode=\"lines\", line = list(color=\"rgb(255, 0, 0)\"), opacity=0.5) %>%\n  layout(\n    title=\"Mobius Strip Triangulation\",\n    scene=list(xaxis=axs, yaxis=axs, zaxis=axs)\n  )\n",
      "line_count": 67
    },
    {
      "section": "Non-Orientable Surfaces",
      "code": "phi <- seq(from = 0, to = 2*pi, by = ((2*pi - 0)/(200 - 1)))\npsi <- seq(from = 0, to = 2*pi, by = ((2*pi - 0)/(200 - 1)))\n\n# rendering (u,v) parametric surfaces requires x,y,z arguments to be 2D arrays\n# In out case, the three coordinates have to be 200*200 parameterized tensors/arrays\na <- 6 # Torus radius\nr <- 2 # Tube radius\nx2<- (a + r*cos(phi)) %o% cos(psi)  # x\ny2 <- (a + r*cos(phi)) %o% sin(psi) # y\nz2 <- rep(r, length(phi)) %o% sin(phi)                      # z\n    \np <- plot_ly(hoverinfo=\"none\", showscale = FALSE) %>%\n  add_trace(x = ~x2, y = ~y2, z = ~z2, type = 'surface', opacity=1, visible=T) %>%\n  layout(title = \"Mobius band\", showlegend = FALSE)\np",
      "line_count": 15
    },
    {
      "section": "Non-Orientable Surfaces",
      "code": "# library(plotly)\nlibrary(geometry)\n\ngrid.df <- expand.grid(\n  u = seq(0, pi, length.out = 100),\n  v = seq(0, 2*pi, length.out = 100)\n)\n\n# Define a 3D Klein Bottle parameterization (see Wikipedia)\nmat <- matrix(\n    c(\n      -2/15 * cos(grid.df$u) * \n          (3*cos(grid.df$v)-30*sin(grid.df$u) + \n              90*cos(grid.df$u)^4 * sin(grid.df$u)\n              -60*cos(grid.df$u)^6 * sin(grid.df$u) +\n              5*cos(grid.df$u) * cos(grid.df$v) * sin(grid.df$u)), # x\n      -1/15*sin(grid.df$u) * \n          (3*cos(grid.df$v) - 5*cos(grid.df$u)^2 * cos(grid.df$v)\n              -48*cos(grid.df$u)^4 * cos(grid.df$v) + \n              48*cos(grid.df$u)^6 * cos(grid.df$v) - 60*sin(grid.df$u) +\n              5*cos(grid.df$u)*cos(grid.df$v)*sin(grid.df$u) -\n              5*cos(grid.df$u)^3 * cos(grid.df$v) *sin(grid.df$u) -\n              80* cos(grid.df$u)^5 * cos(grid.df$v) *sin(grid.df$u) +\n              80*cos(grid.df$u)^7 * cos(grid.df$v) *sin(grid.df$u)), # y\n        4/15 *(3 + 5*cos(grid.df$u)*sin(grid.df$u)) *sin(grid.df$v) # z\n      ), \n    ncol = 3, dimnames = list(NULL, c(\"x\", \"y\", \"z\"))\n)\n\nDelaunay.mat <- delaunayn(grid.df)\nDelaunay.mat.t <- t(Delaunay.mat)\n#  Use mat to plot (not the 2D grid grid.df\n \n# Plotly layout \naxs <- list(\n  backgroundcolor=\"rgb(200,200,200)\", # gray\n  gridcolor=\"rgb(255,255,255)\",       # white\n  showbackground=TRUE,\n  zerolinecolor=\"rgb(255,255,255)\"     # white\n)\n \n#  Apply the colormap\n#  Compute the mean of z for each row of the Delaunay vertices\nzmean <- apply(Delaunay.mat, MARGIN=1, function(row){mean(mat[row,3])})\n \nlibrary(scales)\n# Determine the 2-cell face's colors\n# plotted color result will be slightly different\n#  since colour_ramp uses CIELAB instead of RGB\n#  could use colorRamp for exact replication\nfacecolor = colour_ramp(\n  # brewer_pal(palette=\"RdBu\")(10); # brewer_pal(\"div\")(10)\n  colorRampPalette(c(\"pink\", \"purple\"))(10)\n)(rescale(x=zmean))\n \n \nplot_ly(\n  # x = x, y = y, z = z,  # vertex (0-cell) coordinates\n  # i = i, j = j, k = k,  # indices to the vertices, which describe a 2-cell (face or a simplex) of dimension dim\n  # see docs: https://plot.ly/r/3d-mesh-plots/\n  x = mat[, 1], y = mat[, 2], z = mat[, 3],\n  # JavaScript is 0 based index so subtract 1\n  i=Delaunay.mat[, 1]-1, j=Delaunay.mat[, 2]-1, k=Delaunay.mat[, 3]-1,\n  facecolor = facecolor,\n  type = \"mesh3d\",\n  opacity = 0.3,\n  contour=list(show=TRUE, color=\"#000\", width=15)\n) %>%\n  # add_trace(x=mat[, 1], y=mat[, 2], z=0, type=\"scatter3d\", mode=\"lines\", line = list(color=\"rgb(0, 255, 0)\")) %>%\n  layout(\n    title=\"Klein Bottle Triangulation\",\n    scene=list(xaxis=axs, yaxis=axs, zaxis=axs)\n  )\n\n# Plot surface using markers\np <- plot_ly() %>% \n  add_trace(type = 'scatter3d', size = 1, \n     x = mat[, 1], y = mat[, 2], z = mat[, 3], opacity=0.01, mode = \"markers\"); p\n\n# Plot surface using \"surface\"\n# To use add_surface instead, we will have to first convert the surface\n# into a different format, with a vector of x locations, a vector of y locations, z as a matrix (dimensions equal to x by y). \n# As the Klein Bottle does not have boundary, we also need to split the \n# z values into two separate surface layers one for the top half of the surface and one for the bottom half\n# p <- plot_ly(showscale = FALSE) %>%  add_surface(x = mat[, 1], y = mat[, 2], z = mat[, 3], opacity=0.5); p\n",
      "line_count": 86
    },
    {
      "section": "Non-Orientable Surfaces",
      "code": "library(plotly)\n\nlibrary(jsonlite)\nKB_data <- fromJSON(\"http://socr.umich.edu/data/DSPA/surfaces/KlineBottle.json\", flatten=TRUE)\n\n# Examine the 3 cardinal projection planes (Klein Bottle cross-sections)\nimage(KB_data$data$z[[1]])\nimage(KB_data$data$y[[1]])\nimage(KB_data$data$x[[1]])\n\np <- plot_ly( # 'mesh3d' assumes vector inputs where z=z(x,y)\n              #x = ~as.vector(KB_data$data$x[[1]]), \n              #y = ~as.vector(KB_data$data$y[[1]]),\n              #z = ~as.vector(KB_data$data$z[[1]]),\n  \n              # 'surface' type assumes (u,v) parametric descriptions\n              # x=x(u,v), y=y(u,v), z=z(u,v)\n              x = ~KB_data$data$x[[1]], \n              y = ~KB_data$data$y[[1]],\n              z = ~KB_data$data$z[[1]],\n              type = 'surface', opacity=0.7); p\n",
      "line_count": 22
    }
  ]
}