{
  "metadata": {
    "created_at": "2024-11-30T13:46:17.095741",
    "total_sections": 8,
    "total_code_chunks": 4,
    "total_tables": 1,
    "r_libraries": [
      "plotly"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"DSPA2: Data Science and Predictive Analytics (UMich HS650)\"\nsubtitle: \"<h2><u>Geometric and Parametric Surface Visualization</u></h2>\"\nauthor: \"<h3>SOCR/MIDAS (Ivo Dinov)</h3>\"\ndate: \"`r format(Sys.time(), '%B %Y')`\"\ntags: [DSPA, SOCR, MIDAS, Big Data, Predictive Analytics] \noutput:\n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: ../SOCR_header.html\n    toc: true\n    number_sections: true\n    toc_depth: 2\n    toc_float:\n      collapsed: false\n\n\nIn this [DSPA Appendix](http://dspa2.predictive.space) we will demonstrate the surface rendering of various mathematical representations of shape, form, and size.\n\n*Note*: This Appendix is purposely divided into four separate sections to reduce the page loading time and improve the user experiences. It's not recommended the readers view the [complete version (DSPA_Appendix_03_Geometric_Parametric_Surface_Viz_Complete.html)](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03_Geometric_Parametric_Surface_Viz_Complete.html) as this page is extremely complex.",
      "word_count": 107
    },
    {
      "title": "Introduction",
      "content": "It is important to realize that there are different types of [manifolds](https://en.wikipedia.org/wiki/Manifold) and their shape can be represented as a number of alternative mathematical objects. There are [parametric](https://en.wikipedia.org/wiki/Parametric_surface), [PDE](https://en.wikipedia.org/wiki/PDE_surface), [triangulated](https://en.wikipedia.org/wiki/Surface_triangulation), [implicit ($f(x,y,x)=0$)](https://en.wikipedia.org/wiki/Implicit_surface) explicit ($r=r(u,v)$), and other analytic strategies to represent the [surface topology](https://en.wikipedia.org/wiki/Surface_(topology)). In addition, some manifolds are [orientable](https://en.wikipedia.org/wiki/Orientability) and some are non-orientable, some are [closed with no boundaries](https://en.wikipedia.org/wiki/Closed_manifold) and some are [open with boundaries](https://en.wikipedia.org/wiki/Topological_manifold#Manifolds_with_boundary). The deep topological [classification of manifolds](https://en.wikipedia.org/wiki/Classification_of_manifolds) provides further details on the mathematical analytics approaches to represent form, shape and size. Below. We will demonstrate examples of visualizing common geometric manifolds and some mathematical models representing the boundaries of specific manifolds.\n\nFor example, a parametric mesh-based representation of an open surface with boundaries requires individual definition of each component: $x=x(u,v)$,$y=y(u,v)$, $z=z(u,v)$. In the saddle point surface example below, we use a single parameter $0\\leq u=\\phi <2\\pi$. However, all other 3D scene components need to be transformed using [spherical coordinates](https://en.wikipedia.org/wiki/Spherical_coordinate_system), e.g., the orthogonal vertical planes need to be parameterized using\n$0\\leq u=\\phi <2\\pi \\text { and } 0\\leq v=\\psi <\\pi$.\n\n\nOn the other hand, an orientable closed surface without boundary can be displayed by explicitly defining a triangulation of the surface, as illustrated below for a [tetrahedron](https://en.wikipedia.org/wiki/Tetrahedron).\n\n\nNext, we demonstrate how to render a more complex, naturally-triangulated surface; [12-face Icosahedron](https://en.wikipedia.org/wiki/Icosahedron): \n\n\nThe core of this [DSPA Appendix section](https://dspa2.predictive.space) is divided into the following sections.",
      "word_count": 226
    },
    {
      "title": "[Geometric Primitive Surfaces with and without Boundaries](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.1_Geometric_Parametric_Surface_Viz.html)",
      "content": "This section covers:\n\n - Saddle Point Surface\n - Geometric Shapes: 3D Spherical Parameterization\n - Torus Surface",
      "word_count": 16
    },
    {
      "title": "[Non-Orientable Surfaces](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.2_Geometric_Parametric_Surface_Viz.html)",
      "content": "This section demonstrates some examples of non-orientable 2-manifolds embedded in $R^3$ and $R^4$:\n\n - MÃ¶bius Band Triangulation\n - Klein Bottle",
      "word_count": 20
    },
    {
      "title": "[Brain Surfaces](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.3_Geometric_Parametric_Surface_Viz.html)",
      "content": "This section shows examples of visualizing (precomputed/triangulated) brain cortical surface models:\n\n - Human Brain\n - Rodent Brain",
      "word_count": 17
    },
    {
      "title": "[Animation of 4D Surfaces](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.4_Geometric_Parametric_Surface_Viz.html)",
      "content": "This section illustrates an innovative approach to render (high-dimensional) surfaces that are natively embedded in 4D using time-like animation along one of the dimensions to generate 3D embeddings of the manifolds.",
      "word_count": 31
    },
    {
      "title": "[Volume Rendering](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.5_Volume_Rendering_Viz.html)",
      "content": "This section shows examples of visualizing solids, such as 3D MRIs, using volume rendering.",
      "word_count": 14
    },
    {
      "title": "References",
      "content": "- Additional [brain surface data are available online](https://www.freesurfer.net/pub/data/tutorial_data/long-tutorial/).\n - [R plot_ly documentation and details are available here](https://plot.ly/r/).\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"https://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number \n\t\t\t\t<img class=\"statcounter\" src=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" alt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"https://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"https://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"https://www.statcounter.com/counter/counter.js\"></script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 112
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "      smooth_scroll: true\n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Main",
      "code": "knitr::opts_chunk$set(echo = TRUE)",
      "line_count": 1
    },
    {
      "section": "Introduction",
      "code": "library(plotly)\n\n# Define Saddle-point Surface\nx <- sin(seq(0, 2*pi, length.out = 200))\ny <- cos(seq(0, 2*pi, length.out = 200))\nz <- sin(seq(0, 2*pi, length.out = 200))*cos(seq(0, 2*pi, length.out = 200))\n#plot_ly(x = ~x, y = ~y, z = ~z, type = 'mesh3d',\n#             contour=list(show=TRUE, color=\"#000\", width=15, lwd=10),\n#             opacity=1.0, hoverinfo=\"none\", legendshow=F)\n\n# Define plane 1 (X=Y)\nphi1 <- pi/4  # x=y in spherical coordinates\npsi1 <- seq(from = 0, to = pi, by = ((pi - 0)/(200 - 1)))\nr1 = seq(from = -1, to = 1, by = ((1 - (-1))/(200 - 1)))  # r = radius\nscale1 <- 1.1\n\n# if you want to display planes as rectangles/squares\n# you need to transform the radial measure (r1)\n#for (i in 1:length(psi1)) {\n#  r1[i] = min(1/abs(cos(psi1[i])), 1/abs(sin(psi1[i])))\n#}\n# plot(x=r1*cos(psi1), y=r1*sin(psi1))\n\nx1 = scale1 * cos(phi1) * (r1 %o% sin(psi1))     # x1 = r1 cos(phi1)sin(psi1)\ny1 = scale1 * x1                                 # x1 = y1\nz1 = scale1 * (r1 %o% cos(psi1)) \n\n# Define plane 2 (Orthogonal to Plane 1 and along the Z axis)\nphi2 <- (3*pi)/4  #  in spherical coordinates\npsi2 <- seq(from = 0, to = pi, by = ((pi - 0)/(200 - 1)))\nr2 = seq(from = -1, to = 1, by = ((1 -(-1))/(200 - 1)))  # r = radius\n\nx2 = scale1 * cos(phi2) * (r2 %o% sin(psi2))     # x2 = r2 cos(phi2)sin(psi2)\ny2 = scale1 * sin(phi2) * (r2 %o% sin(psi2))     # y2 = r2 sin(phi2)sin(psi2)\nz2 = scale1 * (r2 %o% cos(psi2)) \n\np <- plot_ly(x=~x1, y=~y1, z=~z1,   # draw vertical plane 1\n        colors = c(\"yellow\", \"white\"),type=\"surface\", \n        hoverinfo=\"none\", opacity=0.7, \n        legendshow=FALSE, showscale = FALSE) %>%\n  add_trace(x=~x2, y=~y2, z=~z2,    # draw vertical plane 2 (orthogonal to 1)\n        colors = c(\"blue\", \"yellow\"),type=\"surface\", \n        hoverinfo=\"none\", opacity=0.7, \n        legendshow=FALSE, showscale = FALSE) %>%\n  # draw the saddle point surface\n  add_trace(x = ~x, y = ~y, z = ~z, type = 'mesh3d',\n       contour=list(show=TRUE, color=\"#000\", width=15, lwd=10),\n       opacity=1.0, hoverinfo=\"none\", legendshow=F) %>%\n  # trace the boundary of the saddle point surface\n  add_trace(x=~x, y=~y, z=~z, type=\"scatter3d\", mode=\"lines\", \n              line = list(width = 10, color=\"red\"), name=\"Surface Boundary\",\n              hoverinfo=\"none\", legendshow=F) %>%\n  # trace the main Z-axis\n  add_trace(x=0, y=0, z=~(scale1*2*z), type=\"scatter3d\", mode=\"lines\", \n              line = list(width = 10, color=\"navy blue\"), name=\"Z\",\n              hoverinfo=\"none\", legendshow=F) %>%\n  layout(title = \"Saddle Point with Planes\")\np",
      "line_count": 58
    },
    {
      "section": "Introduction",
      "code": "library(plotly)\n\np <- plot_ly(type = 'mesh3d',\n             # Define all (4) zero-cells (points or vertices)\n             # P_i(x,y,z), 0<=i<4\n             x = c(0, 0, 2, 0),\n             y = c(0, 0, 0, 2),\n             z = c(0, 2, 0, 0),\n             \n             # Next define all triples (i,j,k) of vertices that form a 2-cell face. \n             # All Tetrahedra have 4 faces\n             i = c(0, 0, 0, 1),\n             j = c(1, 2, 3, 2),\n             k = c(2, 3, 1, 3),\n             \n             # Define the appearance of the 4 faces (2-cells)\n             intensity = c(0, 0.33, 0.66, 1),\n             color = c(0, 0.33, 0.66, 1),\n             colors = colorRamp(c(\"yellow\", \"light blue\", \"navy blue\"))\n); p",
      "line_count": 20
    },
    {
      "section": "Introduction",
      "code": "library(plotly)\n# http://blog.andreaskahler.com/2009/06/creating-icosphere-mesh-in-code.html\n\nphi <- (1 + sqrt(5))/2\n\np <- plot_ly(type = 'mesh3d',\n             # define 12 vertices\n             x = c(-1, 1, -1, 1, 0, 0, 0, 0, phi, phi, -phi, -phi),\n             y = c(phi, phi, -phi, -phi, -1, 1, -1, 1, 0, 0, 0, 0),\n             z = c(0, 0, 0, 0, phi, phi, -phi, -phi, -1, 1, -1, 1),\n \n             # Define all 20 2-cells (faces) \n             i = c(0,0,0,0,0,1,5,11,10,7,3,3,3,3,3,4,2,6,8,9),\n             j = c(11,5,1,7,10,5,11,10,7,1,9,4,2,6,8,9,4,2,6,8),\n             k = c(5,1,7,10,11,9,4,2,6,8,4,2,6,8,9,5,11,10,7,1),\n             # 0 1 2 3 4 5 6 7 8 9 10 11 \n             # A B C D E F G H I J  K  L\n             \n             # Define the appearance\n             facecolor = toRGB(viridisLite::viridis(20)),\n             showscale = TRUE, \n             opacity=0.5\n) \ntraceEdges <- list( \n  x = c(-1, -phi, -phi, -1), \n  y = c(phi, 0, 0, phi), \n  z = c(0, -1, 1, 0), \n  line = list(\n    color = \"rgb(10, 10, 10)\",  #dark color for line traces\n    width = 20 # width of line\n  ), \n  mode = \"lines\", \n  opacity = 1,\n  type = \"scatter3d\"\n)\n\n# emphasize one of the faces by stressing the three 1-cells (edges)\np <- add_trace(p, x=traceEdges$x, y=traceEdges$y, z=traceEdges$z, type=\"scatter3d\", mode=\"lines\", line = list(color=traceEdges$line$color, width=traceEdges$line$width), showscale=T); p",
      "line_count": 38
    }
  ]
}