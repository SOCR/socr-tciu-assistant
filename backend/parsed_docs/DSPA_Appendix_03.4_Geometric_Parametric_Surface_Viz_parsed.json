{
  "metadata": {
    "created_at": "2024-11-30T13:46:17.028326",
    "total_sections": 3,
    "total_code_chunks": 11,
    "total_tables": 1,
    "r_libraries": [
      "plotly",
      "tidyverse"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"DSPA2: Data Science and Predictive Analytics (UMich HS650)\"\nsubtitle: \"<h2><u>Geometric and Parametric Surface Visualization</u></h2>\"\nauthor: \"<h3>SOCR/MIDAS (Ivo Dinov)</h3>\"\ndate: \"`r format(Sys.time(), '%B %Y')`\"\ntags: [DSPA, SOCR, MIDAS, Big Data, Predictive Analytics] \noutput:\n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: ../SOCR_header.html\n    toc: true\n    number_sections: true\n    toc_depth: 2\n    toc_float:\n      collapsed: false\n\n\nThis DSPA section Appendix.3.4 (4D Manifolds) is part of the [DSPA Appendix on visualization of geometric and parametric surfaces](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03_Geometric_Parametric_Surface_Viz.html). This DSPA Appendix (3) covers the following topics:\n\n - [3.1. Geometric Primitive Surfaces with and without Boundaries](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.1_Geometric_Parametric_Surface_Viz.html)\n    + 1.1 Saddle Point Surface\n    + 1.2 Geometric Shapes: 3D Spherical Parameterization\n    + 1.3 Torus Surface\n - [3.2. Non-Orientable Surfaces](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.2_Geometric_Parametric_Surface_Viz.html)\n    + 2.1 Mobius Band Triangulation\n    + 2.2 Klein Bottle\n - 3.3. [Brain Surfaces](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.3_Geometric_Parametric_Surface_Viz.html)\n    + 3.1 Human Brain\n    + 3.2 Rodent Brain\n - 3.4 Time-varying surface embedding of 4D manifolds in 3D (this section)",
      "word_count": 140
    },
    {
      "title": "Time-varying surface embedding of 4D manifolds in 3D",
      "content": "This section illustrates an innovative approach to render (high-dimensional) surfaces that are natively embedded in 4D using time-like animation along one of the dimensions to generate 3D embeddings of the manifolds. Examples of 4D manifolds include the [Klein Bottle](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.2_Geometric_Parametric_Surface_Viz.html) and are useful for visualization of [constrained optimization problems where high-dimensional objective functions are minimized over specific domains](https://socr.umich.edu/DSPA2/DSPA2_notes/21_FunctionOptimization.html).\n\n\nWe will start by generating a generic **4D plotter function** that can be called repeatedly with different parametric manifold descriptions.\n\n## 4D Plotter Function\n\nThis function plots functions that can be described in this parametric form $w = f(x,y,z)$. This will allow us to render 4D parametric manifolds as 3D surfaces where with the $4^{th}$ dimension (either of $x,y,z$) may be specified as a horizontal slider.\n\n\nNext we will explore several 4D manifolds that have canonical parametric function representations.\n\n## Examples\n\n### Function optimization\n\nMore details about function optimization are available in [DSPA2 Chapter 13](https://socr.umich.edu/DSPA2/DSPA2_notes/13_FunctionOptimization.html).\nSuppose we try to minimize the function $w=f(x,y,x)=-(x^3 +5y-2^z)$, subject to these constraints:\n$$\\begin{cases} x -\\frac{y}{2}+z^2 \\leq 50\\\\ \\mod(x, 4) + \\frac{y}{2} \\leq 1.5 \\end{cases}.$$\nThis is indeed a rather complicated optimization problem of a highly non-linear function. You can experiment finding solutions using grid search, non-linear optimization, or using the [Wolfram Alpha services](https://www.wolframalpha.com/input/?i=optimize+x%5E3+%2B+5*y+-2%5Ez++subject+to+x+-0.5*y%2Bz%5E2+%3C%3D+50+AND+mod(x,+4)+%2B+y%2F2+%3E%3D+1.5).\n\nWe will attempt to render the 4D objective function by embedding it into 3D along one of the coordinate axes (dimensions). Then, using a slider to traverse the spectrum of (time-like) values may give us clues as to where the local and global extrema of the cost function may be localized. Let's define the objective function, the constraints, and use the `plot_4d()` function we defined above to render the 4D manifold as 3D-cine surfaces.\n\n\nLet's first embed the objective function in 3D by cine-animating along the **x-axis**.\n\n\nNext, we will render a 3D cine-animation immersing the objective function along the **y-axis**.\n\n\nFinally, we will embed the objective function along the **z-axis**.\n\n\n\n### Klein Bottle\n\nWe saw [the Klein Bottle surface earlier](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.2_Geometric_Parametric_Surface_Viz.html), which has a number of [alternative parametrizations](https://en.wikipedia.org/wiki/Klein_bottle). Now, we can adopt some of the 3D equations embedding the Klein bottle in 3D by plotting $w$ as the [result instead of 0](https://mathworld.wolfram.com/KleinBottle.html). One specific implicit equation immersion of the Klein bottle is:\n\n$$ w=f(x,y,z)=(x^2+y^2+z^2+2y-1)\\times((x^2+y^2+z^2-2y-1)^2-8z^2) + 16\\times x\\times z\\times (x^2+y^2+z^2-2y-1).$$\n\n\nAgain, we first embed the Klein bottle in 3D by cine-animating along the **x-axis**.\n\n\nNext, we will render it along the **y-axis**.\n\n\nFinally, we will embed the Klein bottle in 3D along the **z-axis**.\n\n\n\nClearly such cine-like strategies, use of glyphs, creative utilization of color, and other mechanisms may be useful to render high-dimensional manifolds that are not easily interpreted as 1D (curves), 2D (surfaces) or 3D (manifolds) objects.",
      "word_count": 444
    },
    {
      "title": "References",
      "content": "- [Back to the DSPA visualization of geometric and parametric surfaces Appendix](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03_Geometric_Parametric_Surface_Viz.html).\n - [Back to the main DSPA Topics](https://dspa.predictive.space).\n - Additional [brain surface data are available online](https://www.freesurfer.net/pub/data/tutorial_data/long-tutorial/).\n - [R plot_ly documentation and details are available here](https://plot.ly/r/).\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"https://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number \n\t\t\t\t<img class=\"statcounter\" src=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" alt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"https://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"https://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"https://www.statcounter.com/counter/counter.js\"></script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 131
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "      smooth_scroll: true\n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Main",
      "code": "knitr::opts_chunk$set(echo = TRUE)",
      "line_count": 1
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "#, results=\"hide\"}\nlibrary(plotly)\nlibrary(tidyverse)",
      "line_count": 3
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "plot_4d <- function(f, x, y, z, slide_axis=\"z\") {\n  stopifnot(slide_axis %in% c(\"x\",\"y\",\"z\"))\n  x_range <- x\n  x_label <- \"x\"\n  y_range <- y\n  y_label <- \"y\"\n  slide_range <- z\n  if (slide_axis==\"x\") {\n    slide_range <- x\n    x_range < z\n    x_label <- \"z\"\n  } else if (slide_axis==\"y\") {\n    x_range <- x\n    y_range <- z\n    y_label <- \"y\"\n    slide_range <- y\n  }\n  frames <- list()\n  plt <- plot_ly()\n  for (i in 1:length(slide_range)) {\n    slide_val <- slide_range[i]\n    # Generate the w values for f(x,y,z)\n    if (slide_axis==\"z\") {\n        w <-(matrix(apply(expand.grid(x_range,y_range,slide_val),1,f),length(x_range),length(y_range)))\n    } else if (slide_axis==\"x\") {\n        w <-(matrix(apply(expand.grid(slide_val,y_range,x_range),1,f),length(x_range),length(y_range)))\n    } else if (slide_axis==\"y\") {\n        w <-(matrix(apply(expand.grid(x_range,slide_val,y_range),1,f),length(x_range),length(y_range)))\n    }\n    \n    # A the start, only make the first frame visible\n    visible <- i==as.integer(length(slide_range)/2)\n    \n    # Add this trace (first frame) to the plot\n    plt <- add_trace(plt, x=x_range, y=y_range, z=w, type=\"surface\", visible=visible,\n                     name=as.character(slide_val), showlegend=FALSE, \n                     colors = colorRamp(rainbow(8)), opacity=1.0, hoverinfo=\"none\")\n    \n    # Configure this step in the slider to make this frame visible and none other\n    step <- list(args = list('visible', rep(FALSE, length(slide_range))),\n                 method = 'restyle', label=paste0(slide_axis, \"=\", round(slide_val,3)))\n    step$args[[2]][i] = TRUE  \n    frames[[i]] = step \n  }\n  \n  # Show the plot + slider focused on the middle plot\n  plt %>%\n    layout(\n      title = paste0(\"4D Plot - sliding on \",slide_axis, \" axis\"),\n      scene = list(zaxis=list(title=\"w=f(x,y,z)\"), xaxis=list(title=x_label), yaxis=list(title=y_label)),\n      sliders = list(list(active = as.integer(length(slide_range)/2),\n                               currentvalue = list(prefix = paste0(slide_axis, \":\")),\n                               steps = frames))) %>%\n    hide_colorbar()  \n}",
      "line_count": 55
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "p3_ineq <- function(x) {\n   c((x[1]-.5*x[2]+x[3]^2),(x[1]%%4) + (x[2]/2))\n}\np3_ineq_lb <- c(-Inf,-Inf)\np3_ineq_ub <- c(50,1.5)\n\n\np3_objective <- function(x,restrictDomain=TRUE) {\n  if (restrictDomain) {\n    if (!all(p3_ineq(x)<=p3_ineq_ub) & all(p3_ineq(x)>=p3_ineq_lb)) {\n      return (NA)\n    }\n  }\n   -1 * (x[1]^3 + 5*x[2] - 2^x[3])  \n}\n\np3_x <- seq(-50,50,length=50)\np3_y <- seq(-50,50,length=50)\np3_z <- seq(-50,50,length=50)",
      "line_count": 19
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "plot_4d(p3_objective,p3_x,p3_y,p3_z,slide_axis = \"x\")",
      "line_count": 1
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "plot_4d(p3_objective,p3_x,p3_y,p3_z,slide_axis = \"y\")",
      "line_count": 1
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "plot_4d(p3_objective,p3_x,p3_y,p3_z,slide_axis = \"z\")",
      "line_count": 1
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "klein <- function(x) {\n  (x[1]^2+x[2]^2+x[3]^2+2*x[2]-1)*((x[1]^2+x[2]^2+x[3]^2-2*x[2]-1)^2-8*x[3]^2) + 16*x[1]*x[3]*(x[1]^2+x[2]^2+x[3]^2-2*x[2]-1)\n}\nklein_x <- seq(-1,1,length=50)\nklein_y <- seq(-1,1,length=50)\nklein_z <- seq(-1,1,length=50)",
      "line_count": 6
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "plot_4d(klein, klein_x, klein_y, klein_z, slide_axis = \"x\")",
      "line_count": 1
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "plot_4d(klein, klein_x, klein_y, klein_z, slide_axis = \"y\")",
      "line_count": 1
    },
    {
      "section": "Time-varying surface embedding of 4D manifolds in 3D",
      "code": "plot_4d(klein, klein_x, klein_y, klein_z, slide_axis = \"z\")",
      "line_count": 1
    }
  ]
}