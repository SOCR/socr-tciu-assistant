{
  "metadata": {
    "created_at": "2024-11-30T13:46:17.587208",
    "total_sections": 2,
    "total_code_chunks": 5,
    "total_tables": 3,
    "r_libraries": [
      "brainR",
      "cubelyr",
      "dplyr",
      "ggplot2",
      "plotly",
      "reshape2"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"TEST Data Science and Predictive Analytics\"\nsubtitle: \"<h2><u>Introduction</u></h2>\"\nauthor: \"<h3>Ivo Dinov</h3>\"\ndate: \"`r format(Sys.time(), '%B %Y')`\"\ntags: [DSPA, SOCR, MIDAS, Big Data, Predictive Analytics] \noutput:\n  html_document:\n    toc: true\n\noutput:\n  pdf_document:\n    toc: true\n    toc_depth: 2\n\noutput:\n  html_document:\n    toc: true\n    toc_depth: 2\n    dev: svg\n\noutput:\n  word_document:\n    toc: true\n    toc_depth: 2\n    dev: 'svg'",
      "word_count": 52
    },
    {
      "title": "This Demo is just a DSPA to PDF, HTML, and DOCX Testing of *SVG* Dynamic Content!",
      "content": "## Table test\n\nThere exist substantial differences between different types of computational environments for data wrangling, preprocessing, analytics, visualization and interpretation. The table below provides some rough comparisons between some of the most popular data computational platforms. With the exception of *ComputeTime*, higher scores represent better performance within the specific category. Note that these are just estimates and the scales are not normalized between categories. \n\n### Link/Bullets tests\n\n *\t[UCLA Stats Software Comparison](http://stats.idre.ucla.edu/other/mult-pkg/whatstat/)\n *\t[Wikipedia Stats Software Comparison](https://en.wikipedia.org/wiki/Comparison_of_statistical_packages)\n * [NASA Comparison of Python, Julia, R, Matlab and IDL](https://modelingguru.nasa.gov/docs/DOC-2625).\n\n\n## 2D SVG Graph\n\n\n\n## 2D SVG Image\n\n\n## 2.5D SVG Ortographic Plot\n\n\n## 3D SVG Scene\n\n(not rendered to reduce file-size!)",
      "word_count": 110
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "    toc_depth: 2\n---",
      "row_count": 2
    },
    {
      "section": "This Demo is just a DSPA to PDF, HTML, and DOCX Testing of *SVG* Dynamic Content!",
      "content": "Statistical Software |             Advantages              | Disadvantages\n---------------------|-------------------------------------|--------------\nR\t|\tR is actively maintained ($\\ge 100,000$ developers, $\\ge 15K$ packages). Excellent connectivity to various types of data and other systems. Versatile for solving problems in many domains. It's free, open-source code. Anybody can access/review/extend the source code. R is very stable and reliable. If you change or redistribute the R source code, you have to make those changes available for anybody else to use. R runs anywhere (platform agnostic). Extensibility: R supports extensions, e.g., for data manipulation, statistical modeling, and graphics. Active and engaged community supports R. Unparalleled question-and-answer (Q&A) websites. R connects with other languages (Java/C/JavaScript/Python/Fortran) & database systems, and other programs, SAS, SPSS, etc. Other packages have add-ons to connect with R. SPSS has incorporated a link to R, and SAS has protocols to move data and graphics between the two packages.  | Mostly scripting language. Steeper learning curve\nSAS | Large datasets. Commonly used in business & Government  | Expensive. Somewhat dated programming language. Expensive/proprietary \nStata |  Easy statistical analyses  | Mostly classical stats\nSPSS  | Appropriate for beginners Simple interfaces | Weak in more cutting edge statistical procedures lacking in robust methods and survey methods",
      "row_count": 6
    },
    {
      "section": "This Demo is just a DSPA to PDF, HTML, and DOCX Testing of *SVG* Dynamic Content!",
      "content": "Language  | OpenSource  | Speed  | ComputeTime  | LibraryExtent  | EaseOfEntry  | Costs  | Interoperability\n----------|-------------|--------|-----------|-------|-------|--------| -----\nPython  | Yes  | 16  | 62  | 80  | 85  | 10  | 90\nJulia  | Yes  | 2941  | 0.34  | 100  | 30  | 10  | 90\nR  | Yes  | 1  | 745  | 100  | 80  | 15  | 90\nIDL  | No  | 67  | 14.77  | 50  | 88  | 100  | 20\nMatlab  | No  | 147  | 6.8  | 75  | 95  | 100  | 20\nScala  | Yes  | 1428  | 0.7  | 50  | 30  | 20  | 40\nC  | Yes  | 1818  | 0.55  | 100  | 30  | 10  | 99\nFortran  | Yes  | 1315  | 0.76  | 95  | 25  | 15  | 95 ",
      "row_count": 10
    }
  ],
  "r_code": [
    {
      "section": "This Demo is just a DSPA to PDF, HTML, and DOCX Testing of *SVG* Dynamic Content!",
      "code": "knitr::opts_chunk$set(fig.width=8, fig.height=8, dev = 'svg') # set output device to svg",
      "line_count": 1
    },
    {
      "section": "This Demo is just a DSPA to PDF, HTML, and DOCX Testing of *SVG* Dynamic Content!",
      "code": "# engine='tikz', fig.ext = 'svg'\n# library(ggplot2)\n# library(reshape2)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(plotly)\n\nrmarkdown::pandoc_version()\n\nData_R_SAS_SPSS_Pubs <- \n  read.csv('https://umich.instructure.com/files/2361245/download?download_frd=1', header=T)\ndf <- data.frame(Data_R_SAS_SPSS_Pubs) \n# convert to long format (http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/) \n# df <- melt(df ,  id.vars = 'Year', variable.name = 'Software') \n# ggplot(data=df, aes(x=Year, y=value, color=Software, group = Software)) + \n#   geom_line(size=4) + labs(x='Year', y='Paper Software Citations') +\n#   ggtitle(\"Manuscript Citations of Software Use (1995-2015)\") +\n#   theme(legend.position=c(0.1,0.8), \n#         legend.direction=\"vertical\",\n#         axis.text.x = element_text(angle = 45, hjust = 1),\n#         plot.title = element_text(hjust = 0.5))\n\nplot_ly(df, x = ~Year)  %>%\n  add_trace(y = ~R, name = 'R', mode = 'lines+markers') %>%\n  add_trace(y = ~SAS, name = 'SAS', mode = 'lines+markers') %>%\n  add_trace(y = ~SPSS, name = 'SPSS', mode = 'lines+markers') %>% \n  layout(title=\"Manuscript Citations of Software Use (1995-2015)\", legend = list(orientation = 'h'))",
      "line_count": 27
    },
    {
      "section": "This Demo is just a DSPA to PDF, HTML, and DOCX Testing of *SVG* Dynamic Content!",
      "code": "library(brainR)\n#load the sMRI data (same as in Problem 1)\n# 3D sMRI data: http://socr.umich.edu/HTML5/BrainViewer/data/ABIDE_MRI_MPRAGE_peds_defaced.nii.gz\nbrainURL <- \"http://socr.umich.edu/HTML5/BrainViewer/data/ABIDE_MRI_MPRAGE_peds_defaced.nii.gz\"\nbrainFile <- file.path(tempdir(), \"ABIDE_MRI_MPRAGE_peds_defaced.nii.gz\")\ndownload.file(brainURL, dest=brainFile, quiet=TRUE)\nbrainVolume <- readNIfTI(brainFile, reorient=FALSE)\n\nbrainVolDims <- dim(brainVolume); brainVolDims\n\n# get the mid-axial slice index\nmidZ = brainVolDims[3] / 2; midZ\n\n# plot 2D sMRI slice\nimage(brainVolume[,, midZ], asp=1, col = hcl.colors(12, \"YlOrRd\", rev = TRUE)) # Hot-metal",
      "line_count": 15
    },
    {
      "section": "This Demo is just a DSPA to PDF, HTML, and DOCX Testing of *SVG* Dynamic Content!",
      "code": "##### 3D   , fig.retina = 2\n## install.packages(\"cubelyr\")\northographic(brainVolume, xyz=c(95,108,115))  # , zlim=range(brainVolume)*0.9) # 3D",
      "line_count": 3
    },
    {
      "section": "This Demo is just a DSPA to PDF, HTML, and DOCX Testing of *SVG* Dynamic Content!",
      "code": "library(cubelyr)\nlibrary(dplyr)\nlibrary(plotly)\n# subsample the large 3D volume\nsmallBrainVolume <- brainVolume[\n  seq.int(from=1,to=dim(brainVolume)[1], length.out=dim(brainVolume)[1]/10), # X\n  seq.int(from=1,to=dim(brainVolume)[2], length.out=dim(brainVolume)[2]/10), # Y\n  seq.int(from=1,to=dim(brainVolume)[3], length.out=dim(brainVolume)[3]/10)] # Z\n\n# convert volume to 3D array with named dimensions, so we can use cubelyr::as.tbl_cube()\ndimnames(smallBrainVolume) <- list(\"X\" = sprintf(\"%d\", 1:dim(smallBrainVolume)[1]),\n  \"Y\" = sprintf(\"%d\", 1:dim(smallBrainVolume)[2]),\n  \"Z\" = sprintf(\"%d\", 1:dim(smallBrainVolume)[3]))\nbrain3D_cube <- as.tbl_cube(smallBrainVolume)\nbrain2D_df <- as_tibble(brain3D_cube)\n   \nplot_ly(data=brain2D_df, x=~X, y=~Y, z=~Z, color=~smallBrainVolume,\n        type=\"scatter3d\", mode=\"markers\", opacity=0.05, name=~paste0(\"Intensity=\",smallBrainVolume)) %>%\n  layout(title=\"MRI Brain 3D Volume (coarse resolution)\",\n         scene = list(xaxis=list(title=\"x\"), yaxis=list(title=\"y\"), zaxis=list(title=\"z\"))) %>% hide_colorbar()",
      "line_count": 20
    }
  ]
}