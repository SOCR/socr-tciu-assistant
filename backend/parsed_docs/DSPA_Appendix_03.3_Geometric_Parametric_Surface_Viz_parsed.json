{
  "metadata": {
    "created_at": "2024-11-30T13:46:16.996575",
    "total_sections": 3,
    "total_code_chunks": 3,
    "total_tables": 1,
    "r_libraries": [
      "freesurfer",
      "geomorph",
      "plotly",
      "scales"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"DSPA2: Data Science and Predictive Analytics (UMich HS650)\"\nsubtitle: \"<h2><u>Geometric and Parametric Surface Visualization</u></h2>\"\nauthor: \"<h3>SOCR/MIDAS (Ivo Dinov)</h3>\"\ndate: \"`r format(Sys.time(), '%B %Y')`\"\ntags: [DSPA, SOCR, MIDAS, Big Data, Predictive Analytics] \noutput:\n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: ../SOCR_header.html\n    toc: true\n    number_sections: true\n    toc_depth: 2\n    toc_float:\n      collapsed: false\n\n\nThis DSPA section Appendix.3.3 (Brain Surfaces) is part of the [DSPA Appendix on visualization of geometric and parametric surfaces](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03_Geometric_Parametric_Surface_Viz.html). This DSPA Appendix (3) covers the following 3 topics:\n\n - [3.1. Geometric Primitive Surfaces with and without Boundaries](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.1_Geometric_Parametric_Surface_Viz.html)\n    + 1.1 Saddle Point Surface\n    + 1.2 Geometric Shapes: 3D Spherical Parameterization\n    + 1.3 Torus Surface\n - [3.2. Non-Orientable Surfaces](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.2_Geometric_Parametric_Surface_Viz.html)\n    + 2.1 Mobius Band Triangulation\n    + 2.2 Klein Bottle\n - 3.3. Brain Surfaces (this section)\n    + 3.1 Human Brain\n    + 3.2 Rodent Brain\n - 3.4 [Time-varying surface embedding of 4D manifolds in 3D](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03.4_Geometric_Parametric_Surface_Viz.html)",
      "word_count": 141
    },
    {
      "title": "Brain Surfaces",
      "content": "Oftentimes, we are interested in modeling the boundaries of complex 3D solids using 2D manifolds. One of these interesting examples is reconstructing the mammalian cortical brain surface, e.g., rodents or humans. Below, we demonstrate two examples of loading precomputed, i.e., triangulated, surface models into R/RStudio for rendering and visualization using `plotly`. You can also see the [SOCR Brian Viewer](https://socr.umich.edu/HTML5/BrainViewer/), which provides a more complex WebGL mechanism for visualization and interrogation of complex brain surfaces, models and stereotactic volumes. \n\n## Human Brain\n\nThere a many different software tools that can be used to model the human brain cortical surface using [3D sMRI data]( https://en.wikipedia.org/wiki/Magnetic_resonance_imaging), e.g., [Freesurfer](https://surfer.nmr.mgh.harvard.edu) and [BrainSuite](https://brainsuite.org). Below we demonstrate an example using a Freesurfer surface model using the [FS pial](http://www.grahamwideman.com/gw/brain/fs/surfacefileformats.htm) surface file format.\n\n\n## Rodent Brain\n\nThis final example illustrates a simpler model of a rodent brain represented as a [PLY](https://en.wikipedia.org/wiki/PLY_(file_format)) surface model.",
      "word_count": 144
    },
    {
      "title": "References",
      "content": "- [Back to the DSPA visualization of geometric and parametric surfaces Appendix](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_03_Geometric_Parametric_Surface_Viz.html).\n - Additional [brain surface data are available online](https://www.freesurfer.net/pub/data/tutorial_data/long-tutorial/).\n - [R plot_ly documentation and details are available here](https://plot.ly/r/).\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"https://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number \n\t\t\t\t<img class=\"statcounter\" src=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" alt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"https://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"https://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"https://www.statcounter.com/counter/counter.js\"></script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 124
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "      smooth_scroll: true\n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Main",
      "code": "knitr::opts_chunk$set(echo = TRUE)",
      "line_count": 1
    },
    {
      "section": "Brain Surfaces",
      "code": "rm(list=ls())  # clean the environment\nlibrary(plotly)\nlibrary(geomorph)\n# install.packages(\"freesurfer\")\n# https://github.com/joebathelt/ZDHHC9_connectome\n# FS Data/Surfaces: http://www.freesurfer.net/pub/data/tutorial_data/long-tutorial/OAS2_0185_MR1.long.OAS2_0185/surf/\n\nlibrary(freesurfer)\n\nfs <- freesurfer_read_surf('https://socr.umich.edu/data/DSPA/surfaces/lh.pial')\ncolnames(fs$vertices) <- c('x', 'y', 'z')\n# str(fs)\nx <- fs$vertices[ , 'x']\ny <- fs$vertices[ , 'y']\nz <- fs$vertices[ , 'z']\n  \nmat <- matrix(c(x,y,z), ncol=3, dimnames=list(NULL,c(\"x\",\"y\",\"z\")))\n\n# plot_ly(x = x, y = y, z = z, type = \"scatter3d\", \n#        mode = \"markers\", marker = list(size = 3))\n\n# now figure out the colormap for each 2-cell (face) by averaging\n# the z-coordinates, mat[ , 3], of all 3 vertices of the face\nzmean <- apply(t(fs$faces),MARGIN=2,function(row){mean(mat[row,3])})\n# length(zmean); length(mesh$it[1,]) # equal?\n# str(zmean); str(mat[,3]); str(mesh) # check structures\n \nlibrary(scales)\n# color each 2-cell (face), ideally, this would be cortical thickness or another 4D values (e.g., p-value, curvature, etc.)\nfacecolor = colour_ramp(\n  colorRampPalette(c(\"light blue\", \"gold\"))(5)\n)(rescale(x=zmean))\n\n#facecolor = colour_ramp(\n#   colorRampPalette(c(\"navy blue\", \"gold\"))(5)\n# )(rescale(x=fs$faces[,4]))\n#length(fs$faces[,4])\n\nplot_ly(\n  x = x, y = y, z = z,\n  i = fs$faces[ , 1], j = fs$faces[ , 2], k = fs$faces[ , 3],\n  facecolor = facecolor,\n  type = \"mesh3d\",\n  opacity = 0.7,  # change opacity to make see through the surface\n  contour=list(show=TRUE, color=\"#000\", width=15)\n)",
      "line_count": 46
    },
    {
      "section": "Brain Surfaces",
      "code": "# library(\"plotly\")\nplyFile <- 'https://socr.umich.edu/data/DSPA/surfaces/Mouse_Brain.ply'\ndest <- basename(plyFile)\nif (!file.exists(dest)) {\n  download.file(plyFile, dest)\n}\n\n# For ASCII PLY data: \nmesh <- geomorph::read.ply(dest, ShowSpecimen = F)\n\n# For Binary PLY data use: mesh <- vcgPlyRead(dest, updateNormals = TRUE, clean = TRUE)\n\n# see getS3method(\"shade3d\", \"mesh3d\") for details on how to plot \n\n# plot point cloud\nx <- mesh$vb[\"xpts\",]\ny <- mesh$vb[\"ypts\",]\nz <- mesh$vb[\"zpts\",]\nmat <- matrix(c(x,y,z), ncol=3, dimnames=list(NULL,c(\"x\",\"y\",\"z\")))\n\n# plot_ly(x = x, y = y, z = z, type = \"scatter3d\", \n#        mode = \"markers\", marker = list(size = 3))\n\n# now figure out the colormap for each 2-cell (face) by averaging\n# the z-coordinates, mat[ , 3], of all 3 vertices of the face\nzmean <- apply(t(mesh$it),MARGIN=1,function(row){mean(mat[row,3])})\n# length(zmean); length(mesh$it[1,]) # equal?\n# str(zmean); str(mat[,3]); str(mesh) # check structures\n \nlibrary(scales)\n# color each 2-cell (face)\nfacecolor = colour_ramp(\n  colorRampPalette(c(\"light blue\", \"gold\"))(5)\n)(rescale(x=zmean))\n\nplot_ly(\n  x = x, y = y, z = -z,  # flip in z-direction to show anatomically\n  i = mesh$it[1,]-1, j = mesh$it[2,]-1, k = mesh$it[3,]-1, # JS indices start at zero\n  facecolor = facecolor,\n  type = \"mesh3d\",\n  opacity = 0.8,\n  contour=list(show=TRUE, color=\"#000\", width=15)\n)",
      "line_count": 43
    }
  ]
}