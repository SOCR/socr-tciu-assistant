{
  "metadata": {
    "created_at": "2024-11-30T13:46:17.365856",
    "total_sections": 1,
    "total_code_chunks": 1,
    "total_tables": 1,
    "r_libraries": [
      "dplyr",
      "plotly",
      "purrr",
      "tidyr"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"DSPA2: Data Science and Predictive Analytics (UMich HS650)\"\nsubtitle: \"<u>Appendix 13: Mathematical Modeling and Data Science Analytics of the Duration of Daylight (Part 2)</u>\"\nauthor: \"SOCR/MIDAS (Ivo Dinov)\"\ndate: \"`r format(Sys.time(), '%B %d, %Y')`\"\ntags: [DSPA, SOCR, MIDAS, Big Data, Predictive Analytics] \noutput:\n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: SOCR_header.html\n    toc: true\n    number_sections: true\n    toc_depth: 3\n    toc_float:\n      collapsed: false\n      smooth_scroll: true\n    code_folding: show\t\nExpanding on [other DSPA2 appendices)](https://dspa2.predictive.space/),\nthis [DSPA2 appendix](https://www.socr.umich.edu/DSPA2/) covers a discussion of building a mathematical model the length/duration of daylight and demonstrating supporting data science analytics for predicting the exact length of daylight (sunset to sunrise) for a given day, longitude, latitude, and altitude. \n\n**Note**: [This Part 2 of the DSPA Appendix 13 (Mathematical Modeling and Data Science Analytics of the Duration of Daylight)](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_13_DaylightMathModeling_Part2.html) is intentionally separated from the [main Part 1 of the DSPA Appendix 13 (Mathematical Modeling and Data Science Analytics of the Duration of Daylight)](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_13_DaylightMathModeling.html). It includes large data and JavaScript code supporting the plotly app. It includes the interactive 3D temporal animation app that allows manual navigation across longitude, latitude, altitude and time (daily).\n\n\n\n\n[This Part 2 of the DSPA Appendix 13 (Mathematical Modeling and Data Science Analytics of the Duration of Daylight)](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_13_DaylightMathModeling_Part2.html) is intentionally separated from the [main Part 1 of the DSPA Appendix 13 (Mathematical Modeling and Data Science Analytics of the Duration of Daylight)](https://socr.umich.edu/DSPA2/DSPA2_notes/DSPA_Appendix_13_DaylightMathModeling.html). It includes large data and JavaScript code supporting the `plotly` app. It includes the interactive 3D temporal animation app that allows manual navigation across longitude, latitude, altitude and time (daily).\n\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"https://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number \n\t\t\t\t<img class=\"statcounter\" src=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" alt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"https://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"https://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"https://www.statcounter.com/counter/counter.js\"></script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 352
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "    self_contained: yes\t\n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Main",
      "code": "# Load necessary libraries\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(plotly)\nlibrary(tidyr)\n\n# Assume location_data is the pre-existing data frame with columns: latitude, longitude, altitude\n# Example structure of location_data:\n# location_data <- data.frame(\n#   latitude = c(-90, -80, -70, -60, -50),\n#   longitude = c(-180, -180, -180, -180, -180),\n#   altitude = c(0, 0, 0, 0, 0)\n# )\n\nlocation_data <- # download the low geospatial resolution lon-lat-alt data\n  read.csv(\"https://umich.instructure.com/files/37840607/download?download_frd=1\", \n            header = TRUE)\n\n# Define the days of the year\ndays <- 1:365\n\n# Function to calculate daylight duration, including altitude\ndaylight_duration <- function(latitude, day_of_year, altitude) {\n  if (is.na(latitude) || is.na(day_of_year) || is.na(altitude)) {\n    return(NA)  # Return NA if any input is missing\n  }\n  \n  R <- 6371000  # Earth's radius in meters\n  \n  # Solar declination angle\n  declination <- 23.44 * sin((2 * pi / 365) * (day_of_year - 81))\n  \n  # Altitude correction in radians, only for positive altitudes\n  if (altitude > 0) {\n    altitude_correction <- -sqrt(2 * altitude / R) * (180 / pi)\n  } else {\n    altitude_correction <- 0  # No correction for sea level or below\n  }\n  \n  # Calculate hour angle argument, clamped within [-1, 1]\n  hour_angle_arg <- -tan(latitude * pi / 180) * tan(declination * pi / 180) -\n    sin(altitude_correction * pi / 180)\n  hour_angle_arg <- pmax(pmin(hour_angle_arg, 1), -1)\n  \n  # Calculate hour angle\n  hour_angle <- acos(hour_angle_arg)\n  \n  # Calculate daylight duration in hours\n  daylight_hours <- (2 * hour_angle) / (pi / 12)  # Convert radians to hours\n  \n  # Handle cases of 24-hour daylight or darkness\n  if (hour_angle_arg <= -1) { daylight_hours <- 24  # Continuous daylight\n  } else if (hour_angle_arg >= 1) { daylight_hours <- 0   # Continuous night\n  }\n  \n  return(daylight_hours)\n}\n\n\n# Calculate daylight duration for each (latitude, longitude, day) combination\ndaylight_data <- location_data %>%  rowwise() %>%\n  mutate(daylight = list(sapply(days, function(day) \n    daylight_duration(latitude, day, altitude)))) %>%\n  unnest_wider(daylight, names_sep = \"_\") %>% ungroup()\n\n# Convert days of the year to actual dates\n# Define the starting date (e.g., January 1, 2024)\nstart_date <- as.Date(\"2024-01-01\")\n\n# Convert days of the year to actual dates\ndaylight_data_long <- daylight_data %>%\n  pivot_longer(cols = starts_with(\"daylight_\"), names_to = \"day\", \n               values_to = \"daylight_hours\") %>%\n  mutate(day = as.numeric(gsub(\"daylight_\", \"\", day)))  # Extract numeric day\n\n\n# daylight_data_long <- daylight_data_long %>%\n#   mutate(date = start_date + (day - 1))  # Convert day number to actual date\n\n# Create a combined label for \"Day X - Date\"\ndaylight_data_long <- daylight_data_long %>%\n  mutate(day_label = paste(\"Day\", day, \"-\", format(date, \"%B %d, %Y\")))  # Combine day number and date\n\n# Define the starting date (e.g., January 1, 2024)\nstart_date <- as.Date(\"2024-01-01\")\n\n# Convert days of the year to actual dates\ndaylight_data_long <- daylight_data_long %>%\n  mutate(date = start_date + (day - 1))  # Convert day number to actual date\n\n# Create a combined label for \"Day X - Date\"\ndaylight_data_long <- daylight_data_long %>%\n  mutate(day_label = paste(\"Day\", day, \"-\", format(date, \"%B %d, %Y\")))  # Combine day number and date\n# Format the date as \"Month Day, Year\" for display in the tooltip\ndaylight_data_long <- daylight_data_long %>%\n  mutate(date_text = format(date, \"%B %d, %Y\"))  # Format as \"Month Day, Year\"\n\ng2 <- list(projection = list(type = 'orthographic'),\n           showland = TRUE, landcolor = \"lightgray\", lakecolor = \"lightblue\")\n\n# Plotly code with updated frame to display day and date in slider\nfig <- plot_ly(data = daylight_data_long, type = 'scattergeo', mode = 'markers',\n  lat=~latitude, lon=~longitude, frame=~day_label,  # Use combined day and date label for frame\n  marker = list(size = 6, opacity = 0.95), color = ~daylight_hours, colors = \"RdYlBu\",\n  customdata = ~altitude,  # Altitude data for tooltip\n  hovertemplate = paste('<i>Latitude</i>: %{lat:.2f}', '<br><i>Longitude</i>: %{lon:.2f}',\n                        '<br><i>Altitude (m)</i>: %{customdata:.2f}',  \n                        '<br><i>Date</i>: %{text}',  # Display formatted date\n                        '<br><i>Daylight Hours</i>: %{marker.color:.2f}',\n                        '<extra></extra>'),\n  text = ~date_text,  # Assign date_text to the `text` property for hovertemplate\n  showlegend = FALSE) %>%\n  layout(geo = g2,\n    title = list(text = \"Daylight Length Over Earth Throughout the Year\"),  # Set title in list format\n    coloraxis = list(colorbar = list(title = \"Daylight Hours\"))  # Adjust coloraxis for colorbar\n  )\n\nfig  # Show the plot",
      "line_count": 118
    }
  ]
}