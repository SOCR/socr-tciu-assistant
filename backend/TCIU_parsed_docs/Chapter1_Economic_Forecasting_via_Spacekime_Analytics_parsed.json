{
  "metadata": {
    "created_at": "2025-05-15T17:01:01.106368",
    "total_sections": 2,
    "total_code_chunks": 26,
    "total_tables": 1,
    "r_libraries": [
      "TSplotly",
      "dplyr",
      "forecast",
      "ggplot2",
      "plotly",
      "reshape2",
      "tidyr",
      "zoo"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"Economic Forecasting via Spacekime Analytics\"\nsubtitle: \"[Back To TCIU Contents](http://tciu.predictive.space/)\"\nauthor: \"SOCR Team \"\ndate: \"`r format(Sys.time(),'%m/%d/%Y')`\"\noutput: \n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: TCIU_header.html\n    toc: true\n    number_sections: true\n    toc_depth: 2\n    toc_float:\n      collapsed: false\n      smooth_scroll: true",
      "word_count": 39
    },
    {
      "title": "TCIU Kime ARIMAX on ED Econ Data",
      "content": "## Data Source Type\n\n\n\n\n\n## Figure 1.9\n\nFirst, plot on same grid, each series colored differently\n\nInteractive plot here\n\n\nNext, we want to take this example one step further and demonstrate the foundation of spacekime analytics using one oversimplified example that illustrates the tradeoffs between traditional spacetime inference and their spacekime analytic counterparts.\n\n\n\nFit model only on 39 years (1978-2016), and Evaluate on testing data (2017-2018)\n\n\n## Figure 1.10\n\nPlot ICS training Data, Testing ICS and Predicted ICS\n\n\nInteractive Plot here.\n\n\nZoom in on a smaller interval (4-years prior and 2-years forecasting)\n\n\nInteractive plot here\n\nTransform all 6 predictors (X) and outcome (Y) series to k-space (Fourier domain)\nTransform entire Xreg matrix (12*39 = 468 PLUS 12*2 = 24, a total of 492 time points: Training + Testing)\nBut transform only the Training Y outcome (12*39 = 468 time points: Training)\n   \n\nExamine the Kime-direction Distributions of the Phases for all 7 features (predictors + outcome)\n\n\n## Figure 1.12\n\nMap the value as our x variable, and use facet_wrap to separate by the key column\n\n\n1. Perform the Space-kime transform separately for the X_test data\n\n2. Nil-Phase reconstruction, invert back to spacetime the mag_FT_MCSI_data[ , i] & mag_FT_X_test [, i] signals with nil-phase\n\n3. Perform ARIMAX modeling on IFT_NilPhase_FT_MCSI_data; report (p,d,q) params and quality metrics AIC/BIC\n\n\n4. Scrambled-Phase reconstruction\n   Invert back to spacetime the mag_FT_MCSI_data[ , i] signal using scrambled-phases\n   randomly shuffle the rows of the Phases-matrix (Training & Testing XReg Data)\n\n\n5. Perform ARIMAX modeling on IFT_ScramblePhase_FT_MCSI_data; report (p,d,q) params and quality metrics AIC/BIC\n\n\n6. Loaded-Phase reconstruction: Phase = $\\pi$/8 + Phase\n   Invert back to spacetime the mag_FT_MCSI_data[ , i] signal using Loaded-phases\n   define a pi-wrapper calculator to ensure phase-arithmetic stays within [-pi : pi)\n\n\n7. Perform ARIMAX modeling on IFT_LoadedPhase_FT_MCSI_data; report (p,d,q) params and quality metrics AIC/BIC\n\n\n## Figure 1.13\n\n8. Final VIZ: Zoom in on a smaller interval\n\nInteractive plot here\n\nFull 41-year plot\n\n\nInteractive plot here\n\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"http://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number <img class=\"statcounter\" src=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" alt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"http://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"http://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"https://www.statcounter.com/counter/counter.js\"></script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 414
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "    code_folding: hide\n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Main",
      "code": "Sys.setlocale(locale = 'English')\nknitr::opts_chunk$set(echo = TRUE, warings = FALSE)",
      "line_count": 2
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "# TSplotly\n# https://rdrr.io/cran/TSplotly/f/vignettes/TSplotly.Rmd\n# https://github.com/QJoshua/TSplotly\n# install.packages(\"C:/Users/Dinov/Desktop/TSplotly_1.1.0.tar.gz\", repos = NULL, type = \"source\")\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(forecast)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(tidyr)\n# library(TSplotly)\nlibrary(zoo)\nload(\"MCSI.RData\")\n# dim(MCSI_Data)\t\n# [1] 279242    107\n\n# extract features\n# ICS                INDEX OF CONSUMER SENTIMENT\n# ICC                INDEX OF CURRENT ECONOMIC CONDITIONS                \n# GOVT               GOVERNMENT ECONOMIC POLICY\n# DUR                DURABLES BUYING ATTITUDES \n# HOM                HOME BUYING ATTITUDES\n# CAR                VEHICLE BUYING ATTITUDES\n# INCOME             TOTAL HOUSEHOLD INCOME - CURRENT DOLLARS\n# AGE                AGE OF RESPONDENT\n# EDUC               EDUCATION OF RESPONDENT\n\n\nDT::datatable(head(MCSI_Data,1000), fillContainer = TRUE)",
      "line_count": 31
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "MCSI_Data_short <- \n  MCSI_Data[ , which(names(MCSI_Data) %in% \n                       c(\"YYYYMM\", \"ICS\", \"ICC\", \"GOVT\", \"DUR\",\n                         \"HOM\", \"CAR\", \"INCOME\", \"AGE\", \"EDUC\"))]\n# dim(MCSI_Data_short)\n# [1] 279242      10\n# Compute the monthly averages across all participants\nMCSI_Data_monthAvg <- aggregate(.~YYYYMM, data = MCSI_Data_short, mean)\n# dim(MCSI_Data_monthAvg)\n# [1] 492  10\n# colnames(MCSI_Data_monthAvg)\n\n# convert YYYYMM to Date\nMCSI_Data_monthAvg$YYYYMM <- \n  as.Date(as.character(\n    as.POSIXct(paste0(as.character(MCSI_Data_monthAvg$YYYYMM),\"01\"), format = \"%Y%m%d\")))\n# head(MCSI_Data_monthAvg$YYYYMM)\n# View(MCSI_Data_monthAvg)\n\n# plot all features on the same plot (across time/months)\n\nMCSI_Data_monthAvg_melt <- \n  melt(MCSI_Data_monthAvg , id.vars = 'YYYYMM', variable.name = 'series')",
      "line_count": 23
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "# good if the series have same scale\n# ggplot(MCSI_Data_monthAvg_melt, aes(YYYYMM, value), log10=\"y\") + \n# geom_line(aes(colour = series)) \n# Exclude INCOME as it's too large!\nggplot(MCSI_Data_monthAvg_melt[MCSI_Data_monthAvg_melt$series!=\"INCOME\", ], \n       aes(YYYYMM, value)) + \n    geom_line(aes(linetype=series, colour = series), size=2) +\n    geom_point(aes(shape=series, colour = series), size=0.3) +\n      # geom_line(aes(colour = series)) +\n    geom_smooth(aes(colour = series), se = TRUE) +\n    coord_trans(y=\"log10\") +\n    xlab(\"Time (monthly)\") + ylab(\"Index Values (log-scale)\") +\n    # scale_x_date(labels = date_label(\"%m-%Y\")) +\n    scale_x_date(date_breaks = \"12 month\", date_labels =  \"%m-%Y\")  +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1),\n          text = element_text(size=20))+\n    theme(legend.position=\"top\")",
      "line_count": 17
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "updatemenus <- list(\n  list(\n    xanchor=\"left\",\n    yanchor=\"top\",\n    active = -1,\n    type= 'buttons',\n    buttons = list(\n      list(\n        label = \"ALL\",\n        method = \"update\",\n        args = list(list(visible = c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE)),\n                    list(title = \"All Indexes\"))),\n      list(\n        label = \"ICS\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE)),\n                    list(title = \"ICS\"))),\n      list(\n        label = \"ICC\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE)),\n                    list(title = \"ICC\"))),\n      list(\n        label = \"GOVT\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE,FALSE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE)),\n                    list(title = \"GOVT\"))),\n      list(\n        label = \"DUR\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE,FALSE)),\n                    list(title = \"DUR\"))),\n      list(\n        label = \"HOM\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE)),\n                    list(title = \"HOM\"))),\n      list(\n        label = \"CAR\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)),\n                    list(title = \"CAR\"))),\n      list(\n        label = \"AGE\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE)),\n                    list(title = \"AGE\"))),\n      list(\n        label = \"EDUC\",\n        method = \"update\",\n        args = list(list(visible = c(TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE)),\n                    list(title = \"EDUC\")))\n      )\n  )\n)\n\n# https://github.com/SOCR/TCIU/blob/master/package/TSplotly/TSplotly/R/GGtoPY.R\nGGtoPY <- function(dataframe,NAME=NULL,X=NULL,Y=NULL) {\n  levelnames<-levels(dataframe[,which(colnames(dataframe)==NAME)])\n  NAmatrix<-matrix(NA,nrow =nrow(dataframe[dataframe[,which(colnames(dataframe)==NAME)]==levelnames[1],]) ,ncol = length(levelnames))\n  NAmatrix<-as.data.frame(NAmatrix)\n  colnames(NAmatrix)<-levelnames\n  rownames(NAmatrix)<-dataframe[dataframe[,which(colnames(dataframe)==NAME)]==levelnames[1],][,which(colnames(dataframe)==X)]\n  for (i in 1:length(levelnames)) {\n    NAmatrix[,i]<-dataframe[dataframe[,which(colnames(dataframe)==NAME)]==levelnames[i],][,which(colnames(dataframe)==Y)]\n  }\n  return(NAmatrix)\n}\n\nPYdf<-GGtoPY(MCSI_Data_monthAvg_melt[MCSI_Data_monthAvg_melt$series!=\"INCOME\", ],NAME=\"series\",X=\"YYYYMM\",Y=\"value\")\nPYdf$INCOME<-NULL\nPYdf<-log10(PYdf)\nplot_ly(type=\"scatter\",mode=\"lines\")%>%\n  add_lines(x=as.yearmon(rownames(PYdf)),text=rownames(PYdf),y=PYdf$ICS,name=\"ICS\",line=list(color=\"powderblue\"))%>%\n  add_lines(x=as.yearmon(rownames(PYdf)),text=rownames(PYdf),y=PYdf$ICC,name=\"ICC\",line=list(color=\"red\"))%>%\n  add_lines(x=as.yearmon(rownames(PYdf)),text=rownames(PYdf),y=PYdf$GOVT,name=\"GOVT\",line=list(color=\"green\"))%>%\n  add_lines(x=as.yearmon(rownames(PYdf)),text=rownames(PYdf),y=PYdf$DUR,name=\"DUR\",line=list(color=\"orange\"))%>%\n  add_lines(x=as.yearmon(rownames(PYdf)),text=rownames(PYdf),y=PYdf$HOM,name=\"HOM\",line=list(color=\"purple\"))%>%\n  add_lines(x=as.yearmon(rownames(PYdf)),text=rownames(PYdf),y=PYdf$CAR,name=\"CAR\",line=list(color=\"pink\"))%>%\n  add_lines(x=as.yearmon(rownames(PYdf)),text=rownames(PYdf),y=PYdf$AGE,name=\"AGE\",line=list(color=\"brown\"))%>%\n  add_lines(x=as.yearmon(rownames(PYdf)),text=rownames(PYdf),y=PYdf$EDUC,name=\"EDUC\",line=list(color=\"black\"))%>%\n  layout(title= list(text=\"Time series for 8 indexes\",font=list(family = \"Times New Roman\",size = 16,color = \"black\" )),\n           paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',\n           xaxis = list(title =\"Time (monthly)\",\n                        gridcolor = 'rgb(255,255,255)',\n                        showgrid = TRUE,\n                        showline = FALSE,\n                        showticklabels = TRUE,\n                        tickcolor = 'rgb(127,127,127)',\n                        ticks = 'outside',\n                        zeroline = FALSE),\n           yaxis = list(title = \"Index Values (log10-scale)\",\n                        gridcolor = 'rgb(255,255,255)',\n                        showgrid = TRUE,\n                        showline = FALSE,\n                        showticklabels = TRUE,\n                        tickcolor = 'rgb(127,127,127)',\n                        ticks = 'outside',\n                        zeroline = FALSE),\n         updatemenus=updatemenus)",
      "line_count": 100
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "\n# colnames(MCSI_Data_monthAvg)\n\nMCSI_Data_monthAvg_ts <- \n  ts(MCSI_Data_monthAvg, start=c(1978,1), end=c(2018, 12), frequency = 12)\n# class(MCSI_Data_monthAvg_ts)\n# dim(MCSI_Data_monthAvg_ts)\n# [1] 492  10\n# Time-series plots: 41 years * 12 months = 492 time points\nplot.ts(MCSI_Data_monthAvg_ts)\n\nplot(MCSI_Data_monthAvg_ts, plot.type=\"m\")\n",
      "line_count": 13
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "# See MCSI docs: https://data.sca.isr.umich.edu/fetchdoc.php?docid=45121\n# Outcome to Predict: ICS = INDEX OF CONSUMER SENTIMENT\nY <- MCSI_Data_monthAvg$ICS\n\n# Covariates explaining the longitudinal outcome: \n# GOVT, DUR, HOM, CAR, INCOME, EDUC\nX <- cbind(MCSI_Data_monthAvg$GOVT, MCSI_Data_monthAvg$DUR, \n           MCSI_Data_monthAvg$HOM, MCSI_Data_monthAvg$CAR, \n           MCSI_Data_monthAvg$INCOME, MCSI_Data_monthAvg$EDUC)\n\n# Outcome Variable to be modeled, as a time series\nMCSI_Data_monthAvg_ts_Y <- ts(Y, start=c(1978,1), end=c(2018, 12), frequency = 12)\n\npred_length <- 2 * 12 # 2-years of monthly forward forecasting (2017-2018)\nstart_period <- 468  # 39 years (2017-1978)*12",
      "line_count": 15
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "Y_train <- MCSI_Data_monthAvg$ICS[1:(39*12)]\n# length(Y_train)/12\nY_test <- MCSI_Data_monthAvg$ICS[((39*12)+1):length(MCSI_Data_monthAvg$ICS)] \n# length(Y_test)/12\n\n# Training and Testing Data Covariates explaining the longitudinal outcome (Y): \n# GOVT, DUR, HOM, CAR, INCOME, EDUC\nX_train <- \n  as.data.frame(cbind(MCSI_Data_monthAvg$GOVT, MCSI_Data_monthAvg$DUR, \n                      MCSI_Data_monthAvg$HOM, MCSI_Data_monthAvg$CAR, \n                      MCSI_Data_monthAvg$INCOME, MCSI_Data_monthAvg$EDUC))[1:(39*12), ]\n# dim(X_train)\nX_test <- \n  as.data.frame(cbind(MCSI_Data_monthAvg$GOVT, MCSI_Data_monthAvg$DUR, \n                      MCSI_Data_monthAvg$HOM, MCSI_Data_monthAvg$CAR, \n                      MCSI_Data_monthAvg$INCOME,\n                      MCSI_Data_monthAvg$EDUC))[((39*12)+1):length(MCSI_Data_monthAvg$ICS), ]\n# dim(X_test)\n\n# Outcome Variable to be modeled, as a time series\nMCSI_Data_monthAvg_ts_Y_train <- ts(Y_train, start=c(1978,1), end=c(2016, 12), frequency = 12)\nMCSI_Data_monthAvg_ts_Y_test <- ts(Y_test, start=c(2017,1), end=c(2018, 12), frequency = 12)\n\n# Find ARIMAX model\nmodArima_train <- auto.arima(MCSI_Data_monthAvg_ts_Y_train, xreg=as.matrix(X_train))\n\npred2years_ICS <- predict(modArima_train, n.ahead = pred_length, frequency=12, newxreg = X_test)\n\nmodArima_train\n",
      "line_count": 30
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "plot(forecast(modArima_train, xreg = as.matrix(X_test) ), lwd=2, xlab=\"Time\", \n     ylab=\"ICS = INDEX OF CONSUMER SENTIMENT (US)\",\n     main = \"(2017-2018) Forecasting US ICS based on fitting ARIMAX(2,0,1) Model on 1978-2016 data\n      \\n using regression effect estimates of GOVT, DUR, HOM, CAR, INCOME & EDUC\")\nlines(MCSI_Data_monthAvg_ts_Y_test, col = \"red\", lwd = 4, lty=1)  \nlegend(1990, 60, bty=\"n\", legend=c(\"Training ICS Data (1978-2016)\", \n                                   \"ARIMAX-model ICS Forecasting (2017-2018)\",\n                                   \"MCSI Official ICS (2017-2018)\"),\n       col=c(\"black\", \"blue\", \"red\"), \n       lty=c(1,1,1), lwd=c(2,2,4), cex=1.2, x.intersp=0.5, y.intersp=0.7)",
      "line_count": 10
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "# https://github.com/SOCR/TCIU/blob/master/package/TSplotly/TSplotly/R/ADDline.R\n\nADDline <- function(ARIMAmodel=NULL,XREG=NULL,TS=NULL,linetype=\"TS\",Name=NULL) {\n  if(linetype==\"ARIMA\"){\n    tsmodel<-forecast(ARIMAmodel, xreg = XREG)\n    newline<-list(X=as.yearmon(time(tsmodel$x)),TEXT=as.character(as.yearmon(time(tsmodel$x))),Y=tsmodel$mean,NAME=Name)\n  }\n  else if(linetype==\"TS\"){\n    newline<-list(X=as.yearmon(time(TS)),TEXT=as.character(as.yearmon(time(TS))),Y=as.numeric(TS),NAME=Name)\n  }\n  return(newline)\n}\n\nnewline<-ADDline(TS = MCSI_Data_monthAvg_ts_Y_test,linetype = \"TS\",Name = \"MCSI Official ICS (2017-2018)\")\n\n# https://github.com/SOCR/TCIU/blob/master/package/TSplotly/TSplotly/R/TSplot.R\nTSplot<- function(origin_t,ARIMAmodel,XREG=NULL,NEWtitle=\"Result\",Ylab=\"Value\",Xlab=\"Time(Month/Year)\"\n                  ,ts_original=\"original time series\",ts_forecast=\"forecasted time series\",title_size=10) {\n  tsmodel<-forecast(ARIMAmodel, xreg = XREG)\n  if(origin_t==\"all\"){\n    TIME=1\n  }\n  else{\n    TIME=(length(tsmodel$x)-origin_t+1)\n  }\n  includetime<-c(tsmodel$x[TIME:length(tsmodel$x)],rep(NA,length(tsmodel$mean)))\n  includetime2<-c(rep(NA,length(as.yearmon(time(tsmodel$x)[TIME:length(tsmodel$x)]))),tsmodel$mean)\n  includetime3<-c(rep(NA,length(as.yearmon(time(tsmodel$x)[TIME:length(tsmodel$x)]))),tsmodel$lower[,1])\n  includetime4<-c(rep(NA,length(as.yearmon(time(tsmodel$x)[TIME:length(tsmodel$x)]))),tsmodel$upper[,1])\n  includetime5<-c(rep(NA,length(as.yearmon(time(tsmodel$x)[TIME:length(tsmodel$x)]))),tsmodel$lower[,2])\n  includetime6<-c(rep(NA,length(as.yearmon(time(tsmodel$x)[TIME:length(tsmodel$x)]))),tsmodel$upper[,2])\n  alltime<-c(as.yearmon(time(tsmodel$x)[TIME:length(tsmodel$x)]),as.yearmon(time(tsmodel$mean)))\n  TSP<-plot_ly(type=\"scatter\",mode=\"lines\")%>%\n    layout(title= list(text=NEWtitle,font=list(family = \"Times New Roman\",size = title_size,color = \"black\" )),\n           paper_bgcolor='rgb(255,255,255)', plot_bgcolor='rgb(229,229,229)',\n           xaxis = list(title = Xlab,\n                        gridcolor = 'rgb(255,255,255)',\n                        showgrid = TRUE,\n                        showline = FALSE,\n                        showticklabels = TRUE,\n                        tickcolor = 'rgb(127,127,127)',\n                        ticks = 'outside',\n                        zeroline = FALSE),\n           yaxis = list(title = Ylab,\n                        gridcolor = 'rgb(255,255,255)',\n                        showgrid = TRUE,\n                        showline = FALSE,\n                        showticklabels = TRUE,\n                        tickcolor = 'rgb(127,127,127)',\n                        ticks = 'outside',\n                        zeroline = FALSE))%>%\n    add_lines(x=alltime,text=as.character(alltime),y=includetime,name=ts_original,line=list(color=\"green\"))%>%\n    add_lines(x=alltime,text=as.character(alltime),y=includetime5,name=\"95% lower bound\",line=list(color=\"powderblue\"))%>%\n    add_trace(x=alltime,text=as.character(alltime),y=includetime6,type=\"scatter\",mode=\"lines\",line=list(color=\"powderblue\"),fill = 'tonexty',fillcolor=\"powderblue\",name=\"95% upper bound\")%>%\n    add_lines(x=alltime,text=as.character(alltime),y=includetime3,name=\"80% lower bound\",line=list(color=\"lightpink\"))%>%\n    add_trace(x=alltime,text=as.character(alltime),y=includetime4,type=\"scatter\",mode=\"lines\",line=list(color=\"lightpink\"),fill = 'tonexty',fillcolor=\"lightpink\",name=\"80% upper bound\")%>%\n    add_lines(x=alltime,text=as.character(alltime),y=includetime2,name=ts_forecast,line=list(color=\"red\"))\n  return(TSP)\n}\n\nTSplot(\"all\",modArima_train,as.matrix(X_test), NEWtitle = \"ZOOM: (2017-2018) Forecasting US ICS based on fitting ARIMAX(2,0,1) Model on 1978-2016 data using regression effect estimates of GOVT, DUR, HOM, CAR, INCOME & EDUC\",Ylab =\"ICS = INDEX OF CONSUMER SENTIMENT (US)\",Xlab =\"Time\",title_size = 8,ts_original = \"Training ICS Data (1978-2016)\",ts_forecast = \"ARIMAX-model ICS Forecasting (2017-2018)\")%>%\n  add_lines(x=newline$X,text=newline$TEXT,y=newline$Y,name=newline$NAME,line=list(color=\"gray\"))",
      "line_count": 62
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "plot(forecast(modArima_train, xreg = as.matrix(X_test) ), include=48, lwd=2, xlab=\"Time\", \n     ylab=\"ICS = INDEX OF CONSUMER SENTIMENT (US)\",\n     main = \"ZOOM: (2017-2018) Forecasting US ICS based on fitting ARIMAX(2,0,1) Model on 1978-2016 data\n      \\n using regression effect estimates of GOVT, DUR, HOM, CAR, INCOME & EDUC\")\nlines(MCSI_Data_monthAvg_ts_Y_test, col = \"red\", lwd = 4, lty=1)  \nlegend(\"topleft\", bty=\"n\", legend=c(\"Training ICS Data (2013-2016)\", \n                                   \"ARIMAX-model ICS Forecasting (2017-2018)\",\n                                   \"MCSI Official ICS (2017-2018)\"),\n       col=c(\"black\", \"blue\", \"red\"), \n       lty=c(1,1,1), lwd=c(2,2,4), cex=1.2, x.intersp=1.5, y.intersp=0.7)\ntext(2014, 91, \"Training Region (1978-2016)\\n Model(ICS) -> ARIMAX(p,q,r)\\n XReg={X_i}, 1<=i<=6\", cex=1.5)\ntext(2018, 79, \"Validation Region (2017-2018)\\n hat(ICS) <- ARIMAX(2,0,1)\\n XReg={X_i}, 1<=i<=6\", cex=1.5)",
      "line_count": 12
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "# https://github.com/SOCR/TCIU/blob/master/package/TSplotly/TSplotly/R/ADDline.R\nADDline <- function(ARIMAmodel=NULL,XREG=NULL,TS=NULL,linetype=\"TS\",Name=NULL) {\n  if(linetype==\"ARIMA\"){\n    tsmodel<-forecast(ARIMAmodel, xreg = XREG)\n    newline<-list(X=as.yearmon(time(tsmodel$x)),TEXT=as.character(as.yearmon(time(tsmodel$x))),Y=tsmodel$mean,NAME=Name)\n  }\n  else if(linetype==\"TS\"){\n    newline<-list(X=as.yearmon(time(TS)),TEXT=as.character(as.yearmon(time(TS))),Y=as.numeric(TS),NAME=Name)\n  }\n  return(newline)\n}\nnewline<-ADDline(TS = MCSI_Data_monthAvg_ts_Y_test,linetype = \"TS\",Name = \"MCSI Official ICS (2017-2018)\")\n\nTSplot(48,modArima_train,as.matrix(X_test),NEWtitle = \"(2017-2018) Forecasting US ICS based on fitting ARIMAX(2,0,1) Model on 1978-2016 data using regression effect estimates of GOVT, DUR, HOM, CAR, INCOME & EDUC\",Ylab =\"ICS = INDEX OF CONSUMER SENTIMENT (US)\",Xlab =\"Time\",title_size = 8,ts_original = \"Training ICS Data (2013-2016)\\nTraining Region (1978-2016)\\n Model(ICS) -> ARIMAX(p,q,r)\\n XReg={X_i}, 1<=i<=6\",ts_forecast = \"ARIMAX-model ICS Forecasting (2017-2018)\\nValidation Region (2017-2018)\\n hat(ICS) <- ARIMAX(2,0,1)\\n XReg={X_i}, 1<=i<=6\")%>%\n  add_lines(x=newline$X,text=newline$TEXT,y=newline$Y,name=newline$NAME,line=list(color=\"gray\"))",
      "line_count": 15
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "# FT/Spacekime Analytics\n# 1D timeseries FFT SHIFT\nfftshift1D <- function(img_ff) {\n  rows <- length(img_ff)   \n  rows_half <- ceiling(rows/2)\n  return(append(img_ff[(rows_half+1):rows], img_ff[1:rows_half]))\n}\n\nMCSI_data <- cbind(Y_train, X_train)\n# dim(MCSI_data)\ncolnames(MCSI_data) <- c(\"Y_train\", \"GOVT\", \"DUR\", \"HOM\", \"CAR\", \"INCOME\", \"EDUC\")\n#head(MCSI_data)\ncolnames(X_test) <- c(\"GOVT\", \"DUR\", \"HOM\", \"CAR\", \"INCOME\", \"EDUC\")\nhead(X_test)\n#   MCSI_data_numeric <- as.matrix(MCSI_data)  # remove column names for FT processing\n\nFT_MCSI_data <- array(complex(), c(468, 7))\nmag_FT_MCSI_data <- array(complex(), c(468, 7))\nphase_FT_MCSI_data <- array(complex(), c(468, 7))\nIFT_NilPhase_FT_MCSI_data <- cbind(Y_train, X_train)        # array( , c(468, 7))\nIFT_ScramblePhase_FT_MCSI_data <- cbind(Y_train, X_train)   # array( , c(468, 7))\nIFT_LoadedPhase_FT_MCSI_data <- cbind(Y_train, X_train)   # array( , c(468, 7))\n\nfor (i in 1:7) {\n  FT_MCSI_data[ , i] <- fft(MCSI_data[ , i])\n  X2 <- FT_MCSI_data[ , i]\n  # plot(fftshift1D(log(Re(X2)+2)), main = \"log(fftshift1D(Re(FFT(timeseries))))\") \n  mag_FT_MCSI_data[ , i] <- sqrt(Re(X2)^2+Im(X2)^2); \n  # plot(log(fftshift1D(Re(mag_FT_MCSI_data))), main = \"log(Magnitude(FFT(timeseries)))\") \n  phase_FT_MCSI_data[ , i] <- atan2(Im(X2), Re(X2)); \n  # plot(Re(fftshift1D(phase_FT_MCSI_data[ , 1])), main = \"Shift(Phase(FFT(timeseries)))\")\n}\n\n######### Test the FT-IFT analysis-synthesis back-and-forth transform process to confirm calculations\n#           X2 <- FT_MCSI_data[ , 1]; mag_FT_MCSI_data[ , 1] <- sqrt(Re(X2)^2+Im(X2)^2); \n#           phase_FT_MCSI_data[ , 1] <- atan2(Im(X2), Re(X2)); \n# Real2 = mag_FT_MCSI_data[ , 1] * cos(phase_FT_MCSI_data[ , 1])\n# Imaginary2 = mag_FT_MCSI_data[ , 1] * sin(phase_FT_MCSI_data[ , 1])\n# man_hat_X2 = Re(fft(Real2 + 1i*Imaginary2, inverse = T)/length(X2))\n# ifelse(abs(man_hat_X2[5] - MCSI_data[5, 1]) < 0.001, \"Perfect Syntesis\", \"Problems!!!\")\n#########",
      "line_count": 41
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "df.phase_FT_MCSI_data <- as.data.frame(Re(phase_FT_MCSI_data))\ndf.phase_FT_MCSI_data %>% \n  gather() %>% \n  head()\ncolnames(df.phase_FT_MCSI_data) <- colnames(MCSI_data)\ncolnames(df.phase_FT_MCSI_data)[1] <- \"ICS\"\nphaseDistributions <- gather(df.phase_FT_MCSI_data)\ncolnames(phaseDistributions) <- c(\"Feature\", \"Phase\")",
      "line_count": 8
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "ggplot(phaseDistributions, aes(Phase)) + \n  # geom_histogram(bins = 10) + \n  geom_histogram(aes(y=..density..), bins = 10) + \n  facet_wrap( ~Feature, scales = 'free_x') +\n  xlim(-pi, pi) + \n  theme(strip.text.x = element_text(size = 16, colour = \"black\", angle = 0))",
      "line_count": 6
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "# dim(X_test) # [1] 24  6\n# colnames(X_test)\n\nFT_X_test <- array(complex(), c(24, 6))\nmag_FT_X_test <- array(complex(), c(24, 6))\nphase_FT_X_test <- array(complex(), c(24, 6))\nIFT_NilPhase_FT_X_test <- X_test        # array( , c(24, 6))\nIFT_ScramblePhase_FT_X_test <- X_test   # array( , c(24, 6)\nIFT_LoadedPhase_FT_X_test <- X_test   # array( , c(24, 6)\n\nfor (i in 1:6) {\n  FT_X_test[ , i] <- fft(X_test[ , i])\n  X2 <- FT_X_test[ , i]\n  mag_FT_X_test[ , i] <- sqrt(Re(X2)^2+Im(X2)^2); \n  phase_FT_X_test[ , i] <- atan2(Im(X2), Re(X2)); \n}\n\nhead(X_test)\n",
      "line_count": 19
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "for (i in 1:7) {\n  Real <- mag_FT_MCSI_data[ , i] * cos(0)  \n  Imaginary <- mag_FT_MCSI_data[ , i] * sin(0) \n  IFT_NilPhase_FT_MCSI_data[ ,i] <- \n    Re(fft(Real+1i*Imaginary, inverse = T)/length(FT_MCSI_data[ , i]))\n# display(ift_NilPhase_X2mag, method = \"raster\")\n# dim(IFT_NilPhase_FT_MCSI_data); View(IFT_NilPhase_FT_MCSI_data); # compare to View(MCSI_data[ , ])\n}\ncolnames(IFT_NilPhase_FT_MCSI_data) <- colnames(MCSI_data)\n# dim(IFT_NilPhase_FT_MCSI_data)\n# dim(FT_MCSI_data)\n\n# colnames(IFT_NilPhase_FT_MCSI_data) \nhead(IFT_NilPhase_FT_MCSI_data)\nhead(MCSI_data)\n\nfor (i in 1:6) {\n  Real <- mag_FT_X_test[ , i] * cos(0)  \n  Imaginary <- mag_FT_X_test[ , i] * sin(0) \n  IFT_NilPhase_FT_X_test[ ,i] <- \n    Re(fft(Real+1i*Imaginary, inverse = T)/length(FT_X_test[ , i]))\n}\nhead(IFT_NilPhase_FT_X_test)\nhead(X_test)",
      "line_count": 24
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "IFT_NilPhase_FT_MCSI_data_Y_train <- IFT_NilPhase_FT_MCSI_data$Y_train[1:(39*12)]\n# length(Y_train)/12\n# Y_test <- IFT_NilPhase_FT_MCSI_data$Y_train[(39*12+1):length(IFT_NilPhase_FT_MCSI_data$Y_train)]; length(Y_test)/12\n\n# Training and Testing Data Covariates explaining the longitudinal outcome (Y): \n# GOVT, DUR, HOM, CAR, INCOME, EDUC\nIFT_NilPhase_FT_MCSI_data_X_train <- \n  as.data.frame(cbind(IFT_NilPhase_FT_MCSI_data$GOVT, IFT_NilPhase_FT_MCSI_data$DUR, \n                      IFT_NilPhase_FT_MCSI_data$HOM, IFT_NilPhase_FT_MCSI_data$CAR, \n                      IFT_NilPhase_FT_MCSI_data$INCOME, \n                      IFT_NilPhase_FT_MCSI_data$EDUC))[1:(39*12), ]\n# dim(X_train)\n\ncolnames(IFT_NilPhase_FT_MCSI_data_X_train) <- colnames(IFT_NilPhase_FT_X_test)\n\n# Outcome Variable to be modeled, as a timeseries\nMCSI_Data_monthAvg_ts_Y_train_IFT_NilPhase <- \n         ts(IFT_NilPhase_FT_MCSI_data_Y_train, start=c(1978,1), end=c(2016, 12), frequency = 12)\n\n# Find ARIMAX model\nmodArima_train_IFT_NilPhase <- \n  auto.arima(MCSI_Data_monthAvg_ts_Y_train_IFT_NilPhase,\n             xreg=as.matrix(IFT_NilPhase_FT_MCSI_data_X_train))\nmodArima_train_IFT_NilPhase\n\n# Regression with ARIMA(1,0,0)(1,0,0)[12] errors \n# Coefficients:\n#  ar1    sar1  intercept       V1      V2      V3      V4     V5       V6\n# 0.8194  0.1554    26.3831  10.6846  8.6527  2.3138  2.2177  2e-04  -3.5998\n# s.e.  0.0316  0.0480     5.9317   1.3501  1.1259  1.1826  1.0817    NaN   1.8950\n# sigma^2 estimated as 3.401:  log likelihood=-946.65, AIC=1913.31   AICc=1913.79   BIC=1954.79\n\npred_arimax_1_0_1 <- forecast(modArima_train_IFT_NilPhase, xreg = as.matrix(IFT_NilPhase_FT_X_test))\npred_arimax_1_0_1_2017_2018 <- \n  ts(pred_arimax_1_0_1$mean, frequency=12, start=c(2017,1), end=c(2018,12))\n\npred_arimax_1_0_1_2017_2018\n# alternatively:\n# pred_arimax_1_0_1_2017_2018 <- predict(modArima_train_IFT_NilPhase, \n#                                              n.ahead = pred_length, newxreg = X_test)$pred",
      "line_count": 40
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "shuffle_phase_FT_MCSI_data <- phase_FT_MCSI_data\n\nfor (i in 1:7) {\n  set.seed(12345)   # sample randomly Phases for each of the 7 covariates (X & Y)\n  shuffle_phase_FT_MCSI_data[ , i] <- phase_FT_MCSI_data[sample(nrow(phase_FT_MCSI_data)), i]\n  Real <- mag_FT_MCSI_data[ , i] * cos(Re(shuffle_phase_FT_MCSI_data[ , i]))  \n  Imaginary <- mag_FT_MCSI_data[ , i] * sin(Re(shuffle_phase_FT_MCSI_data[ , i])) \n  IFT_ScramblePhase_FT_MCSI_data[ ,i] <- \n    Re(fft(Real+1i*Imaginary, inverse = T)/length(FT_MCSI_data[ , i]))\n}\ncolnames(IFT_ScramblePhase_FT_MCSI_data) <- colnames(MCSI_data)\n# dim(IFT_ScramblePhase_FT_MCSI_data)\n# dim(FT_MCSI_data)\n# colnames(IFT_ScramblePhase_FT_MCSI_data)\nhead(IFT_ScramblePhase_FT_MCSI_data)\n\n# Perform similar scrambling of the phases separately for X_test (24 * 6) data\nshuffle_phase_FT_X_test <- phase_FT_X_test\nfor (i in 1:6) {\n  set.seed(12345)   # sample randomly Phases for each of the 6 predictors covariates (X)\n  shuffle_phase_FT_X_test[ , i] <- phase_FT_MCSI_data[sample(nrow(phase_FT_X_test)), i]\n  Real <- mag_FT_X_test[ , i] * cos(Re(shuffle_phase_FT_X_test[ , i]))  \n  Imaginary <- mag_FT_X_test[ , i] * sin(Re(shuffle_phase_FT_X_test[ , i])) \n  IFT_ScramblePhase_FT_X_test[ ,i] <- \n    Re(fft(Real+1i*Imaginary, inverse = T)/length(FT_X_test[ , i]))\n}\n# dim(IFT_ScramblePhase_FT_X_test)\nhead(IFT_ScramblePhase_FT_X_test)",
      "line_count": 28
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "IFT_ScramblePhase_FT_MCSI_data_Y_train <- \n  IFT_ScramblePhase_FT_MCSI_data$Y_train[1:(39*12)]\n\n# length(Y_train)/12\n\n# Training and Testing Data Covariates explaining the longitudinal outcome (Y): \n# GOVT, DUR, HOM, CAR, INCOME, EDUC\nIFT_ScramblePhase_FT_MCSI_data_X_train <- \n  as.data.frame(cbind(IFT_ScramblePhase_FT_MCSI_data$GOVT, IFT_ScramblePhase_FT_MCSI_data$DUR, \n                      IFT_ScramblePhase_FT_MCSI_data$HOM, IFT_ScramblePhase_FT_MCSI_data$CAR, \n                      IFT_ScramblePhase_FT_MCSI_data$INCOME,\n                      IFT_ScramblePhase_FT_MCSI_data$EDUC))[1:(39*12), ]\n# dim(IFT_ScramblePhase_FT_MCSI_data_X_train)\n\n# Outcome Variable to be modeled, as a time series\nMCSI_Data_monthAvg_ts_Y_train_IFT_ScramblePhase <- \n  ts(IFT_ScramblePhase_FT_MCSI_data_Y_train, start=c(1978,1), end=c(2016, 12), frequency = 12)\n# unchanged: MCSI_Data_monthAvg_ts_Y_test <- ts(IFT_ScramblePhase_FT_MCSI_data_Y_train, start=c(2017,1), end=c(2018, 12), frequency = 12)\n\n# Find ARIMAX model\nmodArima_train_IFT_ScramblePhase <- \n  auto.arima(MCSI_Data_monthAvg_ts_Y_train_IFT_ScramblePhase,\n             xreg=as.matrix(IFT_ScramblePhase_FT_MCSI_data_X_train))\n\nmodArima_train_IFT_ScramblePhase\n\n# Regression with ARIMA(1,0,2)(2,0,0)[12] errors \n# Coefficients:\n#  ar1      ma1      ma2     sar1    sar2  intercept       V1       V2       V3       V4   V5      V6\n#0.9570  -0.0508  -0.1066  -0.0249  0.0320     62.736  -7.4009  -6.2064  -2.1374  -3.2478    0  4.5433\n#s.e.  0.0151   0.0511   0.0516   0.0483  0.0497        NaN   1.3351   1.0909   1.1224   1.1051  NaN  1.9499\n# sigma^2 estimated as 6.45:  log likelihood=-1095.3 AIC=2216.6   AICc=2217.4   BIC=2270.53\n\npred_arimax_1_1_3 <- \n  forecast(modArima_train_IFT_ScramblePhase, \n           xreg =as.matrix(IFT_ScramblePhase_FT_X_test))\npred_arimax_1_1_3_2017_2018 <- \n  ts(pred_arimax_1_1_3$mean, frequency=12, start=c(2017,1), end=c(2018,12))\npred_arimax_1_1_3_2017_2018\n#pred_arimax_1_1_3_2017_2018_pred <- predict(modArima_train_IFT_ScramblePhase, n.ahead = pred_length, newxreg = IFT_ScramblePhase_FT_X_test)$pred",
      "line_count": 40
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "pi_wrapper <- function (x) {  \n  if(abs(x%%(2*pi)) <= pi) return(x%%(2*pi))\n  else if (-2*pi <= x%%(2*pi) & x%%(2*pi) < -pi) return (2*pi + x%%(2*pi))\n  else if (pi <= x%%(2*pi) & x%%(2*pi) < 2*pi) return (x%%(2*pi) - 2*pi)\n  else return (0)\n}\n\nloaded_phase_FT_MCSI_data <- Re(phase_FT_MCSI_data)\nfor (i in 1:dim(phase_FT_MCSI_data)[1]) {\n  for (j in 1:dim(phase_FT_MCSI_data)[2])\n  loaded_phase_FT_MCSI_data[i,j] <- pi_wrapper(pi/8 + Re(phase_FT_MCSI_data[i,j]))\n}\n# head(loaded_phase_FT_MCSI_data)\n# Compare Loaded Phases to Native Phases\n    df.loadedPhase_FT_MCSI_data <- as.data.frame(loaded_phase_FT_MCSI_data)\n    df.loadedPhase_FT_MCSI_data %>% gather() %>% head()\n    colnames(df.loadedPhase_FT_MCSI_data) <- colnames(MCSI_data)\n    colnames(df.loadedPhase_FT_MCSI_data)[1] <- \"ICS\"\n    loadedPhaseDistributions <- gather(df.loadedPhase_FT_MCSI_data)\n    colnames(loadedPhaseDistributions) <- c(\"Feature\", \"Phase\")\n    \n    # map the value as our x variable, and use facet_wrap to separate by the key column:\n    ggplot(loadedPhaseDistributions, aes(Phase)) + \n      geom_histogram(aes(y=..density..), bins = 10) + \n      facet_wrap( ~Feature, scales = 'free_x') +\n      xlim(-pi, pi) + \n      theme(strip.text.x = element_text(size = 16, colour = \"black\", angle = 0))\n\nfor (i in 1:7) {\n  Real <- mag_FT_MCSI_data[ , i] * cos(loaded_phase_FT_MCSI_data[ , i])  \n  Imaginary <- mag_FT_MCSI_data[ , i] * sin(loaded_phase_FT_MCSI_data[ , i]) \n  IFT_LoadedPhase_FT_MCSI_data[ ,i] <- \n    Re(fft(Real+1i*Imaginary, inverse = T)/length(FT_MCSI_data[ , i]))\n}\ncolnames(IFT_LoadedPhase_FT_MCSI_data) <- colnames(MCSI_data)\n# dim(IFT_LoadedPhase_FT_MCSI_data)\n# dim(FT_MCSI_data)\nhead(IFT_LoadedPhase_FT_MCSI_data)\nhead(MCSI_data)",
      "line_count": 39
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "IFT_LoadedPhase_FT_MCSI_data_Y_train <- IFT_LoadedPhase_FT_MCSI_data$Y_train[1:(39*12)]\n\n# length(IFT_LoadedPhase_FT_MCSI_data_Y_train)/12\n# Y_test <- IFT_NilPhase_FT_MCSI_data$Y_train[(39*12+1):length(IFT_NilPhase_FT_MCSI_data$Y_train)]; length(Y_test)/12\n\n# Training and Testing Data Covariates explaining the longitudinal outcome (Y): \n# GOVT, DUR, HOM, CAR, INCOME, EDUC\nIFT_LoadedPhase_FT_MCSI_data_X_train <- \n  as.data.frame(cbind(IFT_LoadedPhase_FT_MCSI_data$GOVT, IFT_LoadedPhase_FT_MCSI_data$DUR, \n                      IFT_LoadedPhase_FT_MCSI_data$HOM, IFT_LoadedPhase_FT_MCSI_data$CAR, \n                      IFT_LoadedPhase_FT_MCSI_data$INCOME,\n                      IFT_LoadedPhase_FT_MCSI_data$EDUC))[1:(39*12),]\n# dim(IFT_LoadedPhase_FT_MCSI_data_X_train)\n\n# Outcome Variable to be modeled, as a timeseries\nMCSI_Data_monthAvg_ts_Y_train_IFT_LoadedPhase <- \n  ts(IFT_LoadedPhase_FT_MCSI_data_Y_train, start=c(1978,1), end=c(2016, 12), frequency = 12)\n# unchanged: MCSI_Data_monthAvg_ts_Y_test <- ts(IFT_LoadedPhase_FT_MCSI_data_Y_train, start=c(2017,1), end=c(2018, 12), frequency = 12)\n\n# Find ARIMAX model\nmodArima_train_IFT_LoadedPhase <- \n  auto.arima(MCSI_Data_monthAvg_ts_Y_train_IFT_LoadedPhase,\n             xreg=as.matrix(IFT_LoadedPhase_FT_MCSI_data_X_train))\npred_arimax_2_0_1_Loaded_2017_2018 <- \n  predict(modArima_train_IFT_LoadedPhase, n.ahead = pred_length, newxreg = X_test)$pred\nmodArima_train_IFT_LoadedPhase",
      "line_count": 26
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "plot(forecast(modArima_train, xreg = as.matrix(X_test)),                             # Spacetime ARIMA forecast\n     include=48, lwd=4, xlab=\"Time\", ylab=\"ICS = INDEX OF CONSUMER SENTIMENT (US)\", ylim=c(65,110),\n     main = \"Spacetime vs. Spacekime Analytics: (2017-2018) US ICS Forecasting\\n\n      based on fitting ARIMAX Models on raw & kime-transformed 1978-2016 data\")\nlines(MCSI_Data_monthAvg_ts_Y_test, col = \"red\", lwd = 4, lty=1)          # Observed Y_Test timeseries\nlines(pred_arimax_1_0_1_2017_2018, col = \"green\", lwd = 4, lty=1)         # Nil Phase reconstr\nlines(pred_arimax_1_1_3_2017_2018, col = \"purple\", lwd = 4, lty=1)        # Scramble Phase recon\nlines(pred_arimax_2_0_1_Loaded_2017_2018, col = \"brown\", lwd = 4, lty=1)  # Loaded Phase recon\nlines(26+pred_arimax_1_1_3_2017_2018, col = \"orange\", lwd = 4, lty=1)        # Offset Scramble Phase recon\nlegend(\"topleft\", bty=\"n\", legend=c(\"Training ICS Data (2013-2016)\", \n                        \"ARIMAX(2,0,1)-model ICS Forecasting (2017-2018)\",\n                        \"MCSI-reported Official Index (2017-2018)\",\n                        \"ARIMAX(1,0,0) Nil-Phase recon model ICS Forecasting (2017-2018)\",\n                        \"ARIMAX(1,0,2) Scrambled-Phase recon model ICS Forecasting (2017-2018)\",\n                        \"ARIMAX(2,0,1) Loaded-Phase recon model ICS Forecasting (2017-2018)\",\n                        \"ARIMAX(1,0,2) Offset Scrambled-Phase recon model ICS Forecasting (2017-2018)\"),\n       col=c(\"black\", \"blue\", \"red\", \"green\", \"purple\", \"brown\", \"orange\"), \n       lty=c(1,1,1,1,1,1,1), lwd=c(4,4,4,4,4,4,4), cex=1.5, x.intersp=1.5, y.intersp=0.4)\ntext(2015.4, 66, expression(atop(paste(\"Training Region (1978-2016)\"), \n                paste(Model(ICS) %->% \"ARIMAX(p, q, r) ;  \", \n                      XReg %==% X[i], \" \", i %in% {1 : 6}))), cex=1.5)\ntext(2018, 66, expression(atop(paste(\"Validation Region (2017-2018)\"), \n        paste(hat(ICS) %<-% \"ARIMAX( . , . , . ) ;  \", \n              XReg %==% X[i], \" \", i %in% {1 : 6}))), cex=1.5)",
      "line_count": 24
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "nl1<-ADDline(TS = MCSI_Data_monthAvg_ts_Y_test,linetype = \"TS\",Name = \"MCSI-reported Official Index (2017-2018)\")\nnl2<-ADDline(TS = pred_arimax_1_1_3_2017_2018,linetype = \"TS\",Name = \"ARIMAX(1,0,0) Nil-Phase\\nrecon model ICS Forecasting (2017-2018)\")\nnl3<-ADDline(TS = pred_arimax_1_1_3_2017_2018,linetype = \"TS\",Name = \"ARIMAX(1,0,2) Scrambled-Phase\\nrecon model ICS Forecasting (2017-2018)\")\nnl4<-ADDline(TS = pred_arimax_2_0_1_Loaded_2017_2018,linetype = \"TS\",Name = \"ARIMAX(2,0,1) Loaded-Phase\\nrecon model ICS Forecasting (2017-2018)\")\nnl5<-ADDline(TS = 26+pred_arimax_1_1_3_2017_2018,linetype = \"TS\",Name = \"ARIMAX(1,0,2) Offset Scrambled-Phase\\nrecon model ICS Forecasting (2017-2018)\")\n\nTSplot(48,modArima_train,as.matrix(X_test),NEWtitle = \"(2017-2018) Forecasting US ICS based on fitting ARIMAX(2,0,1) Model on 1978-2016 data using regression effect estimates of GOVT, DUR, HOM, CAR, INCOME & EDUC\",Ylab =\"ICS = INDEX OF CONSUMER SENTIMENT (US)\",Xlab =\"Time\",title_size = 8,ts_original = \"Training ICS Data (2013-2016)\\nTraining Region (1978-2016)\\n Model(ICS) -> ARIMAX(p,q,r)\\n XReg={X_i}, 1<=i<=6\",ts_forecast = \"ARIMAX-model ICS Forecasting (2017-2018)\\nValidation Region (2017-2018)\\n hat(ICS) <- ARIMAX(2,0,1)\\n XReg={X_i}, 1<=i<=6\")%>%\n  add_lines(x=nl1$X,text=nl1$TEXT,y=nl1$Y,name=nl1$NAME,line=list(color=\"gray\"))%>%\n  add_lines(x=nl2$X,text=nl2$TEXT,y=nl2$Y,name=nl2$NAME,line=list(color=\"blue\"))%>%\n  add_lines(x=nl3$X,text=nl3$TEXT,y=nl3$Y,name=nl3$NAME,line=list(color=\"purple\"))%>%\n  add_lines(x=nl4$X,text=nl4$TEXT,y=nl4$Y,name=nl4$NAME,line=list(color=\"brown\"))%>%\n  add_lines(x=nl5$X,text=nl5$TEXT,y=nl5$Y,name=nl5$NAME,line=list(color=\"orange\"))",
      "line_count": 12
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "plot(forecast(modArima_train, xreg = as.matrix(X_test)),  # include=48,              # Spacetime ARIMA forecast\n     lwd=4, xlab=\"Time\", ylab=\"ICS = INDEX OF CONSUMER SENTIMENT (US)\", ylim=c(55,125),\n     main = \"Spacetime vs. Spacekime Analytics: (2017-2018) US ICS Forecasting\\n\n     based on fitting ARIMAX Models on raw & kime-transformed 1978-2016 data\")\nlines(MCSI_Data_monthAvg_ts_Y_test, col = \"red\", lwd = 4, lty=1)          # Observed Y_Test timeseries\nlines(pred_arimax_1_0_1_2017_2018, col = \"green\", lwd = 4, lty=1)         # Nil Phase reconstr\nlines(pred_arimax_1_1_3_2017_2018, col = \"purple\", lwd = 4, lty=1)        # Scramble Phase recon\nlines(pred_arimax_2_0_1_Loaded_2017_2018, col = \"brown\", lwd = 4, lty=1)  # Loaded Phase recon\nlines(26+pred_arimax_1_1_3_2017_2018, col = \"orange\", lwd = 4, lty=1)        # Offset Scramble Phase recon\nlegend(\"topleft\", bty=\"n\", legend=c(\"Training ICS Data (2013-2016)\", \n                                    \"ARIMAX(2,0,1)-model ICS Forecasting (2017-2018)\",\n                                    \"MCSI-reported Official Index (2017-2018)\",\n                                    \"ARIMAX(1,0,0) Nil-Phase recon model ICS Forecasting (2017-2018)\",\n                                    \"ARIMAX(1,0,2) Scrambled-Phase recon model ICS Forecasting (2017-2018)\",\n                                    \"ARIMAX(2,0,1) Loaded-Phase recon model ICS Forecasting (2017-2018)\",\n                                    \"ARIMAX(1,0,2) Offset Scrambled-Phase recon model ICS Forecasting (2017-2018)\"),\n       col=c(\"black\", \"blue\", \"red\", \"green\", \"purple\", \"brown\", \"orange\"), \n       lty=c(1,1,1,1,1,1,1), lwd=c(4,4,4,4,4,4,4), cex=1.2, x.intersp=1.5, y.intersp=0.4)",
      "line_count": 18
    },
    {
      "section": "TCIU Kime ARIMAX on ED Econ Data",
      "code": "nl1<-ADDline(TS = MCSI_Data_monthAvg_ts_Y_test,linetype = \"TS\",Name = \"MCSI-reported Official Index (2017-2018)\")\nnl2<-ADDline(TS = pred_arimax_1_0_1_2017_2018,linetype = \"TS\",Name = \"ARIMAX(1,0,0) Nil-Phase\\nrecon model ICS Forecasting (2017-2018)\")\nnl3<-ADDline(TS = pred_arimax_1_1_3_2017_2018,linetype = \"TS\",Name = \"ARIMAX(1,0,2) Scrambled-Phase\\nrecon model ICS Forecasting (2017-2018)\")\nnl4<-ADDline(TS = pred_arimax_2_0_1_Loaded_2017_2018,linetype = \"TS\",Name = \"ARIMAX(2,0,1) Loaded-Phase\\nrecon model ICS Forecasting (2017-2018)\")\nnl5<-ADDline(TS = 26+pred_arimax_1_1_3_2017_2018,linetype = \"TS\",Name = \"ARIMAX(1,0,2) Offset Scrambled-Phase\\nrecon model ICS Forecasting (2017-2018)\")\n\nTSplot(\"all\",modArima_train,as.matrix(X_test), NEWtitle = \"(2017-2018) Forecasting US ICS based on fitting ARIMAX(2,0,1) Model on 1978-2016 data using regression effect estimates of GOVT, DUR, HOM, CAR, INCOME & EDUC\",Ylab =\"ICS = INDEX OF CONSUMER SENTIMENT (US)\",Xlab =\"Time\",title_size = 8,ts_original = \"Training ICS Data (2013-2016)\\nTraining Region (1978-2016)\\n Model(ICS) -> ARIMAX(p,q,r)\\n XReg={X_i}, 1<=i<=6\",ts_forecast = \"ARIMAX-model ICS Forecasting (2017-2018)\\nValidation Region (2017-2018)\\n hat(ICS) <- ARIMAX(2,0,1)\\n XReg={X_i}, 1<=i<=6\")%>%\n  add_lines(x=nl1$X,text=nl1$TEXT,y=nl1$Y,name=nl1$NAME,line=list(color=\"gray\"))%>%\n  add_lines(x=nl2$X,text=nl2$TEXT,y=nl2$Y,name=nl2$NAME,line=list(color=\"blue\"))%>%\n  add_lines(x=nl3$X,text=nl3$TEXT,y=nl3$Y,name=nl3$NAME,line=list(color=\"purple\"))%>%\n  add_lines(x=nl4$X,text=nl4$TEXT,y=nl4$Y,name=nl4$NAME,line=list(color=\"brown\"))%>%\n  add_lines(x=nl5$X,text=nl5$TEXT,y=nl5$Y,name=nl5$NAME,line=list(color=\"orange\"))",
      "line_count": 12
    }
  ]
}