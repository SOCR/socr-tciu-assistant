{
  "metadata": {
    "created_at": "2025-05-15T17:01:01.244868",
    "total_sections": 1,
    "total_code_chunks": 2,
    "total_tables": 1,
    "r_libraries": [
      "plotly"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"Spacekime Analytics (Time Complexity and Inferential Uncertainty)\"\nsubtitle: \"TCIU: Interactive Kime-Surface Parametric Plot\"\nauthor: \"SOCR Team\"\ndate: \"`r format(Sys.time(),'%m/%d/%Y')`\"\noutput: \n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: TCIU_header.html\n  fig_width: 8 \n\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"http://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number \n\t\t\t\t<img class=\"statcounter\"\n\t\t\t\t\t\t\t\tsrc=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" \n\t\t\t\t\t\t\t\talt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"http://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"http://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"https://www.statcounter.com/counter/counter.js\"></script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 127
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "  fig_height: 8 \n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Main",
      "code": "knitr::opts_chunk$set(echo = TRUE)",
      "line_count": 1
    },
    {
      "section": "Main",
      "code": "library(plotly)\nphi <- seq(from = 0, to = 2*pi, length.out = 200)\ntheta <- seq(from = 0, to = pi/3, length.out = 200)\n\nr1 = 1 + sin(5*phi) %o% (sin(7*theta)/5) # 2 + sin(3 * phi + 5 * theta)\nx1 = r1 * (cos(phi) %o% sin(theta))    # x = r*cos(phi)*sin(theta)\ny1 = r1 * (sin(phi) %o% sin(theta))     # y = r*sin(phi)*sin(theta)\nz1 = r1 * (cos(theta) %o% rep(1,200))  # z = r*cos(theta)\nsurf_color1= phi %o% rep(1,200)\ncolorscale = cbind(seq(0, 1, by=1/(length(phi) - 1)), rainbow(length(phi)))\n\n# Add Angular and Radial (polar-mesh) traces\n# phi <- seq(from = 0, to = 2*pi, length.out = 10)\n# theta <- seq(from = 0, to = pi/3, length.out = 8)\nr = 1 + sin(5*phi) %o% (sin(7*theta)/5) # 2 + sin(3 * phi + 5 * theta)\nx = r * (cos(phi) %o% sin(theta))    # x = r*cos(phi)*sin(theta)\ny = r * (sin(phi) %o% sin(theta))     # y = r*sin(phi)*sin(theta)\nz = r * (cos(theta) %o% rep(1,200))  # z = r*cos(theta)\n\n# Radial (Time) mesh curves\ncount <- 50\nphi <- seq(from = 0, to = 2*pi, length.out = count)\ntheta <- seq(from = 0, to = pi/3, length.out = count)\nx <- array(1, dim=c(count*count))\ny <- array(1, dim=c(count*count))\nz <- array(1, dim=c(count*count))\nr <- array(1, dim=c(count*count))\nopaque <-  array(1, dim=c(count*count))\n\nfor (i in 1:count) {  # phi\n  for (j in 1:count) { # theta\n    r[(i-1)*count+j] <- 1 + sin(5*phi[i]) * (sin(7*theta[j])/5)\n    x[(i-1)*count+j] <- r[(i-1)*count+j] * (cos(phi[i]) * sin(theta[j]))\n    y[(i-1)*count+j] <- r[(i-1)*count+j] * (sin(phi[i]) * sin(theta[j]))\n    z[(i-1)*count+j] <- r[(i-1)*count+j] * cos(theta[j])\n    opaque[(i-1)*count+j] <- ifelse(j==10, 0, 1)\n  }\n}\n\n# Angular (Phase) mesh curves\ncount <- 50 # theta\nphi <- seq(from = 0, to = 2*pi, length.out = count)\ntheta <- seq(from = 0, to = pi/3, length.out = count)\nx2 <- array(1, dim=c(count*count))\ny2 <- array(1, dim=c(count*count))\nz2 <- array(1, dim=c(count*count))\nr2 <- array(1, dim=c(count*count))\nfor (i in 1:count) {  # phi\n  for (j in 1:count) { # theta\n    r2[(i-1)*count+j] <- 1 + sin(5*phi[i]) * (sin(7*theta[j])/5)\n    x2[(i-1)*count+j] <- r2[(i-1)*count+j] * (cos(phi[i]) * sin(theta[j]))\n    y2[(i-1)*count+j] <- r2[(i-1)*count+j] * (sin(phi[i]) * sin(theta[j]))\n    z2[(i-1)*count+j] <- r2[(i-1)*count+j] * cos(theta[j])\n  }\n}\n# length(x2); length(y2); length(r2); dim(z2)\nphase_seq5 <- seq(from=25, to=count^2, by=count)  # phase mesh indexing patterns\nphase_seq15 <- seq(from=40, to=count^2, by=count)\nepsilon=0.03   # slight offset (up shift) of contour meshes\n\np <- plot_ly(hoverinfo=\"none\", showscale = FALSE) %>%\n    add_trace(x = ~x1, y = ~y1, z = ~r1,\n              surfacecolor=~surf_color1, colorscale=colorscale, #Phase-based color\n              type = 'surface', opacity=1, visible=T,\n              contour=list(x = list(highlight = FALSE),\n                           y = list(highlight = FALSE),\n                           z = list( highlight = TRUE, highlightcolor = \"blue\"),\n                           color=\"#000\", width=15, lwd=10,\n                           opacity=1.0, hoverinfo=\"none\")) %>%\n    # Add a few Radial Traces\n    add_trace(x = x[(count+1):(2*count)], y = y[(count+1):(2*count)], \n              z = r[(count+1):(2*count)]+epsilon, \n            type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n            line = list(color=\"#000\", width=7, lwd=7), name = 'Time') %>%\n    add_trace(x = x[(10*count+1):(11*count)], y = y[(10*count+1):(11*count)], \n              z = r[(10*count+1):(11*count)]+epsilon, \n            type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n            line = list(color=\"#000\", width=7, lwd=7), name = 'Time') %>%\n    add_trace(x = x[(32*count+1):(33*count)], y = y[(32*count+1):(33*count)], \n              z = r[(32*count+1):(33*count)]+epsilon, \n            type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n            line = list(color=\"#000\", width=7, lwd=7), name = 'Time') %>%\n    \n    # Add a few Phase (Angular) Traces\n    add_trace(x = x2[phase_seq5], y = y2[phase_seq5], z = r2[phase_seq5]+epsilon, \n            type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n            line = list(color=\"darkgray\", width=7, lwd=7), name = 'Phase') %>%\n    add_trace(x = x2[phase_seq15], y = y2[phase_seq15], \n              z = r2[phase_seq15]+epsilon, \n            type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n            line = list(color=\"darkgray\", width=7, lwd=7), name = 'Phase') %>%\n  \n    # Configure the scene layout\n    layout(showlegend = FALSE,\n           scene = list(aspectmode = \"manual\", \n                        aspectratio = list(x=1, y=1, z=0.3))) # 1:1:1 aspect ratio\np\n\n#### For high-resolution kimesurface rendering suppress the cardinal plances and axes\n# hide_axes_grid <- list(\n#   title = \"\",\n#   zeroline = FALSE,\n#   showline = FALSE,\n#   showticklabels = FALSE,\n#   showgrid = FALSE\n# )\n# \n# p1 <- plot_ly(hoverinfo=\"none\", showscale = FALSE) %>%\n#     add_trace(x = ~x1, y = ~y1, z = ~r1,\n#               surfacecolor=~surf_color1, colorscale=colorscale, #Phase-based color\n#               type = 'surface', opacity=1, visible=T,\n#               contour=list(x = list(highlight = FALSE),\n#                            y = list(highlight = FALSE),\n#                            z = list( highlight = TRUE, highlightcolor = \"blue\"),\n#                            color=\"#000\", width=15, lwd=10,\n#                            opacity=1.0, hoverinfo=\"none\")) %>%\n#     # Add a few Radial Traces\n#     add_trace(x = x[(count+1):(2*count)], y = y[(count+1):(2*count)], \n#               z = r[(count+1):(2*count)]+epsilon, \n#             type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n#             line = list(color=\"#000\", width=7, lwd=7), name = 'Time') %>%\n#     add_trace(x = x[(10*count+1):(11*count)], y = y[(10*count+1):(11*count)], \n#               z = r[(10*count+1):(11*count)]+epsilon, \n#             type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n#             line = list(color=\"#000\", width=7, lwd=7), name = 'Time') %>%\n#     add_trace(x = x[(32*count+1):(33*count)], y = y[(32*count+1):(33*count)], \n#               z = r[(32*count+1):(33*count)]+epsilon, \n#             type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n#             line = list(color=\"#000\", width=7, lwd=7), name = 'Time') %>%\n#     \n#     # Add a few Phase (Angular) Traces\n#     add_trace(x = x2[phase_seq5], y = y2[phase_seq5], z = r2[phase_seq5]+epsilon, \n#             type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n#             line = list(color=\"darkgray\", width=7, lwd=7), name = 'Phase') %>%\n#     add_trace(x = x2[phase_seq15], y = y2[phase_seq15], \n#               z = r2[phase_seq15]+epsilon, \n#             type = 'scatter3d', mode = 'lines', opacity = 1, # opaque, \n#             line = list(color=\"darkgray\", width=7, lwd=7), name = 'Phase') %>%\n#   \n#     # Configure the scene layout\n#     layout(showlegend = FALSE,\n#            scene = list(aspectmode = \"manual\", \n#                         aspectratio = list(x=1, y=1, z=0.3),\n#                         xaxis = hide_axes_grid, yaxis = hide_axes_grid, \n#                         zaxis = hide_axes_grid)\n#            ) # 1:1:1 aspect ratio\n# p1",
      "line_count": 147
    }
  ]
}