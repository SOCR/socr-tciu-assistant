{
  "metadata": {
    "created_at": "2025-05-15T17:01:01.103466",
    "total_sections": 2,
    "total_code_chunks": 3,
    "total_tables": 1,
    "r_libraries": [
      "dplyr",
      "plotly"
    ]
  },
  "sections": [
    {
      "title": "Main",
      "content": "---\ntitle: \"Definition of Kime\"\nsubtitle: \"[Back To TCIU Contents](https://tciu.predictive.space/)\"\nauthor: \"SOCR Team \"\ndate: \"`r format(Sys.time(),'%m/%d/%Y')`\"\noutput: \n  html_document:\n    theme: spacelab\n    highlight: tango\n    includes:\n      before_body: TCIU_header.html\n    toc: true\n    number_sections: true\n    toc_depth: 2\n    toc_float:\n      collapsed: false\n      smooth_scroll: true",
      "word_count": 37
    },
    {
      "title": "Figure 1.8",
      "content": "A schematic of the 5D spacekime manifold, two cones representing space ($\\mathbb{R}^3$) - kime ($\\mathbb{R}^2$)\n\nComplex-time (kime) can be defined using [polar coordinates](https://en.wikipedia.org/wiki/Polar_coordinate_system), $\\kappa = t\\ e^{i \\varphi}$.\n\n\n*Kime* naturally extends *time*, $\\kappa = t\\ e^{i \\varphi}$, i.e., time is just \nthe *magnitude* of kime, $t=|\\kappa|$. The time domain $(t\\in\\mathbb{R}^+)$ \nis a subgroup of the multiplicative group of the reals, \nwhereas kime $(\\kappa\\in\\mathbb{C})$ is the smallest algebraically closed prime field\nthat naturally extends the time domain. The time domain of the positive reals \nis *ordered*, but its kime extension is *not.* The kime domain, $\\mathbb{C}$,\nrepresents the smallest natural extension of time, as a complete filed that covers time.\n\nThis Figure shows the spacekime representation of observable processes indexed \nby space, reduced to 1D, and kime (2D). At a given spatial location ($x$), \nthe red balls scattered along the circle of fixed radius (time) represent the \nrepeated process measurements from the experimentally controlled trials\ncolocalized in spacetime.\n\n\n<!--html_preserve-->\n<div>\n    \t<footer><center>\n\t\t\t<a href=\"https://www.socr.umich.edu/\">SOCR Resource</a>\n\t\t\t\tVisitor number <img class=\"statcounter\" src=\"https://c.statcounter.com/5714596/0/038e9ac4/0/\" alt=\"Web Analytics\" align=\"middle\" border=\"0\">\n\t\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\tvar d = new Date();\n\t\t\t\t\tdocument.write(\" | \" + d.getFullYear() + \" | \");\n\t\t\t\t</script> \n\t\t\t\t<a href=\"https://socr.umich.edu/img/SOCR_Email.png\"><img alt=\"SOCR Email\"\n\t \t\t\ttitle=\"SOCR Email\" src=\"https://socr.umich.edu/img/SOCR_Email.png\"\n\t \t\t\tstyle=\"border: 0px solid ;\"></a>\n\t \t\t </center>\n\t \t</footer>\n\n\t<!-- Start of StatCounter Code -->\n\t\t<script type=\"text/javascript\">\n\t\t\tvar sc_project=5714596; \n\t\t\tvar sc_invisible=1; \n\t\t\tvar sc_partition=71; \n\t\t\tvar sc_click_stat=1; \n\t\t\tvar sc_security=\"038e9ac4\"; \n\t\t</script>\n\t\t\n\t\t<script type=\"text/javascript\" src=\"https://www.statcounter.com/counter/counter.js\"></script>\n\t<!-- End of StatCounter Code -->\n\t\n\t<!-- GoogleAnalytics -->\n\t\t<script src=\"https://www.google-analytics.com/urchin.js\" type=\"text/javascript\"> </script>\n\t\t<script type=\"text/javascript\"> _uacct = \"UA-676559-1\"; urchinTracker(); </script>\n\t<!-- End of GoogleAnalytics Code -->\n</div>\n<!--/html_preserve-->",
      "word_count": 252
    }
  ],
  "tables": [
    {
      "section": "Main",
      "content": "    code_folding: hide\n---",
      "row_count": 2
    }
  ],
  "r_code": [
    {
      "section": "Main",
      "code": "knitr::opts_chunk$set(echo = TRUE, warings = FALSE)",
      "line_count": 1
    },
    {
      "section": "Figure 1.8",
      "code": "library(plotly)\nlibrary(dplyr)",
      "line_count": 2
    },
    {
      "section": "Figure 1.8",
      "code": "\n# parameter space sweep for the spherical coordinates\nphi <- seq(from = 0, to = 2*pi, by = ((2*pi - 0)/(200 - 1)))\npsi <- seq(from = 0, to = pi, by = ((pi - 0)/(200 - 1)))\n\n# shape==\"cone1\")\n    # rendering (u,v) parametric surfaces requires x,y,z arguments to be 2D arrays\n    # In out case, the three coordinates have to be 200*200 parameterized tensors/arrays\n    h1= 10   # cone height\n    r1 = seq(from = 0, to = h1, by = ((h1 - 0)/(200 - 1)))  # r = radius\n    x1 = 20* ((h1 - r1)/h1 ) %o% rep(1, 200)             # x = 3*r\n    y1 = 3* ((h1 - r1)/h1 ) %o% sin(phi)   # y = r*sin(phi)\n    z1 = 3* ((h1 - r1)/h1 ) %o% cos(phi)   # z = r*cos(phi)\n\n    # circle1 boundary\n    x11 = rep(20, 200) %o% rep(1, 200)             # x = 20\n    y11 = 3* ((h1 - r1)/h1 ) %o% sin(phi)   # y = r*sin(phi)\n    z11 = 3* ((h1 - r1)/h1 ) %o% cos(phi)   # z = r*cos(phi)\n    \n    # randomly kime-phase sample points on cone3\n    randX1 <- sample((dim(x1))[2], 10)\n\n# shape==\"cone2\")\n    h2= 10   # cone height\n    r2 = seq(from = 0, to = h2, by = ((h2 - 0)/(200 - 1)))  # r = radius\n    x2 = 20* ((h2 - r2)/h2 ) %o% rep(1, 200)             # x = 3*r\n    y2 = 2* ((h2 - r2)/h2 ) %o% sin(phi)   # y = r*sin(phi)\n    z2 = 2* ((h2 - r2)/h2 ) %o% cos(phi)   # z = r*cos(phi)\n\n    # circle2 boundary\n    x21 = rep(20, 200) %o% rep(1, 200)             # x = 20\n    y21 = 2* ((h2 - r2)/h2 ) %o% sin(phi)   # y = r*sin(phi)\n    z21 = 2* ((h2 - r2)/h2 ) %o% cos(phi)   # z = r*cos(phi)\n    \n# shape==\"cone3\")\n    h3= 10   # cone height\n    r3 = seq(from = 0, to = h3, by = ((h3 - 0)/(200 - 1)))  # r = radius\n    x3 = 15* ((h3 - r3)/h3 ) %o% rep(1, 200)             # x = 3*r\n    y3 = 3* ((h3 - r3)/h3 ) %o% sin(phi)   # y = r*sin(phi)\n    z3 = 3* ((h3 - r3)/h3 ) %o% cos(phi)   # z = r*cos(phi)\n\n    # circle3 boundary\n    x31 = rep(15, 200) %o% rep(1, 200)             # x = 15\n    y31 = 3* ((h3 - r3)/h3) %o% sin(phi)   # y = r*sin(phi)\n    z31 = 3* ((h3 - r3)/h3) %o% cos(phi)   # z = r*cos(phi)\n    \nshape_names <- c(\"all\", \"cone1\", \"cone2\", \"cone3\")\n\n# https://plot.ly/r/custom-buttons/\n\n# updatemenus component\nupdatemenus <- list(\n  list(\n    active = -1,\n    type = 'buttons',\n    buttons = list(\n      list(\n        label = shape_names[1],\n        method = \"update\",\n        args = list(list(visible = c(TRUE, TRUE, TRUE, TRUE)),\n                    list(title = shape_names[1]))),\n      list(\n        label = shape_names[2],\n        method = \"update\",\n        args = list(list(visible = c(TRUE, FALSE, FALSE, FALSE)),\n                    list(title = shape_names[2]))),\n      list(\n        label = shape_names[3],\n        method = \"update\",\n        args = list(list(visible = c(TRUE, TRUE, FALSE, FALSE)),\n                    list(title = shape_names[3]))),\n      list(\n        label = shape_names[4],\n        method = \"update\",\n        args = list(list(visible = c(TRUE, FALSE, FALSE, TRUE)),\n                    list(title = shape_names[4])))\n    )\n  )\n)\n\np <- \n  plot_ly(showscale = FALSE) %>%\n  # add cone1\n  # Randomly sample points (kime-phase sampling) the boundary of cone1 surface\n  add_trace(x=~x1[1,randX1], y=~y11[1,randX1], z=~z11[1,randX1], type=\"scatter3d\", \n            mode=\"markers\", marker = list(size = 10, color=\"red\"), name=\"Phase-Samples\",\n            text = paste0(\"Kime-Phase:\\n\", \"  space=\", 20, \"\\n  time=|kime|=\", h1, \n                          \"\\n  kime-phase=\", round((phi[randX1])-pi,2))) %>%\n  add_trace(x = ~x1, y = ~y1, z = ~z1, type = 'surface', opacity=0.3, visible=T,\n             contour=list(show=F, color=\"#000\", width=15, lwd=10,\n                          opacity=0.5, hoverinfo=\"none\", legendshow=F)) %>%\n  # add cone2\n  add_trace(x = ~x2, y = ~y2, z = ~z2, type='surface', opacity=0.4,visible=T,\n             contour=list(show=F, color=\"#000\", width=15, lwd=10,\n                          opacity=0.5, hoverinfo=\"none\", legendshow=F)) %>%\n  # add cone3\n  add_trace(x = ~x3, y = ~y3, z = ~z3, type='surface', opacity=0.5,visible=T,\n             contour=list(show=F, color=\"#000\", width=15, lwd=10,\n                          opacity=0.5, hoverinfo=\"none\", legendshow=F)) %>%\n  #\n  #\n  # trace the x-axis\n  add_trace(x=~1.1*x1[,1], y=0, z=0, type=\"scatter3d\", mode=\"lines\", \n              line = list(width = 10, color=\"light blue\"), name=\"Z\",\n              hoverinfo=\"none\", legendshow=F) %>%\n  #\n  #\n  # trace the boundary of cone1 surface\n  add_trace(x=~x1[1,], y=~y11[1,], z=~z11[1,], type=\"scatter3d\", mode=\"lines\", \n              line = list(width = 10, color=\"red\"), name=\"Surface Boundary\",\n              hoverinfo=\"none\", legendshow=F) %>%\n  # add center for kime circle1 at location x1\n  add_trace(x=~x1[1,1], y=0, z=0, type=\"scatter3d\", mode=\"markers\", \n              marker = list(size = 10, color=\"red\"), name=\"Z\",\n              hoverinfo=\"none\", legendshow=F) %>%\n  # trace the boundary of cone2 surface\n  add_trace(x=~x2[1,], y=~y21[1,], z=~z21[1,], type=\"scatter3d\", mode=\"lines\", \n              line = list(width = 10, color=\"green\"), name=\"Surface Boundary\",\n              hoverinfo=\"none\", legendshow=F) %>%\n  # trace the boundary of cone3 surface\n  add_trace(x=~x3[1,], y=~y31[1,], z=~z31[1,], type=\"scatter3d\", mode=\"lines\", \n              line = list(width = 10, color=\"blue\"), name=\"Surface Boundary\",\n              hoverinfo=\"none\", legendshow=F) %>%\n  # add center for cime circle3 at location x3\n  add_trace(x=~x3[1,1], y=0, z=0, type=\"scatter3d\", mode=\"markers\", \n              line = list(width = 10, color=\"navy blue\"), name=\"Z\",\n              hoverinfo=\"none\", legendshow=F) %>%\n  # layout\n  layout(title = \"Schematic of Space (1D) and Kime (2D) Representaiton\", showlegend = FALSE,\n         scene = list(xaxis=list(title=\"space\"), yaxis=list(title=\"kappa1\"),\n                      zaxis=list(title=\"kappa2\")),\n         updatemenus = updatemenus)\np",
      "line_count": 133
    }
  ]
}